package it.ltc.logica.trasporti.gui.preventivi.wizards.esistenti;

import java.lang.reflect.InvocationTargetException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.e4.ui.di.UISynchronize;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import it.ltc.logica.database.model.Indirizzo;
import it.ltc.logica.database.model.ListinoCommessa;
import it.ltc.logica.database.model.ListinoCorriere;
import it.ltc.logica.database.model.Spedizione;
import it.ltc.logica.gui.container.DialogProgresso;
import it.ltc.logica.gui.decoration.Decorator;
import it.ltc.logica.trasporti.calcolo.algoritmi.Calcolatore;
import it.ltc.logica.trasporti.calcolo.algoritmi.CorriereCalcolato;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;
import it.ltc.logica.trasporti.controller.PreventivoEsistentiController;
import it.ltc.logica.trasporti.controller.SpedizioniController;

public class PreventivoSpedizioniEsistentiRisultatoWizardPage extends WizardPage {
	
	private PreventivoEsistentiController controllerPreventivo;
	private SpedizioniController controllerSpedizioni;
	private SimpleDateFormat sdf;
	
	private TableViewer tableViewerDettaglio;
	private TableViewer tableViewerTotali;
	private Table tableDettaglio;
	private Table tableTotali;
	
	private final UISynchronize sync;

	public PreventivoSpedizioniEsistentiRisultatoWizardPage(UISynchronize s) {
		super("wizardPage");
		setTitle("Preventivo di costo e fatturazione per una spedizione gi\u00E0 esistente");
		setDescription("Risultato");
		controllerSpedizioni = SpedizioniController.getInstance();
		controllerPreventivo = PreventivoEsistentiController.getInstance();
		sdf = new SimpleDateFormat("dd/MM/yyyy");
		sync = s;
	}

	public void createControl(Composite parent) {
		Composite container = new Composite(parent, SWT.NULL);

		setControl(container);
		container.setLayout(new GridLayout(1, false));
		
		tableViewerDettaglio = new TableViewer(container, SWT.BORDER | SWT.FULL_SELECTION);
		tableViewerDettaglio.setContentProvider(new ArrayContentProvider());
		
		tableDettaglio = tableViewerDettaglio.getTable();
		tableDettaglio.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				int selectionIndex = tableDettaglio.getSelectionIndex();
				if (selectionIndex != -1) {
					TableItem selectedItem = tableDettaglio.getItem(selectionIndex);
					SpedizioneModel spedizione = (SpedizioneModel) selectedItem.getData();
					DettaglioCostoSpedizioneDialog dialog = new DettaglioCostoSpedizioneDialog(spedizione);
					int esito = dialog.open();
					if (esito == Dialog.OK) {
						//Se serve fare qualcosa qui.
					}
				}
			}
		});
		tableDettaglio.setLinesVisible(true);
		tableDettaglio.setHeaderVisible(true);
		tableDettaglio.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		TableViewerColumn colonnaData = new TableViewerColumn(tableViewerDettaglio, SWT.NONE);
		colonnaData.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				SpedizioneModel model = (SpedizioneModel) element;
				Spedizione spedizione = model.getSpedizione();
				String data = sdf.format(spedizione.getData());
				return data;
			}
		});
		
		TableColumn tblclmnData = colonnaData.getColumn();
		tblclmnData.setWidth(100);
		tblclmnData.setText("Data");
		
		TableViewerColumn colonnaDestinatario = new TableViewerColumn(tableViewerDettaglio, SWT.NONE);
		colonnaDestinatario.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				SpedizioneModel model = (SpedizioneModel) element;
				Spedizione spedizione =  model.getSpedizione();
				Integer idDestinatario = spedizione.getIdIndirizzoDestinazione();
				Indirizzo destinatario = controllerSpedizioni.getIndirizzo(idDestinatario);
				String ragioneSociale = destinatario.getRagioneSociale();
				return ragioneSociale;
			}
		});
		
		TableColumn tblclmnDestinatario = colonnaDestinatario.getColumn();
		tblclmnDestinatario.setWidth(100);
		tblclmnDestinatario.setText("Destinatario");
		
		TableViewerColumn colonnaRicavo = new TableViewerColumn(tableViewerDettaglio, SWT.NONE);
		colonnaRicavo.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				SpedizioneModel model = (SpedizioneModel) element;
				String valore = Decorator.getEuroValue(model.getPreventivoRicavo().getTotale());
				return valore;
			}
		});
		
		TableColumn tblclmnRicavo = colonnaRicavo.getColumn();
		tblclmnRicavo.setWidth(100);
		tblclmnRicavo.setText("Ricavo");
		
		Label lblTotale = new Label(container, SWT.NONE);
		lblTotale.setText("Totale: ");
		
		tableViewerTotali = new TableViewer(container, SWT.BORDER | SWT.FULL_SELECTION);
		tableTotali = tableViewerTotali.getTable();
		tableTotali.setLinesVisible(true);
		tableTotali.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		tableTotali.setBounds(0, 0, 85, 85);
		
		TableViewerColumn tableViewerColumn_4 = new TableViewerColumn(tableViewerTotali, SWT.NONE);
		TableColumn tblclmnNome = tableViewerColumn_4.getColumn();
		tblclmnNome.setWidth(100);
		tblclmnNome.setText("Nome");
		
		TableViewerColumn tableViewerColumn_5 = new TableViewerColumn(tableViewerTotali, SWT.NONE);
		TableColumn tblclmnTotale = tableViewerColumn_5.getColumn();
		tblclmnTotale.setWidth(100);
		tblclmnTotale.setText("Totale");
		tableViewerTotali.setLabelProvider(new LabelProvider());
		tableViewerTotali.setContentProvider(new ArrayContentProvider());
	}
	
	public void aggiornaDati() {
		
		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				int calcoli = controllerPreventivo.getListaSpedizioniSelezionate().size();
				monitor.beginTask("Calcolo dei preventivi", calcoli);
				calcola(monitor);
				monitor.done();
			}
		};

		try {
			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
			dialog.run(true, true, runnable);
		} catch (InvocationTargetException | InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	private void calcola(IProgressMonitor monitor) {
		
		Calcolatore calcolatore = Calcolatore.getInstance();
		ListinoCommessa listinoCommessa = controllerPreventivo.getListinoCommessa();
		List<ListinoCorriere> listiniCorriere = controllerPreventivo.getListiniCorriere();
		List<SpedizioneModel> listaModel = new ArrayList<SpedizioneModel>();
		double totaleRicavi = 0;
		double[] totaliCosto = new double[listiniCorriere.size()];
		for (Spedizione spedizione : controllerPreventivo.getListaSpedizioniSelezionate()) {
			SpedizioneModel model = SpedizioneModel.caricaSpedizione(spedizione);
			totaleRicavi += calcolatore.calcolaRicavo(model, listinoCommessa);
			int index = 0;
			for (ListinoCorriere listino : listiniCorriere) {
				totaliCosto[index] += calcolatore.calcolaCosto(model, listino);
				index += 1;
			}
			listaModel.add(model);
			monitor.worked(1);
		}
		
		final double totaleDefinitivoRicavi = totaleRicavi;
		
		sync.asyncExec(new Runnable() {
			@Override
			public void run() {
				svuotaTabelle();
				aggiungiColonneListini();
				tableViewerDettaglio.setInput(listaModel);
				for (TableColumn column : tableDettaglio.getColumns()) {
					column.pack();
				}
				//Totali
				TableItem itemRicavo =  new TableItem(tableTotali, SWT.NONE);
				itemRicavo.setText(0, listinoCommessa.getNome());
				itemRicavo.setText(1, Decorator.getEuroValue(totaleDefinitivoRicavi));
				for (int index = 0; index < totaliCosto.length; index++) {
					TableItem itemCosto =  new TableItem(tableTotali, SWT.NONE);
					itemCosto.setText(0, listiniCorriere.get(index).getNome());
					itemCosto.setText(1, Decorator.getEuroValue(totaliCosto[index]));
				}
				for (TableColumn column : tableTotali.getColumns()) {
					column.pack();
				}
			}});
	}
	
	private void aggiungiColonneListini() {
		for (ListinoCorriere listino : controllerPreventivo.getListiniCorriere()) {
			
			TableViewerColumn colonnaCosto = new TableViewerColumn(tableViewerDettaglio, SWT.NONE);
			colonnaCosto.setLabelProvider(new ColumnLabelProvider() {
				
				private ListinoCorriere l = listino;
				
				public String getText(Object element) {
					SpedizioneModel model = (SpedizioneModel) element;
					CorriereCalcolato corriere = null;
					for (CorriereCalcolato c : model.getPreventiviCosti()) {
						if (c.getListino().getId().equals(l.getId())) {
							corriere = c;
							break;
						}
					}
					String valore = Decorator.getEuroValue(corriere.getTotale());
					return valore;
				}
			});
			
			TableColumn tblclmnCosto = colonnaCosto.getColumn();
			tblclmnCosto.setWidth(100);
			tblclmnCosto.setText(listino.getNome());
		}
	}
	
	private void svuotaTabelle() {
		tableViewerDettaglio.setInput(null);
		for (int columnIndex = 3; columnIndex < tableDettaglio.getColumnCount(); columnIndex++) {
			TableColumn column = tableDettaglio.getColumn(columnIndex);
			column.dispose();
		}
		tableTotali.removeAll();
	}
}
