package it.ltc.logica.trasporti.gui.preventivi.wizards.esistenti;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.e4.ui.di.UISynchronize;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino.Scopo;
import it.ltc.logica.database.model.centrale.ListinoCommessa;
import it.ltc.logica.database.model.centrale.ListinoCorriere;
import it.ltc.logica.database.model.centrale.storico.SpedizioneStorica;
import it.ltc.logica.gui.container.DialogProgresso;
import it.ltc.logica.gui.container.PaginaWizardRisultati;
import it.ltc.logica.gui.decoration.Decorator;
import it.ltc.logica.trasporti.calcolo.algoritmi.CalcolatoreTrasporti;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;
import it.ltc.logica.trasporti.controller.PreventivoEsistentiController;
import it.ltc.logica.trasporti.gui.elements.spedizionemodel.TabellaSpedizioniModel;
import it.ltc.logica.trasporti.gui.preventivi.elements.TabellaTotali;

public class PreventivoSpedizioniEsistentiRisultatoWizardPage extends PaginaWizardRisultati {
	
	private static final String titolo = "Preventivo di costo e fatturazione per una spedizione gi\u00E0 esistente";
	private static final String descrizione = "Risultato del preventivo";
	
	private PreventivoEsistentiController controllerPreventivo;
	
	private Composite container;
	
	private TabellaSpedizioniModel tableViewerDettaglio;
	private TabellaTotali tableViewerTotali;
	private Table tableDettaglio;
	private Table tableTotali;
	
	private Composite compositeDati;
	private Label lblTotaleSpedizioni;
	private Label lblTotaleColli;
	private Label lblTotalePezzi;
	
	private final UISynchronize sync;
	private Composite compositeDettaglio;
	private Composite compositeTotali;

	public PreventivoSpedizioniEsistentiRisultatoWizardPage(UISynchronize s) {
		super(titolo, descrizione);
		controllerPreventivo = PreventivoEsistentiController.getInstance();
		sync = s;
	}
	
	private void calcola(IProgressMonitor monitor) {
		
		CalcolatoreTrasporti calcolatore = CalcolatoreTrasporti.getInstance();
		List<ListinoCommessa> listiniCommessa = controllerPreventivo.getListiniCommessa();
		List<ListinoCorriere> listiniCorriere = controllerPreventivo.getListiniCorriere();
		List<SpedizioneModel> listaModel = new ArrayList<SpedizioneModel>();
		int totaleSpedizioni = 0;
		int totaleColli = 0;
		int totalePezzi = 0;
		double[] totaleRicavi = new double[listiniCommessa.size()];
		double[] totaleRicaviNolo = new double[listiniCommessa.size()];;
		double[] totaleRicaviContrassegno = new double[listiniCommessa.size()];;
		double[] totaliCosto = new double[listiniCorriere.size()];
		double[] totaliCostoNolo = new double[listiniCorriere.size()];
		double[] totaliCostoContrassegno = new double[listiniCorriere.size()];
		for (SpedizioneStorica spedizione : controllerPreventivo.getListaSpedizioniSelezionate()) {
			SpedizioneModel model = SpedizioneModel.caricaSpedizione(spedizione);
			//Aggiorno i totali per le statistiche
			totaleSpedizioni += 1;
			totaleColli += model.getSpedizione().getColli();
			totalePezzi += model.getSpedizione().getPezzi();
			//Calcolo i ricavi
			int indexCommessa = 0;
			for (ListinoCommessa listino : listiniCommessa) {
				calcolatore.calcolaRicavo(model, listino);
				totaleRicavi[indexCommessa] += model.getCostoTotale(Scopo.RICAVO);
				totaleRicaviNolo[indexCommessa] += model.getCostoNolo(Scopo.RICAVO);
				totaleRicaviContrassegno[indexCommessa] += model.getCostoContrassegno(Scopo.RICAVO);
				indexCommessa += 1;
			}
			//Calcolo i costi
			int index = 0;
			for (ListinoCorriere listino : listiniCorriere) {
				calcolatore.calcolaCosto(model, listino);
				totaliCosto[index] += model.getCostoTotale(Scopo.COSTO);
				totaliCostoNolo[index] += model.getCostoNolo(Scopo.COSTO);
				totaliCostoContrassegno[index] += model.getCostoContrassegno(Scopo.COSTO);
				index += 1;
			}
			listaModel.add(model);
			monitor.worked(1);
		}
		
		final int spedizioni = totaleSpedizioni;
		final int colli = totaleColli;
		final int pezzi = totalePezzi;
		
		sync.asyncExec(new Runnable() {
			@Override
			public void run() {
				aggiornaTotaliStatistiche(spedizioni, colli, pezzi);
				impostaTabella();
				tableViewerDettaglio.setInput(listaModel);
				for (TableColumn column : tableDettaglio.getColumns()) {
					column.pack();
				}
				//Totali
				for (int index = 0; index < totaleRicavi.length; index++) {
					TableItem itemRicavo =  new TableItem(tableTotali, SWT.NONE);
					itemRicavo.setText(0, listiniCommessa.get(index).getNome());
					itemRicavo.setText(1, Decorator.getEuroValue(totaleRicavi[index]));
					itemRicavo.setText(2, Decorator.getEuroValue(totaleRicaviNolo[index]));
					itemRicavo.setText(3, Decorator.getEuroValue(totaleRicaviContrassegno[index]));
					itemRicavo.setText(4, Decorator.getEuroValue(totaleRicavi[index] - (totaleRicaviNolo[index] + totaleRicaviContrassegno[index])));
				}
				for (int index = 0; index < totaliCosto.length; index++) {
					TableItem itemCosto =  new TableItem(tableTotali, SWT.NONE);
					itemCosto.setText(0, listiniCorriere.get(index).getNome());
					itemCosto.setText(1, Decorator.getEuroValue(totaliCosto[index]));
					itemCosto.setText(2, Decorator.getEuroValue(totaliCostoNolo[index]));
					itemCosto.setText(3, Decorator.getEuroValue(totaliCostoContrassegno[index]));
					itemCosto.setText(4, Decorator.getEuroValue(totaliCosto[index] - (totaliCostoNolo[index] + totaliCostoContrassegno[index])));
				}
				for (TableColumn column : tableTotali.getColumns()) {
					column.pack();
				}
				container.layout();
			}});
	}
	
	protected void aggiornaTotaliStatistiche(int totaleSpedizioni, int totaleColli, int totalePezzi) {
		lblTotaleSpedizioni.setText("Totale Spedizioni: " + totaleSpedizioni);
		lblTotaleColli.setText("Totale Colli: " + totaleColli);
		lblTotalePezzi.setText("Totale Pezzi: " + totalePezzi);
		compositeDati.layout();
	}

	private void impostaTabella() {
		tableTotali.removeAll();
		for (Control control : compositeDettaglio.getChildren()) {
	        control.dispose();
	    }
		tableViewerDettaglio = new TabellaSpedizioniModel(compositeDettaglio, controllerPreventivo.getListiniCommessa(), controllerPreventivo.getListiniCorriere(), false);
		tableDettaglio = tableViewerDettaglio.getTable();
		tableDettaglio.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		compositeDettaglio.layout();
	}

	@Override
	public void aggiungiElementiGrafici(Composite c) {
		container = c;
		container.setLayout(new GridLayout(1, false));
		
		compositeDettaglio = new Composite(container, SWT.NONE);
		compositeDettaglio.setLayout(new GridLayout(1, false));
		compositeDettaglio.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
			
		compositeDati = new Composite(container, SWT.NONE);
		compositeDati.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeDati.setLayout(new GridLayout(3, false));
		
		lblTotaleSpedizioni = new Label(compositeDati, SWT.NONE);
		lblTotaleSpedizioni.setText("Totale Spedizioni: ");
		
		lblTotaleColli = new Label(compositeDati, SWT.NONE);
		lblTotaleColli.setText("Totale Colli: ");
		
		lblTotalePezzi = new Label(compositeDati, SWT.NONE);
		lblTotalePezzi.setText("Totale Pezzi: ");
		
		compositeTotali = new Composite(container, SWT.NONE);
		compositeTotali.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		compositeTotali.setLayout(new GridLayout(1, false));
		
		Label lblTotale = new Label(compositeTotali, SWT.NONE);
		lblTotale.setText("Totale Costi e Ricavi: ");
		
		tableViewerTotali = new TabellaTotali(compositeTotali, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
		tableTotali = tableViewerTotali.getTable();
		tableTotali.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableTotali.setBounds(0, 0, 564, 113);
		
	}

	@Override
	public void mostraRisultato() {
		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				int calcoli = controllerPreventivo.getListaSpedizioniSelezionate().size();
				monitor.beginTask("Calcolo dei preventivi", calcoli);
				calcola(monitor);
				monitor.done();
			}
		};

		try {
			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
			dialog.run(true, true, runnable);
		} catch (InvocationTargetException | InterruptedException e) {
			e.printStackTrace();
		}
	}
}
