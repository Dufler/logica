package it.ltc.logica.trasporti.gui.preventivi.wizards.esistenti;

import java.lang.reflect.InvocationTargetException;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.e4.ui.di.UISynchronize;
import org.eclipse.jface.operation.IRunnableWithProgress;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;

import it.ltc.logica.gui.dialog.DialogMessaggio;
import it.ltc.logica.gui.task.DialogProgresso;
import it.ltc.logica.gui.wizard.PaginaWizardRisultati;
import it.ltc.logica.trasporti.controller.preventivi.EsitoSimulazione;
import it.ltc.logica.trasporti.controller.preventivi.PreventivoEsistentiController;
import it.ltc.logica.trasporti.gui.elements.spedizionemodel.TabellaSpedizioniModel;
import it.ltc.logica.trasporti.gui.preventivi.elements.TabellaTotali;

public class PreventivoSpedizioniEsistentiRisultatoWizardPage extends PaginaWizardRisultati {
	
	private static final String titolo = "Preventivo di costo e fatturazione per una spedizione gi\u00E0 esistente";
	private static final String descrizione = "Risultato del preventivo";
	
	private PreventivoEsistentiController controllerPreventivo;
	
	private Composite container;
	
	private TabellaSpedizioniModel tableViewerDettaglio;
	private TabellaTotali tableViewerTotali;
	private Table tableDettaglio;
	private Table tableTotali;
	
	private Composite compositeDati;
	private Label lblTotaleSpedizioni;
	private Label lblTotaleColli;
	private Label lblTotalePezzi;
	
	private final UISynchronize sync;
	private Composite compositeDettaglio;
	private Composite compositeTotali;

	public PreventivoSpedizioniEsistentiRisultatoWizardPage(UISynchronize s) {
		super(titolo, descrizione, true);
		controllerPreventivo = PreventivoEsistentiController.getInstance();
		sync = s;
	}

	@Override
	public void aggiungiElementiGrafici(Composite c) {
		container = c;
		container.setLayout(new GridLayout(1, false));
		
		compositeDettaglio = new Composite(container, SWT.NONE);
		compositeDettaglio.setLayout(new GridLayout(1, false));
		compositeDettaglio.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
			
		compositeDati = new Composite(container, SWT.NONE);
		compositeDati.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeDati.setLayout(new GridLayout(3, false));
		
		lblTotaleSpedizioni = new Label(compositeDati, SWT.NONE);
		lblTotaleSpedizioni.setText("Totale Spedizioni: ");
		
		lblTotaleColli = new Label(compositeDati, SWT.NONE);
		lblTotaleColli.setText("Totale Colli: ");
		
		lblTotalePezzi = new Label(compositeDati, SWT.NONE);
		lblTotalePezzi.setText("Totale Pezzi: ");
		
		compositeTotali = new Composite(container, SWT.NONE);
		compositeTotali.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		compositeTotali.setLayout(new GridLayout(1, false));
		
		Label lblTotale = new Label(compositeTotali, SWT.NONE);
		lblTotale.setText("Totale Costi e Ricavi: ");
		
		tableViewerTotali = new TabellaTotali(compositeTotali, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI);
		tableTotali = tableViewerTotali.getTable();
		tableTotali.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableTotali.setBounds(0, 0, 564, 113);
		
	}

	@Override
	public void mostraRisultato() {
		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				int calcoli = controllerPreventivo.getListaSpedizioniSelezionate().size();
				monitor.beginTask("Calcolo dei preventivi", calcoli);
				calcola(monitor);
				monitor.done();
			}
		};

		try {
			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
			dialog.run(true, true, runnable);
		} catch (InvocationTargetException | InterruptedException e) {
			e.printStackTrace();
			String title = "Errore durante il calcolo dei preventivi";
			String message = "Errore durante il calcolo: " + e.getCause().getMessage() + "\r\n";
			for (StackTraceElement elemente : e.getCause().getStackTrace()) {
				message += elemente.toString() + "\r\n";
			}
			DialogMessaggio.openError(title, message);
		}
	}
	
	private void calcola(IProgressMonitor monitor) {
		EsitoSimulazione simulazione = controllerPreventivo.calcola(monitor);
		sync.asyncExec(new Runnable() {
			@Override
			public void run() {
				aggiornaTotaliStatistiche(simulazione.getSpedizioni(), simulazione.getColli(), simulazione.getPezzi());
				impostaTabella();
				tableViewerDettaglio.setInput(simulazione.getCalcoli());
				for (TableColumn column : tableDettaglio.getColumns()) {
					column.pack();
				}
				tableViewerTotali.setInput(simulazione.getTotali());
				for (TableColumn column : tableTotali.getColumns()) {
					column.pack();
				}
				container.layout();
			}
		});
	}
	
	protected void aggiornaTotaliStatistiche(int totaleSpedizioni, int totaleColli, int totalePezzi) {
		lblTotaleSpedizioni.setText("Totale Spedizioni: " + totaleSpedizioni);
		lblTotaleColli.setText("Totale Colli: " + totaleColli);
		lblTotalePezzi.setText("Totale Pezzi: " + totalePezzi);
		compositeDati.layout();
	}

	private void impostaTabella() {
		tableTotali.removeAll();
		for (Control control : compositeDettaglio.getChildren()) {
	        control.dispose();
	    }
		tableViewerDettaglio = new TabellaSpedizioniModel(compositeDettaglio, controllerPreventivo.getListiniCliente(), controllerPreventivo.getListiniCorriere(), controllerPreventivo.getListiniSimulazione(), false);
		tableDettaglio = tableViewerDettaglio.getTable();
		tableDettaglio.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		compositeDettaglio.layout();
	}
	
	@Override
	public void copyDataToModel() {
		//DO NOTHING!		
	}
	
}
