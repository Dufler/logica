package it.ltc.logica.common.controller.listini;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.operation.IRunnableWithProgress;

import it.ltc.logica.common.calcolo.algoritmi.MDettaglioVoce;
import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino.Scopo;
import it.ltc.logica.common.calcolo.algoritmi.MVoceFissa;
import it.ltc.logica.common.calcolo.algoritmi.MVocePercentuale;
import it.ltc.logica.common.calcolo.algoritmi.MVoceProporzionale;
import it.ltc.logica.common.calcolo.algoritmi.MVoceScaglioni;
import it.ltc.logica.common.calcolo.algoritmi.MVoceScaglioniRipetuti;
import it.ltc.logica.common.calcolo.algoritmi.Scaglione;
import it.ltc.logica.common.calcolo.algoritmi.TipoAlgoritmo;
import it.ltc.logica.common.controller.fatturazione.ControllerAmbitiFatturazione;
import it.ltc.logica.database.configuration.Database;
import it.ltc.logica.database.model.centrale.fatturazione.AmbitoFattura;
import it.ltc.logica.database.model.centrale.fatturazione.SottoAmbitoFattura;
import it.ltc.logica.database.model.centrale.listini.ListinoCorriere;
import it.ltc.logica.database.model.centrale.listini.VoceDiListinoCorriere;
import it.ltc.logica.database.model.centrale.listini.VoceDiListinoCorriereFissa;
import it.ltc.logica.database.model.centrale.listini.VoceDiListinoCorrierePercentuale;
import it.ltc.logica.database.model.centrale.listini.VoceDiListinoCorriereProporzionale;
import it.ltc.logica.database.model.centrale.listini.VoceDiListinoCorriereScaglioni;
import it.ltc.logica.database.model.centrale.listini.VoceDiListinoCorriereScaglioniRipetuti;
import it.ltc.logica.database.model.locale.ListinoSimulazione;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoce;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoceFissa;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVocePercentuale;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoceProporzionale;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoceScaglioni;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoceScaglioniRipetuti;
import it.ltc.logica.database.orm.EntityManager;
import it.ltc.logica.gui.decoration.Decorator;
import it.ltc.logica.gui.dialog.DialogMessaggio;
import it.ltc.logica.gui.task.DialogProgresso;
import it.ltc.logica.gui.task.Processo;
import it.ltc.logica.utilities.excel.FileExcel;

/**
 * Controller per il caricamento e la gestione dei listini di simulazione conservati nel DB locale.
 * @author Damiano Bellucci - damiano.bellucci@gmail.com
 *
 */
public class ListiniSimulazioneController {
	
public static final String MESSAGGIO_ERRORE_CREAZIONE_LISTINO_DA_CORRIERE = "Impossibile creare il listino.";
	
	private static ListiniSimulazioneController instance;
	
	private final EntityManager<ListinoSimulazione> managerListini;
	private final EntityManager<ListinoSimulazioneVoce> managerVociDiListino;
	private final EntityManager<ListinoSimulazioneVoceFissa> managerVociFisse;
	private final EntityManager<ListinoSimulazioneVocePercentuale> managerVociPercentuali;
	private final EntityManager<ListinoSimulazioneVoceProporzionale> managerVociProporzionali;
	private final EntityManager<ListinoSimulazioneVoceScaglioni> managerVociScaglioni;
	private final EntityManager<ListinoSimulazioneVoceScaglioniRipetuti> managerVociScaglioniRipetuti;
	
	private TipoAlgoritmo tipoAlgoritmoSelezionato;
	private ListinoSimulazioneVoce voce;
	private ListinoSimulazioneVoceFissa voceFissa;
	private ListinoSimulazioneVocePercentuale vocePercentuale;
	private ListinoSimulazioneVoceProporzionale voceProporzionale;
	private List<ListinoSimulazioneVoceScaglioni> vociScaglioni;
	private ListinoSimulazioneVoceScaglioniRipetuti voceScaglioniRipetuti;
	
	private final HashMap<Integer, ListinoSimulazione> listini;
	private final HashMap<Integer, List<ListinoSimulazioneVoce>> mappaListinoEVoci;
	private final HashMap<Integer, ListinoSimulazioneVoce> vociDiListino;
	private final HashMap<Integer, ListinoSimulazioneVoceFissa> vociFisse;
	private final HashMap<Integer, ListinoSimulazioneVocePercentuale> vociPercentuali;
	private final HashMap<Integer, ListinoSimulazioneVoceProporzionale> vociProporzionali;
	private final HashMap<Integer, ListinoSimulazioneVoceScaglioniRipetuti> vociScaglioniRipetuti;
	private final HashMap<Integer, List<ListinoSimulazioneVoceScaglioni>> vociAScaglioni;

	private ListiniSimulazioneController() {
		Database db = Database.SQLITE;
		managerListini = new EntityManager<ListinoSimulazione>(ListinoSimulazione.class, db);
		managerVociDiListino = new EntityManager<ListinoSimulazioneVoce>(ListinoSimulazioneVoce.class, db);
		managerVociFisse = new EntityManager<ListinoSimulazioneVoceFissa>(ListinoSimulazioneVoceFissa.class, db);
		managerVociPercentuali = new EntityManager<ListinoSimulazioneVocePercentuale>(ListinoSimulazioneVocePercentuale.class, db);
		managerVociProporzionali = new EntityManager<ListinoSimulazioneVoceProporzionale>(ListinoSimulazioneVoceProporzionale.class, db);
		managerVociScaglioni = new EntityManager<ListinoSimulazioneVoceScaglioni>(ListinoSimulazioneVoceScaglioni.class, db);
		managerVociScaglioniRipetuti = new EntityManager<ListinoSimulazioneVoceScaglioniRipetuti>(ListinoSimulazioneVoceScaglioniRipetuti.class, db);
		tipoAlgoritmoSelezionato = null;
		listini = new HashMap<Integer, ListinoSimulazione>();
		vociDiListino = new HashMap<Integer, ListinoSimulazioneVoce>();
		mappaListinoEVoci = new HashMap<Integer, List<ListinoSimulazioneVoce>>();
		vociFisse = new HashMap<Integer, ListinoSimulazioneVoceFissa>();
		vociPercentuali = new HashMap<Integer, ListinoSimulazioneVocePercentuale>();
		vociProporzionali = new HashMap<Integer, ListinoSimulazioneVoceProporzionale>();
		vociScaglioniRipetuti = new HashMap<Integer, ListinoSimulazioneVoceScaglioniRipetuti>();
		vociAScaglioni = new HashMap<Integer, List<ListinoSimulazioneVoceScaglioni>>();
		caricaListini();
	}
	
	public static ListiniSimulazioneController getInstance() {
		if (instance == null) {
			instance = new ListiniSimulazioneController();
		}
		return instance;
	}
	
	private void caricaListini() {
		ProcessoCaricamentoListini processo = new ProcessoCaricamentoListini();
		DialogProgresso dialog = new DialogProgresso("Caricamento Listini", false);
		dialog.esegui(processo);
	}

	public boolean eliminaListino(ListinoSimulazione listino) {
		int eliminazioni = managerListini.delete(listino);
		boolean eliminato = eliminazioni == 1;
		if (eliminato)
			listini.remove(listino.getId());
		return eliminato;
	}

	public boolean eliminaListinoSimulazioneVoce(ListinoSimulazioneVoce voce) {
		int eliminazioni = managerVociDiListino.delete(voce);
		boolean eliminato = eliminazioni == 1;
		if (eliminato) {
			mappaListinoEVoci.get(voce.getIdListino()).remove(voce);
			vociDiListino.remove(voce.getId());
			vociFisse.remove(voce.getId());
			vociProporzionali.remove(voce.getId());
			vociPercentuali.remove(voce.getId());
			vociAScaglioni.remove(voce.getId());
			vociScaglioniRipetuti.remove(voce.getId());
		}
		return eliminato;
	}

	public List<ListinoSimulazione> getTuttiIListiniClienti() {
		List<ListinoSimulazione> lista = new LinkedList<ListinoSimulazione>();
		for (Integer id : listini.keySet()) {
			lista.add(listini.get(id));
		}
		return lista;
	}
	
	public List<ListinoSimulazione> getListiniDiSimulazione() {
		List<ListinoSimulazione> lista = new LinkedList<ListinoSimulazione>();
		for (Integer id : listini.keySet()) {
			ListinoSimulazione listino = listini.get(id);
			int tipo = listino.getTipo();
			if (tipo == AmbitoFattura.ID_SIMULAZIONI_TRASPORTI || tipo == AmbitoFattura.ID_SIMULAZIONI_CORRIERI)
				lista.add(listino);
		}
		return lista;
	}

	public List<ListinoSimulazioneVoce> getVociDiListino(int idListino) {
		return mappaListinoEVoci.get(idListino);
	}

	public boolean creaNuovoListino(ListinoSimulazione listino) {
		int id = managerListini.insertAndReturnID(listino);
		boolean inserimento = id != -1;
		if (inserimento) {
			listino.setId(id);
			listini.put(id, listino);
			LinkedList<ListinoSimulazioneVoce> listaNuoveVociCopiate =  new LinkedList<ListinoSimulazioneVoce>();
			mappaListinoEVoci.put(id, listaNuoveVociCopiate);
		}
		return inserimento;
	}

	public boolean aggiornaListinoCliente(ListinoSimulazione listino) {
		boolean update = managerListini.update(listino);
		return update;
	}
	
	public void setTipoAlgoritmoSelezionato(TipoAlgoritmo algoritmo) {
		tipoAlgoritmoSelezionato = algoritmo;		
	}
	
	public TipoAlgoritmo getTipoAlgoritmoSelezionato() {
		return tipoAlgoritmoSelezionato;
	}

	public void setNuovaListinoSimulazioneVoce(ListinoSimulazioneVoce nuovaVoce) {
		voce = nuovaVoce;
	}
	
	public ListinoSimulazioneVoce getNuovaListinoSimulazioneVoce() {
		return voce;
	}

	public void setVoceFisso(ListinoSimulazioneVoceFissa nuovaVoce) {
		voceFissa = nuovaVoce;
	}

	public ListinoSimulazioneVoceFissa getVoceFisso() {
		return voceFissa;
	}

	public ListinoSimulazioneVocePercentuale getVocePercentuale() {
		return vocePercentuale;
	}

	public void setVocePercentuale(ListinoSimulazioneVocePercentuale vocePercentuale) {
		this.vocePercentuale = vocePercentuale;
	}

	public ListinoSimulazioneVoceProporzionale getVoceProporzionale() {
		return voceProporzionale;
	}

	public void setVoceProporzionale(ListinoSimulazioneVoceProporzionale voceProporzionale) {
		this.voceProporzionale = voceProporzionale;
	}

	public ListinoSimulazioneVoceScaglioniRipetuti getVoceScaglioniRipetuti() {
		return voceScaglioniRipetuti;
	}

	public void setVoceScaglioniRipetuti(ListinoSimulazioneVoceScaglioniRipetuti voceScaglioniRipetuti) {
		this.voceScaglioniRipetuti = voceScaglioniRipetuti;
	}

	public List<ListinoSimulazioneVoceScaglioni> getVociScaglioni() {
		return vociScaglioni;
	}

	public void setVociScaglioni(List<ListinoSimulazioneVoceScaglioni> vociScaglioni) {
		this.vociScaglioni = vociScaglioni;
	}

	public boolean creaNuovaListinoSimulazioneVoce() {
		boolean esito = false;
		if (voce != null) {
			int id = managerVociDiListino.insertAndReturnID(voce);
			if (id != -1) {
				voce.setId(id);
				vociDiListino.put(id, voce);
				List<ListinoSimulazioneVoce> lista = mappaListinoEVoci.get(voce.getIdListino());
				lista.add(voce);
				switch (tipoAlgoritmoSelezionato) {
					case FISSO : {esito = creaNuovaVoceFissa(id); break;}
					case PROPORZIONALE : {esito = creaNuovaVoceProporzionale(id); break;}
					case SCAGLIONI : {esito = creaNuoveVociScaglioni(id); break;}
					case SCAGLIONI_RIPETUTI : {esito = creaNuoveVociScaglioniRipetuti(id); break;}
					case PERCENTUALE : {esito = creaNuovaVocePercentuale(id); break;}
					default : break;
				}
			}
		}
		resetNuovaVoce();
		return esito;
	}
	
	private boolean creaNuovaVoceFissa(int idVoce) {
		voceFissa.setId(idVoce);
		boolean inserimento = managerVociFisse.insert(voceFissa);
		if (inserimento)
			vociFisse.put(idVoce, voceFissa);
		return inserimento;
	}
	
	private boolean creaNuovaVocePercentuale(int idVoce) {
		vocePercentuale.setId(idVoce);
		boolean inserimento = managerVociPercentuali.insert(vocePercentuale);
		if (inserimento)
			vociPercentuali.put(idVoce, vocePercentuale);
		return inserimento;
	}
	
	private boolean creaNuovaVoceProporzionale(int idVoce) {
		voceProporzionale.setId(idVoce);
		boolean inserimento = managerVociProporzionali.insert(voceProporzionale);
		if (inserimento)
			vociProporzionali.put(idVoce, voceProporzionale);
		return inserimento;
	}
	
	private boolean creaNuoveVociScaglioni(int idVoce) {
		boolean inserimento = false;
		int inserimenti = 0;
		for (ListinoSimulazioneVoceScaglioni voce : vociScaglioni) {
			voce.setId(idVoce);
			boolean insert = managerVociScaglioni.insert(voce);
			if (insert)
				inserimenti += 1;
		}
		if (inserimenti == vociScaglioni.size()) {
			inserimento = true;
			vociAScaglioni.put(idVoce, vociScaglioni);
		}
		return inserimento;
	}
	
	private boolean creaNuoveVociScaglioniRipetuti(int idVoce) {
		voceScaglioniRipetuti.setId(idVoce);
		boolean inserimento = managerVociScaglioniRipetuti.insert(voceScaglioniRipetuti);
		if (inserimento)
			vociScaglioniRipetuti.put(idVoce, voceScaglioniRipetuti);
		return inserimento;
	}
	
	private void resetNuovaVoce() {
		voce = null;
		voceFissa = null;
		vocePercentuale = null;
		voceProporzionale = null;
		vociScaglioni = null;
		tipoAlgoritmoSelezionato = null;
	}

	public boolean aggiornaListinoSimulazioneVoce(ListinoSimulazioneVoce voceDiListino) {
		boolean update = managerVociDiListino.update(voceDiListino);
		return update;
	}

	public boolean aggiornaListinoSimulazioneVoceFissa(ListinoSimulazioneVoceFissa voceDiListinoFissa) {
		boolean update = managerVociFisse.update(voceDiListinoFissa);
		return update;
	}

	public boolean aggiornaListinoSimulazioneVocePercentuale(ListinoSimulazioneVocePercentuale voceDiListinoPercentuale) {
		boolean update = managerVociPercentuali.update(voceDiListinoPercentuale);
		return update;
	}

	public boolean aggiornaListinoSimulazioneVoceProporzionale(ListinoSimulazioneVoceProporzionale voceDiListinoProporzionale) {
		boolean update = managerVociProporzionali.update(voceDiListinoProporzionale);
		return update;
	}

	public boolean aggiornaListinoSimulazioneVoceScaglioniRipetuti(ListinoSimulazioneVoceScaglioniRipetuti voceDiListinoScaglioniRipetuti) {
		boolean update = managerVociScaglioniRipetuti.update(voceDiListinoScaglioniRipetuti);
		return update;
	}

	public boolean aggiornaListinoSimulazioneVoceScaglioni(List<ListinoSimulazioneVoceScaglioni> listaVociScaglioni, Integer id) {
		boolean insert = true;
		ListinoSimulazioneVoceScaglioni filtro = new ListinoSimulazioneVoceScaglioni();
		filtro.setId(id);
		managerVociScaglioni.delete(filtro);
		for (ListinoSimulazioneVoceScaglioni scaglione : listaVociScaglioni) {
			boolean partialInsert = managerVociScaglioni.insert(scaglione);
			if (!partialInsert)
				insert = false;
		}
		if (insert)
			vociAScaglioni.put(id, listaVociScaglioni);
		return insert;
	}

	public ListinoSimulazione getListinoCliente(Integer idListinoSimulazione) {
		return listini.get(idListinoSimulazione);
	}
	
	public List<ListinoSimulazione> getListiniPerTipo(Integer tipo) {
		List<ListinoSimulazione> listiniPerTipo = new LinkedList<ListinoSimulazione>();
		for (Integer idListino : listini.keySet()) {
			ListinoSimulazione listino = listini.get(idListino);
			if (listino.getTipo().equals(tipo))
				listiniPerTipo.add(listino);
		}
		return listiniPerTipo;
	}

	public boolean copiaListino(ListinoSimulazione listino) {
		boolean copiato = true;
		ListinoSimulazione copia = new ListinoSimulazione();
		//copia.setIdCommessa(listino.getIdCommessa());
		copia.setNome("Copia di " + listino.getNome());
		copia.setDescrizione(listino.getDescrizione());
		copia.setTipo(AmbitoFattura.ID_SIMULAZIONI_TRASPORTI);
		int idListinoCopia = managerListini.insertAndReturnID(copia);
		if (idListinoCopia != -1) {
			copia.setId(idListinoCopia);
			listini.put(idListinoCopia, copia);
			LinkedList<ListinoSimulazioneVoce> listaNuoveVociCopiate =  new LinkedList<ListinoSimulazioneVoce>();
			mappaListinoEVoci.put(idListinoCopia, listaNuoveVociCopiate);
			ListinoSimulazioneVoce filtroVoci = new ListinoSimulazioneVoce();
			filtroVoci.setIdListino(listino.getId());
			List<ListinoSimulazioneVoce> voci = managerVociDiListino.getEntities(filtroVoci);
			for (ListinoSimulazioneVoce voce : voci) {
				ListinoSimulazioneVoce nuovaVoce = new ListinoSimulazioneVoce();
				nuovaVoce.setIdListino(idListinoCopia);
				nuovaVoce.setNome(voce.getNome());
				nuovaVoce.setDescrizione(voce.getDescrizione());
				nuovaVoce.setTipo(voce.getTipo());
				nuovaVoce.setIdsottoAmbito(voce.getIdsottoAmbito());
				nuovaVoce.setValoreSottoAmbito(voce.getValoreSottoAmbito());
				nuovaVoce.setStrategia(voce.getStrategia());
				int idVoceCopia = managerVociDiListino.insertAndReturnID(nuovaVoce);
				nuovaVoce.setId(idVoceCopia);
				listaNuoveVociCopiate.add(nuovaVoce);
				vociDiListino.put(idVoceCopia, nuovaVoce);
				TipoAlgoritmo tipo = TipoAlgoritmo.getTipo(voce.getTipo());
				switch (tipo) {
					case FISSO : {copiato = copiaVoceFissa(idVoceCopia, voce); break;}
					case PROPORZIONALE : {copiato = copiaVoceProporzionale(idVoceCopia, voce); break;}
					case SCAGLIONI : {copiato = copiaVociScaglioni(idVoceCopia, voce); break;}
					case SCAGLIONI_RIPETUTI : {copiato = copiaVociScaglioniRipetuti(idVoceCopia, voce); break;}
					case PERCENTUALE : {copiato = copiaVocePercentuale(idVoceCopia, voce); break;}
					default : break;
				}
			}
		} else {
			copiato = false;
		}
		return copiato;
	}
	
	private boolean copiaVocePercentuale(int idVoceCopia, ListinoSimulazioneVoce voce) {
		ListinoSimulazioneVocePercentuale percentuale = vociPercentuali.get(voce.getId());
		ListinoSimulazioneVocePercentuale copia = new ListinoSimulazioneVocePercentuale();
		copia.setId(idVoceCopia);
		//copia.setTipo(percentuale.getTipo());
		copia.setValore(percentuale.getValore());
		copia.setMassimo(percentuale.getMassimo());
		copia.setMinimo(percentuale.getMinimo());
		boolean copiato = managerVociPercentuali.insert(copia);
		if (copiato)
			vociPercentuali.put(idVoceCopia, copia);
		return copiato;
	}

	private boolean copiaVociScaglioniRipetuti(int idVoceCopia, ListinoSimulazioneVoce voce) {
		ListinoSimulazioneVoceScaglioniRipetuti voceSR = vociScaglioniRipetuti.get(voce.getId());
		ListinoSimulazioneVoceScaglioniRipetuti copia = new ListinoSimulazioneVoceScaglioniRipetuti();
		copia.setId(idVoceCopia);
		//copia.setTipo(voceSR.getTipo());
		copia.setValore(voceSR.getValore());
		copia.setIntervallo(voceSR.getIntervallo());
		copia.setMinimo(voceSR.getMinimo());
		copia.setMassimo(voceSR.getMassimo());
		boolean copiato = managerVociScaglioniRipetuti.insert(copia);
		if (copiato)
			vociScaglioniRipetuti.put(idVoceCopia, copia);
		return copiato;
	}

	private boolean copiaVociScaglioni(int idVoceCopia, ListinoSimulazioneVoce voce) {
		List<ListinoSimulazioneVoceScaglioni> voci = vociAScaglioni.get(voce.getId());
		List<ListinoSimulazioneVoceScaglioni> vociCopiate = new LinkedList<ListinoSimulazioneVoceScaglioni>(); 
		for (ListinoSimulazioneVoceScaglioni voceScaglioni : voci) {
			ListinoSimulazioneVoceScaglioni copia = new ListinoSimulazioneVoceScaglioni();
			copia.setId(idVoceCopia);
			//copia.setTipo(voceScaglioni.getTipo());
			copia.setValore(voceScaglioni.getValore());
			copia.setInizio(voceScaglioni.getInizio());
			copia.setFine(voceScaglioni.getFine());
			boolean copiato = managerVociScaglioni.insert(copia);
			if (copiato)
				vociCopiate.add(copia);
		}
		boolean copiato = vociCopiate.size() == voci.size();
		if (copiato)
			vociAScaglioni.put(idVoceCopia, vociCopiate);
		return copiato;
	}

	private boolean copiaVoceProporzionale(int idVoceCopia, ListinoSimulazioneVoce voce) {
		ListinoSimulazioneVoceProporzionale proporzionale = vociProporzionali.get(voce.getId());
		ListinoSimulazioneVoceProporzionale copia = new ListinoSimulazioneVoceProporzionale();
		copia.setId(idVoceCopia);
		copia.setMassimo(proporzionale.getMassimo());
		copia.setMinimo(proporzionale.getMinimo());
		//copia.setTipo(proporzionale.getTipo());
		copia.setValore(proporzionale.getValore());
		boolean copiato = managerVociProporzionali.insert(copia);
		if (copiato)
			vociProporzionali.put(idVoceCopia, copia);
		return copiato;
	}

	private boolean copiaVoceFissa(int idVoceCopia, ListinoSimulazioneVoce voce) {
		ListinoSimulazioneVoceFissa fissa = vociFisse.get(voce.getId());
		ListinoSimulazioneVoceFissa copia = new ListinoSimulazioneVoceFissa();
		copia.setId(idVoceCopia);
		copia.setValore(fissa.getValore());
		boolean copiato = managerVociFisse.insert(copia);
		if (copiato)
			vociFisse.put(idVoceCopia, copia);
		return copiato;
	}
	
	private String getNomeFile(ListinoSimulazione listino, String path) {
		String nomeListino = "listino";
		String estensione = ".xls";
		String nomeFile = path + "\\"  + nomeListino + estensione;
		return nomeFile;
	}

	public void esportaListino(ListinoSimulazione listino, String path) {
		String nomeFile = getNomeFile(listino, path);
		FileExcel workbook = FileExcel.getFileExcel(nomeFile);
		boolean successo = false;
		if (workbook != null) {
			workbook.creaFoglio(listino.getNome());
			//Titolo - riga 1
			workbook.aggiungiTitolo(listino.getNome(), 0, 0, "Listino di ...");
			workbook.aggiungiTitolo(listino.getNome(), 0, 3, "N.B. Il listino e' stato reso anonimo!");
			//Sotto titolo, tipo e descrizione - riga 2
			workbook.aggiungiSottoTitolo(listino.getNome(), 0, 1, "Tipo: " + ControllerAmbitiFatturazione.getInstance().getAmbito(listino.getTipo()));
			workbook.aggiungiSottoTitolo(listino.getNome(), 1, 1, listino.getDescrizione());
			//Nomi delle colonne per le voci di listino, salto una riga
			workbook.aggiungiSottoTitolo(listino.getNome(), 0, 3, "Voce");
			workbook.aggiungiSottoTitolo(listino.getNome(), 1, 3, "Ambito");
			workbook.aggiungiSottoTitolo(listino.getNome(), 2, 3, "Tipo Calcolo");
			workbook.aggiungiSottoTitolo(listino.getNome(), 3, 3, "Valori");
			//Inserisco le voci di listino
			int riga = 4;
			for (ListinoSimulazioneVoce voce : getVociDiListino(listino.getId())) {
				workbook.aggiungiTesto(listino.getNome(), 0, riga, voce.getNome());
				workbook.aggiungiTesto(listino.getNome(), 1, riga, getDescrizioneAmbito(voce));
				workbook.aggiungiTesto(listino.getNome(), 2, riga, voce.getTipo());
				List<String> valori = getDescrizioneValori(voce);
				for (String valore : valori) {
					workbook.aggiungiTesto(listino.getNome(), 3, riga, valore);
					riga += 1;
				}
			}
			successo = workbook.salvaEChiudi();
			
		}
		if (successo) {
			DialogMessaggio.openInformation("Esportazione completata", "Esportazione completata!\r\nE' stato generato il file:\r\n" + nomeFile);
		} else {
			DialogMessaggio.openError("Errore nella esportazione", "Non \u00E8 stato possibile esportare il listino.");
		}
	}
	
	private String getDescrizioneAmbito(ListinoSimulazioneVoce voce) {
		SottoAmbitoFattura ambito = ControllerAmbitiFatturazione.getInstance().getSottoAmbito(voce.getIdsottoAmbito());
		String nomeAmbito = ambito.getNome();
		return nomeAmbito;
	}
	
	private List<String> getDescrizioneValori(ListinoSimulazioneVoce voce) {
		List<String> valori = new LinkedList<String>();
		TipoAlgoritmo tipo = TipoAlgoritmo.getTipo(voce.getTipo());
		switch (tipo) {
			case FISSO : {valori.add(stampaVoceFissa(voce)); break;}
			case PROPORZIONALE : {valori.addAll(stampaVoceProporzionale(voce)); break;}
			case SCAGLIONI : {valori.addAll(stampaVociScaglioni(voce)); break;}
			case SCAGLIONI_RIPETUTI : {valori.addAll(stampaVoceScaglioniRipetuti(voce)); break;}
			case PERCENTUALE : {valori.addAll(stampaVocePercentuale(voce)); break;}
			default : break;
		}
		return valori;
	}
	
	private String stampaVoceFissa(ListinoSimulazioneVoce voce) {
		ListinoSimulazioneVoceFissa fissa = vociFisse.get(voce.getId());
		String stampa = Decorator.getEuroValue(fissa.getValore());
		return stampa;
	}
	
	private List<String> stampaVoceProporzionale(ListinoSimulazioneVoce voce) {
		List<String> valori = new LinkedList<String>();
		ListinoSimulazioneVoceProporzionale proporzionale = vociProporzionali.get(voce.getId());
		String tipo = "a: " + voce.getStrategia();
		valori.add(tipo);
		String stampa = " " + Decorator.getEuroValue(proporzionale.getValore());
		if (proporzionale.getMinimo() != null)
			stampa += " minimo: " + proporzionale.getMinimo();
		if (proporzionale.getMassimo() != null)
			stampa += " massimo: " + proporzionale.getMassimo();
		valori.add(stampa);
		return valori;
	}
	
	private List<String> stampaVocePercentuale(ListinoSimulazioneVoce voce) {
		List<String> valori = new LinkedList<String>();
		ListinoSimulazioneVocePercentuale percentuale = vociPercentuali.get(voce.getId());
		String tipo = "Calcolato su: " + voce.getStrategia();
		valori.add(tipo);
		String stampa = percentuale.getValore() + " %";
		if (percentuale.getMinimo() != null)
			stampa += " minimo: " + Decorator.getEuroValue(percentuale.getMinimo());
		if (percentuale.getMassimo() != null)
			stampa += " massimo: " + Decorator.getEuroValue(percentuale.getMassimo());
		valori.add(stampa);
		return valori;
	}
	
	private List<String> stampaVoceScaglioniRipetuti(ListinoSimulazioneVoce voce) {
		List<String> valori = new LinkedList<String>();
		ListinoSimulazioneVoceScaglioniRipetuti sr = vociScaglioniRipetuti.get(voce.getId());
		String tipo = voce.getStrategia(); //sr.get;
		String um = (tipo.equals("COLLI")) ? " Colli" : " Kg";
		valori.add("Calcolato su: " + tipo);
		String stampa = Decorator.getEuroValue(sr.getValore());
		stampa += " ogni " + sr.getIntervallo() + um;
		if (sr.getMinimo() != null)
			stampa += " minimo: " + sr.getMinimo() + um;
		if (sr.getMassimo() != null)
			stampa += " massimo: " + sr.getMassimo() + um;
		valori.add(stampa);
		return valori;
	}
	
	private List<String> stampaVociScaglioni(ListinoSimulazioneVoce voce) {
		List<String> valori = new LinkedList<String>();
		List<ListinoSimulazioneVoceScaglioni> voci = vociAScaglioni.get(voce.getId());
		String tipo = voce.getStrategia(); //voci.get(0).getTipo();
		String um = (tipo.equals("COLLI")) ? " Colli" : " Kg";
		valori.add("Calcolato su: " + tipo);
		for (ListinoSimulazioneVoceScaglioni v : voci) {
			String stampa = " da: " + v.getInizio() + um;
			stampa += " a: " + v.getFine() + um;
			stampa += " = " + Decorator.getEuroValue(v.getValore());
			valori.add(stampa);
		}
		return valori;
	}
	
	public String creaNuovoListinoDaCorriere(ListinoSimulazione listino, ListinoCorriere listinoCorriere, Double[] rincari) {
		String risultato;
		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			
			private String inserimento;
			
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				monitor.beginTask("Inserimento del nuovo listino", -1);
				inserimento = threadCreaNuovoListinoDaCorriere(listino, listinoCorriere, rincari);
				monitor.done();
			}
			
			@Override
			public String toString() {
				return inserimento;
			}
			
		};

		try {
			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
			dialog.run(true, true, runnable);
			risultato = runnable.toString();
		} catch (InvocationTargetException | InterruptedException e) {
			e.printStackTrace();
			risultato = "Errore nella generazione del listino.";
		}
		
		return risultato;
	}

	private String threadCreaNuovoListinoDaCorriere(ListinoSimulazione listino, ListinoCorriere listinoCorriere, Double[] rincari) {
		int id = managerListini.insertAndReturnID(listino);
		String inserimento = id != -1 ? "" : MESSAGGIO_ERRORE_CREAZIONE_LISTINO_DA_CORRIERE;
		if (inserimento.isEmpty()) {
			listino.setId(id);
			listini.put(id, listino);
			//Aggiungo le voci
			LinkedList<ListinoSimulazioneVoce> listaNuoveVociCopiate =  new LinkedList<ListinoSimulazioneVoce>();
			List<VoceDiListinoCorriere> vociDiListino = ControllerListiniCorrieri.getInstance().getVociDiListino(listinoCorriere.getId());
			for (VoceDiListinoCorriere voce : vociDiListino) {
				//Recupero le informazioni base
				String nome = voce.getNome();
				String descrizione = voce.getDescrizione();
				TipoAlgoritmo tipo = TipoAlgoritmo.getTipo(voce.getTipoCalcolo());
				Integer idSottoAmbito = voce.getIdSottoAmbito();
				Integer idAmbitoCorrispondente = getAmbitoCorrispondente(idSottoAmbito);
				String valoreSottoAmbito = voce.getValoreSottoAmbito();
				SottoAmbitoFattura sottoAmbito = ControllerAmbitiFatturazione.getInstance().getSottoAmbito(idSottoAmbito);
				if (idAmbitoCorrispondente == null) {
					//Notifico l'utente e passo alla prossima voce.
					inserimento += "Impossibile copiare la voce: '" + voce.getNome() + "', l'ambito: '" + sottoAmbito.getNome() + "' \u00E8 riservato solamente ai corrieri.\r\n";
					continue;
				}
				//Inserisco la nuova voce
				ListinoSimulazioneVoce nuovaVoce = new ListinoSimulazioneVoce();
				nuovaVoce.setIdListino(id);
				nuovaVoce.setNome(nome);
				nuovaVoce.setDescrizione(descrizione);
				nuovaVoce.setIdsottoAmbito(idAmbitoCorrispondente);
				nuovaVoce.setValoreSottoAmbito(valoreSottoAmbito);
				nuovaVoce.setTipo(tipo.getCodifica());
				nuovaVoce.setStrategia(voce.getStrategiaCalcolo());
				int idVoce = managerVociDiListino.insertAndReturnID(nuovaVoce);
				//Inserisco i dettagli specifici della voce
				if (idVoce != -1) {
					nuovaVoce.setId(idVoce);
					listaNuoveVociCopiate.add(nuovaVoce);
					double rincaro = getRincaro(sottoAmbito.getCategoriaAmbito(), rincari);
					switch (tipo) {
						case FISSO : {rincaraVoceFissa(idVoce, voce, rincaro); break;}
						case PROPORZIONALE : {rincaraVoceProporzionale(idVoce, voce, rincaro); break;}
						case SCAGLIONI : {rincaraVociScaglioni(idVoce, voce, rincaro); break;}
						case SCAGLIONI_RIPETUTI : {rincaraVociScaglioniRipetuti(idVoce, voce, rincaro); break;}
						case PERCENTUALE : {rincaraVocePercentuale(idVoce,voce, rincaro); break;}
						default : break;
					}
				}
			}
			mappaListinoEVoci.put(id, listaNuoveVociCopiate);
		}
		return inserimento;
	}
	
	private Integer getAmbitoCorrispondente(Integer idSottoAmbito) {
		Integer idCorrispondente;
		switch (idSottoAmbito) {
			case 54 : idCorrispondente = 82; break; //Spedizione con molti colli
			case 59 : idCorrispondente = 81; break; //Fuel
			case 62 : idCorrispondente = 80; break; //istat
			case 34 : idCorrispondente = 79; break; //contrassegno
			case 50 : idCorrispondente = 78; break; //nolo estero
			case 49 : idCorrispondente = 77; break; //nolo sud
			case 33 : idCorrispondente = 76; break; //nolo
			case 57: case 58 : case 87 : case 88 : case 28 : case 29 : idCorrispondente = 91; break; //priority
			case 56 : idCorrispondente = 92; break; //zone disagiate
			case 51 : idCorrispondente = 93; break; //isole
			case 95 : idCorrispondente = 94; break; //regione specifica
			case 97 : idCorrispondente = 98; break; //Nolo Light
			default : idCorrispondente = null;
		}
		return idCorrispondente;
	}

	private double getRincaro(String categoriaAmbito, Double[] rincari) {
		double valore;
		switch (categoriaAmbito) {
			case "NOLO_BASE" : valore = rincari[0]; break;
			case "NOLO_EXTRA" : valore = rincari[1]; break;
			case "EXTRA" : valore = rincari[2]; break;
			case "CONTRASSEGNO" : valore = rincari[3]; break;
			case "ISTAT" : valore = rincari[4]; break;
			case "FUEL" : valore = rincari[5]; break;
			default : valore = 0;
		}
		valore = (valore / 100.0) + 1;
		return valore;
	}
	
	private boolean rincaraVocePercentuale(int idVoceCopia, VoceDiListinoCorriere voce, double rincaro) {
		VoceDiListinoCorrierePercentuale percentuale = voce.getPercentuale();
		ListinoSimulazioneVocePercentuale copia = new ListinoSimulazioneVocePercentuale();
		copia.setId(idVoceCopia);
		copia.setValore(percentuale.getValore() * rincaro);
		copia.setMassimo(percentuale.getValoreMassimo());
		copia.setMinimo(percentuale.getValoreMinimo());
		boolean copiato = managerVociPercentuali.insert(copia);
		if (copiato)
			vociPercentuali.put(idVoceCopia, copia);
		return copiato;
	}

	private boolean rincaraVociScaglioniRipetuti(int idVoceCopia, VoceDiListinoCorriere voce, double rincaro) {
		VoceDiListinoCorriereScaglioniRipetuti voceSR = voce.getRipetuti();
		ListinoSimulazioneVoceScaglioniRipetuti copia = new ListinoSimulazioneVoceScaglioniRipetuti();
		copia.setId(idVoceCopia);
		copia.setValore(voceSR.getValore() * rincaro);
		copia.setIntervallo(voceSR.getIntervallo());
		copia.setMinimo(voceSR.getMinimo());
		copia.setMassimo(voceSR.getMassimo());
		boolean copiato = managerVociScaglioniRipetuti.insert(copia);
		if (copiato)
			vociScaglioniRipetuti.put(idVoceCopia, copia);
		return copiato;
	}

	private boolean rincaraVociScaglioni(int idVoceCopia, VoceDiListinoCorriere voce, double rincaro) {
		List<VoceDiListinoCorriereScaglioni> voci = voce.getScaglioni();
		List<ListinoSimulazioneVoceScaglioni> vociCopiate = new LinkedList<ListinoSimulazioneVoceScaglioni>(); 
		for (VoceDiListinoCorriereScaglioni voceScaglioni : voci) {
			ListinoSimulazioneVoceScaglioni copia = new ListinoSimulazioneVoceScaglioni();
			copia.setId(idVoceCopia);
			copia.setValore(voceScaglioni.getValore() * rincaro);
			copia.setInizio(voceScaglioni.getInizio());
			copia.setFine(voceScaglioni.getFine());
			boolean copiato = managerVociScaglioni.insert(copia);
			if (copiato)
				vociCopiate.add(copia);
		}
		boolean copiato = vociCopiate.size() == voci.size();
		if (copiato)
			vociAScaglioni.put(idVoceCopia, vociCopiate);
		return copiato;
	}

	private boolean rincaraVoceProporzionale(int idVoceCopia, VoceDiListinoCorriere voce, double rincaro) {
		VoceDiListinoCorriereProporzionale proporzionale = voce.getProporzionale();
		ListinoSimulazioneVoceProporzionale copia = new ListinoSimulazioneVoceProporzionale();
		copia.setId(idVoceCopia);
		copia.setMassimo(proporzionale.getMassimo());
		copia.setMinimo(proporzionale.getMinimo());
		copia.setValore(proporzionale.getValore() * rincaro);
		boolean copiato = managerVociProporzionali.insert(copia);
		if (copiato)
			vociProporzionali.put(idVoceCopia, copia);
		return copiato;
	}

	private boolean rincaraVoceFissa(int idVoceCopia, VoceDiListinoCorriere voce, double rincaro) {
		VoceDiListinoCorriereFissa fissa = voce.getFissa();
		ListinoSimulazioneVoceFissa copia = new ListinoSimulazioneVoceFissa();
		copia.setId(idVoceCopia);
		copia.setValore(fissa.getValore() * rincaro);
		boolean copiato = managerVociFisse.insert(copia);
		if (copiato)
			vociFisse.put(idVoceCopia, copia);
		return copiato;
	}
	
	/**
	 * Inner Class dedita al caricamento dei listini.
	 * @author Damiano Bellucci - damiano.bellucci@gmail.com
	 *
	 */
	private class ProcessoCaricamentoListini extends Processo {
		
		private static final String title = "Caricamento Listini";
		
		public ProcessoCaricamentoListini() {
			super(title, -1);
		}

		@Override
		public void eseguiOperazioni() {
			for (ListinoSimulazione listino : getListini()) {
				listini.put(listino.getId(), listino);
				List<ListinoSimulazioneVoce> voci = getVociDiListino(listino);
				mappaListinoEVoci.put(listino.getId(), voci);
				for (ListinoSimulazioneVoce voce : voci) {
					vociDiListino.put(voce.getId(), voce);
					TipoAlgoritmo tipo = TipoAlgoritmo.getTipo(voce.getTipo());
					switch (tipo) {
						case FISSO : caricaVoceFissa(voce); break;
						case PERCENTUALE : caricaVocePercentuale(voce); break;
						case PROPORZIONALE : caricaVoceProporzionale(voce); break;
						case SCAGLIONI : caricaVociScaglioni(voce); break;
						case SCAGLIONI_RIPETUTI : caricaVoceScaglioniRipetuti(voce); break;
						default : break;
					}
				}
			}
		}
		
		private List<ListinoSimulazione> getListini() {
			List<ListinoSimulazione> listini = managerListini.getEntities();
			return listini;
		}
		
		private List<ListinoSimulazioneVoce> getVociDiListino(ListinoSimulazione listino) {
			ListinoSimulazioneVoce filtro = new ListinoSimulazioneVoce();
			filtro.setIdListino(listino.getId());
			List<ListinoSimulazioneVoce> voci = managerVociDiListino.getEntities(filtro);
			return voci;
		}
		
		private void caricaVoceFissa(ListinoSimulazioneVoce voceDiListino) {
			ListinoSimulazioneVoceFissa filtro = new ListinoSimulazioneVoceFissa();
			filtro.setId(voceDiListino.getId());
			ListinoSimulazioneVoceFissa voceCaricata = managerVociFisse.getEntity(filtro);
			vociFisse.put(voceDiListino.getId(), voceCaricata);
		}
		
		private void caricaVocePercentuale(ListinoSimulazioneVoce voceDiListino) {
			ListinoSimulazioneVocePercentuale filtro = new ListinoSimulazioneVocePercentuale();
			filtro.setId(voceDiListino.getId());
			ListinoSimulazioneVocePercentuale voceCaricata = managerVociPercentuali.getEntity(filtro);
			vociPercentuali.put(voceDiListino.getId(), voceCaricata);
		}
		
		private void caricaVoceProporzionale(ListinoSimulazioneVoce voceDiListino) {
			ListinoSimulazioneVoceProporzionale filtro = new ListinoSimulazioneVoceProporzionale();
			filtro.setId(voceDiListino.getId());
			ListinoSimulazioneVoceProporzionale voceCaricata = managerVociProporzionali.getEntity(filtro);
			vociProporzionali.put(voceDiListino.getId(), voceCaricata);
		}
		
		private void caricaVoceScaglioniRipetuti(ListinoSimulazioneVoce voceDiListino) {
			ListinoSimulazioneVoceScaglioniRipetuti filtro = new ListinoSimulazioneVoceScaglioniRipetuti();
			filtro.setId(voceDiListino.getId());
			ListinoSimulazioneVoceScaglioniRipetuti voceCaricata = managerVociScaglioniRipetuti.getEntity(filtro);
			vociScaglioniRipetuti.put(voceDiListino.getId(), voceCaricata);
		}
		
		private void caricaVociScaglioni(ListinoSimulazioneVoce voceDiListino) {
			ListinoSimulazioneVoceScaglioni filtro = new ListinoSimulazioneVoceScaglioni();
			filtro.setId(voceDiListino.getId());
			List<ListinoSimulazioneVoceScaglioni> vociCaricate = managerVociScaglioni.getEntities(filtro);
			vociAScaglioni.put(voceDiListino.getId(), vociCaricate);
		}

	}

	public ListinoSimulazioneVoceFissa getVoceFissa(ListinoSimulazioneVoce voce) {
		return vociFisse.get(voce.getId());
	}

	public ListinoSimulazioneVocePercentuale getVocePercentuale(ListinoSimulazioneVoce voce) {
		return vociPercentuali.get(voce.getId());
	}

	public ListinoSimulazioneVoceProporzionale getVoceProporzionale(ListinoSimulazioneVoce voce) {
		return vociProporzionali.get(voce.getId());
	}

	public List<ListinoSimulazioneVoceScaglioni> getVociScaglioni(ListinoSimulazioneVoce voce) {
		return vociAScaglioni.get(voce.getId());
	}

	public ListinoSimulazioneVoceScaglioniRipetuti getVoceScaglioniRipetuti(ListinoSimulazioneVoce voce) {
		return vociScaglioniRipetuti.get(voce.getId());
	}

	public MDettaglioVoce getDettagliVoce(ListinoSimulazioneVoce voce) {
		MDettaglioVoce dettagli;
		TipoAlgoritmo tipo = TipoAlgoritmo.getTipo(voce.getTipo());
		switch (tipo) {
		case FISSO : {ListinoSimulazioneVoceFissa fissa = vociFisse.get(voce.getId()); dettagli = new MVoceFissa(fissa.getValore());} break;
		case PERCENTUALE : {ListinoSimulazioneVocePercentuale percentuale = vociPercentuali.get(voce.getId()); dettagli = new MVocePercentuale(percentuale.getValore(), percentuale.getMinimo(), percentuale.getMassimo()); } break;
		case PROPORZIONALE : {ListinoSimulazioneVoceProporzionale proporzionale = vociProporzionali.get(voce.getId()); dettagli = new MVoceProporzionale(proporzionale.getValore(), proporzionale.getMinimo(), proporzionale.getMassimo()); } break;
		case SCAGLIONI : {List<ListinoSimulazioneVoceScaglioni> lista = vociAScaglioni.get(voce.getId()); MVoceScaglioni vs = new MVoceScaglioni(); for (ListinoSimulazioneVoceScaglioni v : lista) {Scaglione s = new Scaglione(); s.setValore(v.getValore()); s.setInizio(v.getInizio()); s.setFine(v.getFine()); vs.addScaglione(s);} dettagli = vs;} break;
		case SCAGLIONI_RIPETUTI : {ListinoSimulazioneVoceScaglioniRipetuti sr = vociScaglioniRipetuti.get(voce.getId()); dettagli = new MVoceScaglioniRipetuti(sr.getValore(), sr.getIntervallo(), sr.getMinimo(), sr.getMassimo()); } break;
		default : dettagli = null;
		}
		return dettagli;
	}

	/**
	 * Restituisce lo scopo di calcolo del listino di simulazione: costo o ricavo.
	 * Viene restituito nessuno in caso di anomalie.
	 * @param idListino l'ID del listino di simulazione.
	 * @return un valore della enum Scopo.
	 */
	public Scopo getScopo(Integer idListino) {
		Scopo scopo;
		ListinoSimulazione listino = listini.get(idListino);
		int tipo = listino != null && listino.getTipo() != null ? listino.getTipo() : -1;
		switch (tipo) {
			case AmbitoFattura.ID_SIMULAZIONI_CORRIERI : scopo = Scopo.COSTO; break;
			case AmbitoFattura.ID_SIMULAZIONI_TRASPORTI : scopo = Scopo.RICAVO; break;
			default : scopo = Scopo.NESSUNO; break;
		}
		return scopo;
	}

}
