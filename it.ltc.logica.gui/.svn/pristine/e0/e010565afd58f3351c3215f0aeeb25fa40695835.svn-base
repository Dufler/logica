package it.ltc.logica.gui.elements;

import java.util.List;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.CheckboxTableViewer;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.viewers.ViewerComparator;
import org.eclipse.swt.SWT;
import org.eclipse.swt.dnd.Clipboard;
import org.eclipse.swt.dnd.RTFTransfer;
import org.eclipse.swt.dnd.TextTransfer;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

public abstract class TabellaCheckBox<T> extends CheckboxTableViewer {
	
	public static final int STILE_SEMPLICE = SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI | SWT.CHECK;
	public static final int STILE_SELEZIONE_SINGOLA = SWT.BORDER | SWT.FULL_SELECTION | SWT.SINGLE | SWT.CHECK;
	public static final int STILE_TABELLE_GRANDI = SWT.BORDER | SWT.FULL_SELECTION | SWT.VIRTUAL | SWT.MULTI | SWT.CHECK;
	
	private static final String TAB = "\t";
	private static final String NEW_LINE = "\n"; 

	protected Table table;
	protected Menu menuPopup;
	protected Ordinatore<T> sorter;
	
	public TabellaCheckBox(Composite parent, int style, Ordinatore<T> ordinatore) {
		super(new Table(parent, style));
		table = getTable();
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		menuPopup = new Menu(table);
		table.setMenu(menuPopup);
		setContentProvider(ArrayContentProvider.getInstance());
		aggiungiListenerCopia();
		aggiungiMenuCopia();
		setOrdinamento(ordinatore);
		setFiltro();
		aggiungiListener();
		aggiungiMenu(menuPopup);
	}
	
	public TabellaCheckBox(Composite parent, Ordinatore<T> ordinatore) {
		super(new Table(parent, STILE_SEMPLICE));
		table = getTable();
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		menuPopup = new Menu(table);
		table.setMenu(menuPopup);
		setContentProvider(ArrayContentProvider.getInstance());
		aggiungiListenerCopia();
		aggiungiMenuCopia();
		setOrdinamento(ordinatore);
		setFiltro();
		aggiungiListener();
		aggiungiMenu(menuPopup);
	}

	/**
	 * Nel corpo di questo metodo va implementato l'ordinamento della tabella.
	 * Usualmente viene abbinato al viewer un oggetto <code>ViewerComparator</code>
	 * La classe <code>Ordinatore</code> nello stesso package fornisce un template da poter riciclare.
	 */
	protected void setOrdinamento(Ordinatore<T> ordinatore) {
		sorter = ordinatore;
		if (sorter != null) {
			setComparator(sorter);
		} else {
			setComparator(new ViewerComparator());
		}
	}

	/**
	 * Nel corpo di questo metodo va implementato il filtraggio degli elementi in tabella.
	 * Usualmente viene abbinato al viewer un oggetto <code>ViewerFilter</code>
	 */
	protected abstract void setFiltro();
	
	/**
	 * Aggiunge una colonna alla tabella, vanno specificati il nome, la larghezza di default e il provider del contenuto, se ce l'ha.
	 * @param nome
	 * @param larghezza
	 * @param provider
	 */
	public void aggiungiColonna(String nome, int larghezza, Etichettatore<T> provider, int indiceColonna) {
		
		//Controllo sui parametri
		if (nome == null)
			nome = "";
		if (larghezza < 0)
			larghezza = 0;
		
		TableViewerColumn colonna = new TableViewerColumn(this, SWT.NONE);
		
		TableColumn tblclmn = colonna.getColumn();
		tblclmn.setWidth(larghezza);
		tblclmn.setText(nome);
		
		if (provider == null) {
			colonna.setLabelProvider(new ColumnLabelProvider());
		} else {
			provider.setColumnIndex(indiceColonna);
			colonna.setLabelProvider(provider);
		}
		
		if (sorter != null)
			tblclmn.addSelectionListener(new ListenerColonna<T>(indiceColonna, tblclmn, getTable(), sorter, this));
	}

	/**
	 * Nel corpo di questo metodo vanno aggiunti Listener particolari per raffinare il comportamento della tabella
	 */
	protected abstract void aggiungiListener();
	
	protected abstract void aggiungiMenu(Menu menu);
	
	protected void aggiungiListenerCopia() {
		table.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent e) {
				if(((e.stateMask & SWT.CTRL) == SWT.CTRL) && (e.keyCode == 'c')) {
					CopiaSelezione();
                }
			}
		});
	}

	protected void aggiungiMenuCopia() {
	    MenuItem copy = new MenuItem(menuPopup, SWT.PUSH);
	    copy.setText("Copia");
	    copy.addListener(SWT.Selection, new Listener() {
	    	public void handleEvent(Event event) {
	    		int selectionIndex = table.getSelectionIndex();
	    		if (selectionIndex != -1) {
	    			CopiaSelezione();
	    		}
	    	}
	    });	
	}
	
	private String getSelectedText() {
		StringBuilder textData = new StringBuilder();
		//Aggiungo i nomi delle colonne
		int columns = table.getColumnCount();
		for (int columnIndex = 0; columnIndex < columns; columnIndex++) {
			textData.append(table.getColumn(columnIndex).getText());
			textData.append(TAB);
		}
		textData.setLength(textData.length() - 1);
		textData.append(NEW_LINE);
		//Aggiungo il contenuto selezionato
		for (TableItem item : table.getSelection()) {
			for (int index = 0; index < columns; index++) {
				textData.append(item.getText(index));
				textData.append(TAB);
			}
			textData.setLength(textData.length() - 1);
			textData.append(NEW_LINE);
		}
		textData.setLength(textData.length() - 1);
		return textData.toString();
	}

	protected void CopiaSelezione() {
		String textData = getSelectedText();
		Clipboard clipboard = new Clipboard(Display.getDefault());
		TextTransfer textTransfer = TextTransfer.getInstance();
		Transfer[] transfers = new Transfer[] { textTransfer };
		Object[] data = new Object[] { textData };
		clipboard.setContents(data, transfers);
		clipboard.dispose();
		System.out.println("Testo copiato.");
	}
	
	protected void copiaSelezioneConRichText() {
		String textData = getSelectedText();
		Clipboard clipboard = new Clipboard(Display.getDefault());
		String rtfData = "{\\rtf1\\b\\i " + textData + "}";
		RTFTransfer rtfTransfer = RTFTransfer.getInstance();
		TextTransfer textTransfer = TextTransfer.getInstance();
		Transfer[] transfers = new Transfer[] { textTransfer, rtfTransfer };
		Object[] data = new Object[] { textData, rtfData };
		clipboard.setContents(data, transfers);
		clipboard.dispose();
		System.out.println("Testo ricco copiato.");
	}

//	protected void CopiaSelezione() {
//		String textData = "";
//		int columns = table.getColumnCount();
//		for (TableItem item : table.getSelection()) {
//			for (int index = 0; index < columns; index++)
//				textData +=item.getText(index) + "\t";
//			textData = textData.substring(0, textData.length() - 1);
//			textData += "\n";
//		}
//		textData = textData.substring(0, textData.length() - 1);
//		Clipboard clipboard = new Clipboard(Display.getDefault());
//		//String rtfData = "{\\rtf1\\b\\i " + textData + "}";
//		TextTransfer textTransfer = TextTransfer.getInstance();
//		//RTFTransfer rtfTransfer = RTFTransfer.getInstance();
//		Transfer[] transfers = new Transfer[] { textTransfer };
//		Object[] data = new Object[] { textData };
////		Transfer[] transfers = new Transfer[] { textTransfer, rtfTransfer };
////		Object[] data = new Object[] { textData, rtfData };
//		clipboard.setContents(data, transfers);
//		clipboard.dispose();
//		System.out.println("Testo copiato.");
//	}
	
	public void aggiustaLarghezzaColonne() {
		for (TableColumn column: table.getColumns()) {
			column.pack();
		}
	}
	
	public void setElementi(List<T> items) {
		setInput(items);
		aggiustaLarghezzaColonne();
	}
	
	public void setElementi(T[] items) {
		setInput(items);
		aggiustaLarghezzaColonne();
	}
}
