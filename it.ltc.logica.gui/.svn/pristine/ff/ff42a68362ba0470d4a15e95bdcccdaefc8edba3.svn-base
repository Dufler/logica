package it.ltc.logica.gui.container;

import org.eclipse.jface.dialogs.IDialogConstants;
import org.eclipse.jface.dialogs.ProgressMonitorDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Shell;

/**
 * Questa classe genera una finestra con una progress bar
 * Esempio di utilizzo:
 * 
 * <pre>
 * 		IRunnableWithProgress runnable = new IRunnableWithProgress() {
 *			Override
 *			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
 *				monitor.beginTask("Nome del task", 100);
 *				...
 *				monitor.worked(1);
 *				monitor.done();
 *			}
 *		};
 *
 *		try {
 *			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
 *			dialog.run(true, true, runnable);
 *		} catch (InvocationTargetException | InterruptedException e) {
 *			e.printStackTrace();
 *		}
 * </pre>
 * @author Damiano
 *
 */
public class DialogProgresso extends ProgressMonitorDialog {

	//private static final String DEFAULT_TASKNAME = "Operazione in corso";
	//private static final int LABEL_DLUS = 21;
	//private static final int BAR_DLUS = 9;
	private static final String CANCEL_LABEL = "Annulla";
	
	public static final String TITOLO_DEFAULT = "Operazione in corso";
	
	private final String titolo;
	
	public DialogProgresso(String title) {
		super(null);
		titolo = title;
	}
	
	@Override
    protected void configureShell(Shell newShell) {
		super.configureShell(newShell);
		newShell.setText(titolo);
    }
	
//	@Override
//	protected Control createDialogArea(Composite parent) {
//		setMessage(DEFAULT_TASKNAME, false);
//		createMessageArea(parent);
//		// Only set for backwards compatibility
//		taskLabel = messageLabel;
//		// progress indicator
//		progressIndicator = new ProgressIndicator(parent);
//		GridData gd = new GridData();
//		gd.heightHint = convertVerticalDLUsToPixels(BAR_DLUS);
//		gd.horizontalAlignment = GridData.FILL;
//		gd.grabExcessHorizontalSpace = true;
//		gd.horizontalSpan = 2;
//		progressIndicator.setLayoutData(gd);
//		// label showing current task
//		subTaskLabel = new Label(parent, SWT.LEFT | SWT.WRAP);
//		gd = new GridData(GridData.FILL_HORIZONTAL);
//		gd.heightHint = convertVerticalDLUsToPixels(LABEL_DLUS);
//		gd.horizontalSpan = 2;
//		subTaskLabel.setLayoutData(gd);
//		subTaskLabel.setFont(parent.getFont());
//		return parent;
//	}
//	
//	private void setMessage(String messageString, boolean force) {
//		// must not set null text in a label
//		message = messageString == null ? "" : messageString; //$NON-NLS-1$
//		if (messageLabel == null || messageLabel.isDisposed()) {
//			return;
//		}
//		if (force || messageLabel.isVisible()) {
//			messageLabel.setToolTipText(message);
//			messageLabel.setText(shortenText(message, messageLabel));
//		}
//	}
	
	protected void createCancelButton(Composite parent) {
		cancel = createButton(parent, IDialogConstants.CANCEL_ID, CANCEL_LABEL, true);
		if (arrowCursor == null) {
			arrowCursor = new Cursor(cancel.getDisplay(), SWT.CURSOR_ARROW);
		}
		cancel.setCursor(arrowCursor);
		setOperationCancelButtonEnabled(enableCancelButton);
	}

}
