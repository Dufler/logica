 
package it.ltc.logica.trasporti.gui.spedizioni.parts;

import java.util.Date;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.e4.ui.di.UISynchronize;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyAdapter;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.Text;

import it.ltc.logica.common.controller.ControllerCommesse;
import it.ltc.logica.common.controller.trasporti.ControllerCorrieri;
import it.ltc.logica.common.controller.trasporti.ControllerSpedizioni;
import it.ltc.logica.container.controller.ControllerUtente;
import it.ltc.logica.container.controller.Permessi;
import it.ltc.logica.database.model.centrale.Commessa;
import it.ltc.logica.database.model.centrale.trasporti.Corriere;
import it.ltc.logica.gui.input.ComboBox;
import it.ltc.logica.gui.input.DateField;
import it.ltc.logica.gui.task.DialogProgresso;
import it.ltc.logica.gui.task.ProcessoUI;
import it.ltc.logica.gui.wizard.DialogWizard;
import it.ltc.logica.trasporti.gui.elements.spedizione.TabellaSpedizioni;
import it.ltc.logica.trasporti.gui.spedizioni.wizard.NuovaSpedizioneWizard;

public class SpedizioniPart {
	
	public static final String partID = "it.ltc.logica.trasporti.gui.spedizioni.part.spedizioni";
	
	@Inject
	private UISynchronize sync;
	
	//private SpedizioniController controllerSpedizioni;
	private final ControllerSpedizioni controllerSpedizioni;
	
	private TabellaSpedizioni tableViewer;
	private Table table;
	
	private DateField dataDa;
	private DateField dataA;
	private ComboBox<Corriere> comboCorriere;
	private ComboBox<Commessa> comboCommessa;
	private Button btnContrassegnoSi;
	private Button btnContrassegnoNo;
	private Button btnContrassegnoIndifferente;
	private Button btnDatiSi;
	private Button btnDatiNo;
	private Button btnDatiIndifferente;
	private Button btnDataIndifferente;
	private Text textRiferimento;
	
	@Inject
	public SpedizioniPart() {
		//controllerSpedizioni = SpedizioniController.getInstance();
		controllerSpedizioni = ControllerSpedizioni.getInstance();
	}
	
	@PostConstruct
	public void postConstruct(Composite parent) {
		parent.setLayout(new GridLayout(1, false));
		
		Label lblGestioneSpedizioni = new Label(parent, SWT.NONE);
		lblGestioneSpedizioni.setText("Gestione Spedizioni");
		
		Composite compositeGestione = new Composite(parent, SWT.NONE);
		compositeGestione.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeGestione.setLayout(new GridLayout(2, false));
		
		boolean permesso = ControllerUtente.getInstance().isAllowed(Permessi.SPEDIZIONI_INSERISCI.getID());
		
		Button btnNuovaSpedizione = new Button(compositeGestione, SWT.NONE);
		btnNuovaSpedizione.setSize(107, 25);
		btnNuovaSpedizione.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				DialogWizard wizard = new DialogWizard(new NuovaSpedizioneWizard(), DialogWizard.WIZARD_SPEDIZIONE);
				int esito = wizard.open();
				if (esito == WizardDialog.OK) {
					mostraSpedizioni();
				}
			}
		});
		btnNuovaSpedizione.setText("Nuova Spedizione");
		btnNuovaSpedizione.setEnabled(permesso);
		
		Button btnRicaricaSpedizioni = new Button(compositeGestione, SWT.NONE);
		btnRicaricaSpedizioni.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ricaricaSpedizioni();
			}
		});
		btnRicaricaSpedizioni.setText("Ricarica Spedizioni");
		
		Label lblFiltri = new Label(parent, SWT.NONE);
		lblFiltri.setText("Ricerca Spedizioni");
		
		Composite compositeFiltro = new Composite(parent, SWT.NONE);
		compositeFiltro.setLayout(new GridLayout(2, false));
		compositeFiltro.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		
		Label lblData = new Label(compositeFiltro, SWT.NONE);
		lblData.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblData.setText("Data: ");
		
		Composite compositeData = new Composite(compositeFiltro, SWT.NONE);
		compositeData.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		compositeData.setLayout(new GridLayout(5, false));
		
		btnDataIndifferente = new Button(compositeData, SWT.CHECK);
		btnDataIndifferente.setBounds(0, 0, 93, 16);
		btnDataIndifferente.setText("Indifferente");
		btnDataIndifferente.setSelection(true);
		
		Label lblDa = new Label(compositeData, SWT.NONE);
		lblDa.setText("Da:");
		
		dataDa = new DateField(compositeData);
		dataDa.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				btnDataIndifferente.setSelection(false);
			}
		});
		
		Label lblA = new Label(compositeData, SWT.NONE);
		lblA.setText("A:");
		
		dataA = new DateField(compositeData);
		dataA.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				btnDataIndifferente.setSelection(false);
			}
		});
		
		Label lblCliente = new Label(compositeFiltro, SWT.NONE);
		lblCliente.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblCliente.setText("Cliente: ");
		
		comboCommessa = new ComboBox<Commessa>(compositeFiltro);
		comboCommessa.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboCommessa.setItems(ControllerCommesse.getInstance().getCommesse());
		
		Label lblCorriere = new Label(compositeFiltro, SWT.NONE);
		lblCorriere.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblCorriere.setText("Corriere: ");
		
		comboCorriere = new ComboBox<Corriere>(compositeFiltro);
		comboCorriere.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		comboCorriere.setItems(ControllerCorrieri.getInstance().getCorrieri());
		
		Label lblContrassegno = new Label(compositeFiltro, SWT.NONE);
		lblContrassegno.setText("Contrassegno: ");
		
		Composite compositeContrassegno = new Composite(compositeFiltro, SWT.NONE);
		compositeContrassegno.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeContrassegno.setLayout(new GridLayout(3, false));
		
		btnContrassegnoSi = new Button(compositeContrassegno, SWT.RADIO);
		btnContrassegnoSi.setBounds(0, 0, 90, 16);
		btnContrassegnoSi.setText("Si");
		btnContrassegnoSi.setSelection(false);
		
		btnContrassegnoNo = new Button(compositeContrassegno, SWT.RADIO);
		btnContrassegnoNo.setBounds(0, 0, 90, 16);
		btnContrassegnoNo.setText("No");
		btnContrassegnoNo.setSelection(false);
		
		btnContrassegnoIndifferente = new Button(compositeContrassegno, SWT.RADIO);
		btnContrassegnoIndifferente.setBounds(0, 0, 90, 16);
		btnContrassegnoIndifferente.setText("Indifferente");
		btnContrassegnoIndifferente.setSelection(true);
		
		Label lblDatiCompleti = new Label(compositeFiltro, SWT.NONE);
		lblDatiCompleti.setText("Dati Completi: ");
		
		Composite compositeDatiCompleti = new Composite(compositeFiltro, SWT.NONE);
		compositeDatiCompleti.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeDatiCompleti.setLayout(new GridLayout(3, false));
		
		btnDatiSi = new Button(compositeDatiCompleti, SWT.RADIO);
		btnDatiSi.setBounds(0, 0, 90, 16);
		btnDatiSi.setText("Si");
		btnDatiSi.setSelection(false);
		
		btnDatiNo = new Button(compositeDatiCompleti, SWT.RADIO);
		btnDatiNo.setBounds(0, 0, 90, 16);
		btnDatiNo.setText("No");
		btnDatiNo.setSelection(false);
		
		btnDatiIndifferente = new Button(compositeDatiCompleti, SWT.RADIO);
		btnDatiIndifferente.setBounds(0, 0, 90, 16);
		btnDatiIndifferente.setText("Indifferente");
		btnDatiIndifferente.setSelection(true);
		
		Label lblRiferimento = new Label(compositeFiltro, SWT.NONE);
		lblRiferimento.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		lblRiferimento.setText("Ricerca testo: ");
		
		textRiferimento = new Text(compositeFiltro, SWT.BORDER);
		textRiferimento.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				if (e.character == SWT.CR || e.character == SWT.LF) {
					filtraSpedizioni();
				}
			}
		});
		textRiferimento.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		textRiferimento.setMessage("DDT, Ordine cliente, Lettera di vettura, Destinatario ...");
		
		new Label(compositeFiltro, SWT.NONE);
		
		Composite compositeControlli = new Composite(compositeFiltro, SWT.NONE);
		compositeControlli.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeControlli.setLayout(new GridLayout(2, false));
		
		Button btnFiltra = new Button(compositeControlli, SWT.NONE);
		btnFiltra.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				filtraSpedizioni();
			}
		});
		btnFiltra.setText("Filtra");
		
		Button btnAnnullaFiltro = new Button(compositeControlli, SWT.NONE);
		btnAnnullaFiltro.setSize(83, 25);
		btnAnnullaFiltro.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				annullaFiltro();
			}
		});
		btnAnnullaFiltro.setText("Annulla Filtro");
		
		tableViewer = new TabellaSpedizioni(parent, TabellaSpedizioni.TIPO_COMPLETO);
		table = tableViewer.getTable();
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		mostraSpedizioni();
	}
	
	private void mostraSpedizioni() {
		ProcessoMostraSpedizioni pms = new ProcessoMostraSpedizioni();
		DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
		dialog.esegui(pms);
	}
	
	private class ProcessoMostraSpedizioni extends ProcessoUI {
		
		private static final String title = "Caricamento Spedizioni";

		public ProcessoMostraSpedizioni() {
			super(title, -1, true, sync);
		}

		@Override
		public void eseguiOperazioniSincronizzate() {
			tableViewer.mostraSpedizioni(controllerSpedizioni.getSpedizioni());			
		}
		
	}
	
	private void filtraSpedizioni() {
		ProcessoFiltraSpedizione pfs = new ProcessoFiltraSpedizione();
		DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
		dialog.esegui(pfs);
	}
	
	private class ProcessoFiltraSpedizione extends ProcessoUI {
		
		private static final String title = "Filtraggio Spedizioni";

		public ProcessoFiltraSpedizione() {
			super(title, -1, true, sync);
		}

		@Override
		public void eseguiOperazioniSincronizzate() {
			Date da = null;
			Date a = null;
			if (!btnDataIndifferente.getSelection()) {
				da = dataDa.getSimpleStartValue();
				a = dataA.getSimpleEndValue();
			}
			Integer idCorriere = null;
			Corriere corriere = comboCorriere.getSelectedValue();
			if (corriere != null) {
				idCorriere = corriere.getId();
			}
			Integer idCommessa = null;
			Commessa commessa = comboCommessa.getSelectedValue();
			if (commessa != null) {
				idCommessa = commessa.getId();
			}
			Boolean contrassegno;
			if (btnContrassegnoSi.getSelection()) {
				contrassegno = true;
			} else if (btnContrassegnoNo.getSelection()) {
				contrassegno = false;
			} else {
				contrassegno = null;
			}
			Boolean datiCompleti;
			if (btnDatiSi.getSelection()) {
				datiCompleti = true;
			} else if (btnDatiNo.getSelection()) {
				datiCompleti = false;
			} else {
				datiCompleti = null;
			}
			String riferimento = null;
			if (!textRiferimento.getText().isEmpty())
				riferimento = textRiferimento.getText();
			tableViewer.filtra(da, a, idCommessa, idCorriere, contrassegno, datiCompleti, riferimento);			
		}
		
	}
	
	private void annullaFiltro() {
		ProcessoAnnullaFiltro paf = new ProcessoAnnullaFiltro();
		DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
		dialog.esegui(paf);
	}
	
	private class ProcessoAnnullaFiltro extends ProcessoUI {
		
		private static final String title = "Filtraggio Spedizioni";

		public ProcessoAnnullaFiltro() {
			super(title, -1, true, sync);
		}

		@Override
		public void eseguiOperazioniSincronizzate() {
			btnDataIndifferente.setSelection(true);
			comboCorriere.setSelectedValue(null);
			comboCommessa.setSelectedValue(null);
			btnContrassegnoSi.setSelection(false);
			btnContrassegnoNo.setSelection(false);
			btnContrassegnoIndifferente.setSelection(true);
			textRiferimento.setText("");
			tableViewer.annullaFiltro();		
		}
		
	}
	
	private void ricaricaSpedizioni() {
		ProcessoRicaricaSpedizioni prs = new ProcessoRicaricaSpedizioni();
		DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
		dialog.esegui(prs);
	}
	
	private class ProcessoRicaricaSpedizioni extends ProcessoUI {
		
		private static final String title = "Ricaricamento Spedizioni";

		public ProcessoRicaricaSpedizioni() {
			super(title, -1, true, sync);
		}

		@Override
		public void eseguiOperazioniSincronizzate() {
			tableViewer.annullaFiltro();
			controllerSpedizioni.caricaDati();
			tableViewer.mostraSpedizioni(controllerSpedizioni.getSpedizioni());
		}
		
	}
	
}