 
package it.ltc.logica.amministrazione.gui.listini.parts;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import it.ltc.logica.amministrazione.gui.listini.elements.TabellaListiniClienti;
import it.ltc.logica.amministrazione.gui.listini.elements.TabellaVociListinoClienti;
import it.ltc.logica.amministrazione.gui.listini.wizards.NuovaVoceListinoCommessaWizard;
import it.ltc.logica.amministrazione.gui.listini.wizards.NuovoListinoCommessaWizard;
import it.ltc.logica.common.controller.listini.ControllerListiniClienti;
import it.ltc.logica.container.controller.ControllerUtente;
import it.ltc.logica.container.controller.Permessi;
import it.ltc.logica.database.model.centrale.listini.ListinoCommessa;
import it.ltc.logica.database.model.centrale.listini.VoceDiListino;
import it.ltc.logica.gui.wizard.DialogWizard;

public class ListiniPart {
	
	public static final String partID = "it.ltc.logica.amministrazione.gui.listini.part.listini";
	
	private final ControllerListiniClienti controller;
	
	private Text textFiltroListini;
	private Text textFiltraVoci;
	
	private Button btnNuovaVoce;
	private Button btnEliminaListino;
	private Button btnEliminaVoce;
	
	private TabellaListiniClienti viewerListini;
	private Table tableListini;
	
	private TabellaVociListinoClienti viewerVociDiListino;
	private Table tableVociDiListino;

	private Composite compositeListini;
	private Composite compositeVoci;
	
	private final boolean permessoInserimento;
	private final boolean permessoInserimentoFatturazione;
	private final boolean permessoInserimentoSimulazione;
	private final boolean permessoEliminaFatturazione;
	private final boolean permessoModificaFatturazione;	
	
	@Inject
	public ListiniPart() {
		controller = ControllerListiniClienti.getInstance();
		permessoInserimentoFatturazione = ControllerUtente.getInstance().isAllowed(Permessi.LISTINI_CLIENTI_FATTURAZIONE_INSERISCI.getID());
		permessoInserimentoSimulazione = ControllerUtente.getInstance().isAllowed(Permessi.LISTINI_CLIENTI_SIMULAZIONE_INSERISCI.getID());
		permessoInserimento = permessoInserimentoFatturazione || permessoInserimentoSimulazione;
		permessoEliminaFatturazione = ControllerUtente.getInstance().isAllowed(Permessi.LISTINI_CLIENTI_FATTURAZIONE_ELIMINA.getID());
		permessoModificaFatturazione = ControllerUtente.getInstance().isAllowed(Permessi.LISTINI_CLIENTI_FATTURAZIONE_MODIFICA.getID());
	}
	
	@PostConstruct
	public void postConstruct(Composite parent) {
		parent.setLayout(new GridLayout(1, false));
		
		Composite compositeClienti = new Composite(parent, SWT.NONE);
		compositeClienti.setLayout(new FillLayout(SWT.VERTICAL));
		compositeClienti.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		compositeListini = new Composite(compositeClienti, SWT.NONE);
		compositeListini.setLayout(new GridLayout(1, false));
		
		Composite compositeControlliListini = new Composite(compositeListini, SWT.NONE);
		compositeControlliListini.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		compositeControlliListini.setLayout(new GridLayout(5, false));
		
		textFiltroListini = new Text(compositeControlliListini, SWT.SEARCH | SWT.CANCEL | SWT.ICON_SEARCH);
		textFiltroListini.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		textFiltroListini.setSize(100, 21);
		textFiltroListini.setMessage("Filtra...");
		textFiltroListini.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				String filtroListini = textFiltroListini.getText().toUpperCase();
				viewerListini.setFiltro(filtroListini);
				viewerListini.refresh();
			}
		});
		
		btnEliminaListino = new Button(compositeControlliListini, SWT.NONE);
		btnEliminaListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				eliminaListino();
				tableListini.setFocus();
			}
		});
		btnEliminaListino.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1));
		btnEliminaListino.setText("Elimina Listino");
		btnEliminaListino.setEnabled(false);		
		
		Button btnNuovoListino = new Button(compositeControlliListini, SWT.NONE);
		btnNuovoListino.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		btnNuovoListino.setSize(86, 25);
		btnNuovoListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				DialogWizard wizard = new DialogWizard(new NuovoListinoCommessaWizard(), DialogWizard.WIZARD_LISTINO);
				int esito = wizard.open();
				if (esito == WizardDialog.OK) {
					aggiornaListini();
				}
			}
		});
		btnNuovoListino.setText("Nuovo Listino");
		btnNuovoListino.setEnabled(permessoInserimento);
		
		textFiltroListini.setSize(80, 21);
		
		viewerListini = new TabellaListiniClienti(compositeListini);
		
		tableListini = viewerListini.getTable();
		tableListini.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));	
		tableListini.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ListinoCommessa listinoSelezionato = getListinoSelezionato();
				boolean isSelezionato = listinoSelezionato != null;
				boolean inserimentoVoce = isSelezionato;
				boolean eliminaListino = isSelezionato;
				if (isSelezionato) {
					aggiornaVociDiListino(listinoSelezionato);
					inserimentoVoce = permessoInserimentoFatturazione;
					eliminaListino = permessoEliminaFatturazione;
				}
				btnNuovaVoce.setEnabled(inserimentoVoce);
				btnEliminaListino.setEnabled(eliminaListino);
			}
		});

		aggiornaListini();
		
		compositeVoci = new Composite(compositeClienti, SWT.NONE);
		compositeVoci.setLayout(new GridLayout(1, false));
		
		Composite compositeControlliVoci = new Composite(compositeVoci, SWT.NONE);
		compositeControlliVoci.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeControlliVoci.setLayout(new GridLayout(3, false));
		
		textFiltraVoci = new Text(compositeControlliVoci, SWT.SEARCH | SWT.CANCEL | SWT.ICON_SEARCH);
		textFiltraVoci.setToolTipText("Filtra le voci di listino.");
		textFiltraVoci.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		textFiltraVoci.setMessage("Filtra...");
		textFiltraVoci.setSize(100, 21);
		textFiltraVoci.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				String filtroVociDiListino = textFiltraVoci.getText().toUpperCase();
				viewerVociDiListino.setFiltro(filtroVociDiListino);
				viewerVociDiListino.refresh();
			}
		});
		
		btnEliminaVoce = new Button(compositeControlliVoci, SWT.NONE);
		btnEliminaVoce.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				eliminaVoceDiListino();
				tableVociDiListino.setFocus();
			}
		});
		btnEliminaVoce.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1));
		btnEliminaVoce.setText("Elimina Voce");
		btnEliminaVoce.setEnabled(false);
		
		btnNuovaVoce = new Button(compositeControlliVoci, SWT.NONE);
		btnNuovaVoce.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		btnNuovaVoce.setSize(86, 25);
		btnNuovaVoce.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ListinoCommessa listinoSelezionato = getListinoSelezionato();
				DialogWizard wizard = new DialogWizard(new NuovaVoceListinoCommessaWizard(listinoSelezionato), DialogWizard.WIZARD_LISTINO);
				int esito = wizard.open();
				if (esito == WizardDialog.OK) {
					aggiornaVociDiListino(listinoSelezionato);
				}
			}
		});
		btnNuovaVoce.setText("Nuova Voce");
		btnNuovaVoce.setEnabled(false);
		
		viewerVociDiListino = new TabellaVociListinoClienti(compositeVoci);
		
		tableVociDiListino = viewerVociDiListino.getTable();
		tableVociDiListino.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableVociDiListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ListinoCommessa listino = getListinoSelezionato();
				VoceDiListino voce = getVoceDiListinoSelezionata();
				boolean isSelezionato = voce != null  && listino != null;
				if (isSelezionato) {
					isSelezionato = permessoEliminaFatturazione;
				}
				btnEliminaVoce.setEnabled(isSelezionato);
			}
		});
		
	}
	
	private void mostraMessaggioErrore(String titolo, String messaggio) {
		Display display = Display.getCurrent();
		Shell messageShell = display.getActiveShell();
		MessageDialog.openError(messageShell, titolo, messaggio);
	}
	
	private boolean mostraMessaggioConferma(String titolo, String messaggio) {
		Display display = Display.getCurrent();
		Shell messageShell = display.getActiveShell();
		boolean scelta = MessageDialog.openConfirm(messageShell, titolo, messaggio);
		return scelta;
	}
	
	private void aggiornaListini() {
		List<ListinoCommessa> listini = controller.getListiniClientiPerLogisitica();
		viewerListini.setInput(listini);
		for (TableColumn tc : tableListini.getColumns()) {
			tc.pack();
		}
	}
	
	private void aggiornaVociDiListino(ListinoCommessa listino) {
		List<VoceDiListino> vociDiListino = controller.getVociDiListino(listino.getId());
		boolean permesso = permessoModificaFatturazione;
		viewerVociDiListino.setPermessoModifica(permesso);
		viewerVociDiListino.setInput(vociDiListino);
		for (TableColumn tc : tableVociDiListino.getColumns()) {
			tc.pack();
		}
		btnEliminaVoce.setEnabled(false);
	}
	
	private void ripulisciVociDiListino() {
		List<VoceDiListino> listaVuota = new ArrayList<VoceDiListino>();
		viewerVociDiListino.setInput(listaVuota);
	}
	
	private ListinoCommessa getListinoSelezionato() {
		ListinoCommessa listinoSelezionato = null;
		int selectedIndex = tableListini.getSelectionIndex();
		if (selectedIndex != -1) {
			TableItem selectedItem = tableListini.getItem(selectedIndex);
			listinoSelezionato = (ListinoCommessa) selectedItem.getData();
		}
		return listinoSelezionato;
	}
	
	private VoceDiListino getVoceDiListinoSelezionata() {
		VoceDiListino voceSelezionata = null;
		int selectedIndex = tableVociDiListino.getSelectionIndex();
		if (selectedIndex != -1) {
			TableItem selectedItem = tableVociDiListino.getItem(selectedIndex);
			voceSelezionata = (VoceDiListino) selectedItem.getData();
		}
		return voceSelezionata;
	}
	
	private void eliminaListino() {
		boolean scelta = mostraMessaggioConferma("Conferma eliminazione", "Sei sicuro di voler eliminare il listino selezionato?");
		if (scelta) {
			ListinoCommessa listino = getListinoSelezionato();
			if (listino != null) {
				boolean eliminazione = controller.eliminaListino(listino);
				if (eliminazione) {
					btnEliminaListino.setEnabled(false);
					aggiornaListini();
					ripulisciVociDiListino();
				} else {
					mostraMessaggioErrore("Eliminazione fallita", "Impossibile eliminare il listino selezionato.");
				}
			}
		}
	}
	
	private void eliminaVoceDiListino() {
		boolean scelta = mostraMessaggioConferma("Conferma eliminazione", "Sei sicuro di voler eliminare la voce selezionata?");
		if (scelta) {
			ListinoCommessa listinoSelezionato = getListinoSelezionato();
			VoceDiListino voceSelezionata = getVoceDiListinoSelezionata();
			if (listinoSelezionato != null && voceSelezionata != null) {
				boolean eliminazione = controller.eliminaVoce(voceSelezionata);
				if (eliminazione) {
					btnEliminaVoce.setEnabled(false);
					aggiornaVociDiListino(listinoSelezionato);
				} else {
					mostraMessaggioErrore("Eliminazione fallita", "Impossibile eliminare la voce di listino selezionata.");
				}
			}
		}
	}
	
	
}