 
package it.ltc.logica.trasporti.gui.listini.parts;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.ViewerFilter;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

import it.ltc.logica.database.model.centrale.AmbitoDiTrasporto;
import it.ltc.logica.database.model.centrale.ListinoCorriere;
import it.ltc.logica.database.model.centrale.TipoListino;
import it.ltc.logica.database.model.centrale.VoceDiListinoCorriere;
import it.ltc.logica.gui.container.DialogWizard;
import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoFisso;
import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoPercentuale;
import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoProporzionale;
import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoScaglioni;
import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoScaglioniRipetuti;
import it.ltc.logica.trasporti.controller.ListiniCorrieriController;
import it.ltc.logica.trasporti.gui.listini.dialogs.corriere.ProprietaListinoCorriere;
import it.ltc.logica.trasporti.gui.listini.dialogs.corriere.ProprietaVoceListinoCorriereFissa;
import it.ltc.logica.trasporti.gui.listini.dialogs.corriere.ProprietaVoceListinoCorrierePercentuale;
import it.ltc.logica.trasporti.gui.listini.dialogs.corriere.ProprietaVoceListinoCorriereProporzionale;
import it.ltc.logica.trasporti.gui.listini.dialogs.corriere.ProprietaVoceListinoCorriereScaglioni;
import it.ltc.logica.trasporti.gui.listini.dialogs.corriere.ProprietaVoceListinoCorriereScaglioniRipetuti;
import it.ltc.logica.trasporti.gui.listini.wizards.corriere.NuovaVoceListinoCorriereWizard;
import it.ltc.logica.trasporti.gui.listini.wizards.corriere.NuovoListinoCorriereWizard;

public class ListiniCorrieriPart {
	
	public static final String partID = "it.ltc.logica.trasporti.gui.listini.part.listinicorrieri";
	
	private ListiniCorrieriController controller;
	
	private Text textFiltroCorrieri;
	private Text textFiltraVoci;
	private Button btnNuovaVoce;
	private Button btnEliminaListino;
	private Button btnEliminaVoce;
	
	private TableViewer viewerListini;
	private Table tableListini;
	private TableViewerColumn columnNomeListino;
	private TableViewerColumn columnDescrizioneListino;
	private TableViewerColumn columnTipoListino;
	private TableColumn tblclmnTipoListino;
	
	private Table tableVociDiListino;
	private TableViewer viewerVociDiListino;
	private TableColumn tblclmnVoce;
	private TableViewerColumn tableViewerColumnVoce;
	private TableColumn tblclmnDescrizione;
	private TableViewerColumn tableViewerColumnVoceDescrizione;
	
	private String filtroListini;
	private String filtroVociDiListino;
	private TableColumn tblclmnAmbito;
	private TableViewerColumn tableViewerColumnAmbito;
	private Composite compositeListini;
	private Composite compositeVoci;
	private Button btnCopiaListino;
	
	@Inject
	public ListiniCorrieriPart() {
		controller = ListiniCorrieriController.getInstance();
	}
	
	@PostConstruct
	public void postConstruct(Composite parent) {
		parent.setLayout(new GridLayout(1, false));
		
		Composite compositeCorrieri = new Composite(parent, SWT.NONE);
		compositeCorrieri.setLayout(new FillLayout(SWT.VERTICAL));
		compositeCorrieri.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		compositeListini = new Composite(compositeCorrieri, SWT.NONE);
		compositeListini.setLayout(new GridLayout(1, false));
		
		Composite compositeControlliListini = new Composite(compositeListini, SWT.NONE);
		compositeControlliListini.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
		compositeControlliListini.setLayout(new GridLayout(4, false));
		
		textFiltroCorrieri = new Text(compositeControlliListini, SWT.SEARCH | SWT.CANCEL | SWT.ICON_SEARCH);
		textFiltroCorrieri.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		textFiltroCorrieri.setSize(80, 21);
		textFiltroCorrieri.setMessage("Filtra...");
		textFiltroCorrieri.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				filtroListini = textFiltroCorrieri.getText().toUpperCase();
				viewerListini.refresh();
			}
		});
		
		btnEliminaListino = new Button(compositeControlliListini, SWT.NONE);
		btnEliminaListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				eliminaListino();
				tableListini.setFocus();
			}
		});
		btnEliminaListino.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1));
		btnEliminaListino.setText("Elimina Listino");
		btnEliminaListino.setEnabled(false);
		
		btnCopiaListino = new Button(compositeControlliListini, SWT.NONE);
		btnCopiaListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				copiaListino();
			}
		});
		btnCopiaListino.setText("Copia Listino");
		btnCopiaListino.setEnabled(false);
		
		Button btnNuovoListino = new Button(compositeControlliListini, SWT.NONE);
		btnNuovoListino.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		btnNuovoListino.setSize(86, 25);
		btnNuovoListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				DialogWizard wizard = new DialogWizard(new NuovoListinoCorriereWizard(), DialogWizard.WIZARD_LISTINO);
				int esito = wizard.open();
				if (esito == WizardDialog.OK) {
					aggiornaListini();
				}
			}
		});
		btnNuovoListino.setText("Nuovo Listino");
		textFiltroCorrieri.setSize(80, 21);
		
		viewerListini = new TableViewer(compositeListini, SWT.BORDER | SWT.FULL_SELECTION);
		viewerListini.addFilter(new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement, Object element) {
				boolean toShow = true;
				ListinoCorriere listino = (ListinoCorriere) element;
				String nome = listino.getNome().toUpperCase();
				if (filtroListini != null)
					toShow = nome.contains(filtroListini);
				return toShow;
			}
		});
		columnNomeListino = new TableViewerColumn(viewerListini, SWT.NONE);
		columnNomeListino.getColumn().setWidth(200);
		columnNomeListino.getColumn().setText("Nome");
		columnNomeListino.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				ListinoCorriere listino = (ListinoCorriere) element;
				String nome = listino.getNome();
				return nome;
			}
		});
		
		columnTipoListino = new TableViewerColumn(viewerListini, SWT.NONE);
		columnTipoListino.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				ListinoCorriere listino = (ListinoCorriere) element;
				TipoListino tipo = TipoListino.getTipo(listino.getTipo());
				String testo = (tipo != null) ? tipo.toString() : "";
				return testo;
			}
		});
		
		tblclmnTipoListino = columnTipoListino.getColumn();
		tblclmnTipoListino.setWidth(100);
		tblclmnTipoListino.setText("Tipo");
		
		
		columnDescrizioneListino = new TableViewerColumn(viewerListini, SWT.NONE);
		columnDescrizioneListino.getColumn().setWidth(400);
		columnDescrizioneListino.getColumn().setText("Descrizione");
		columnDescrizioneListino.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				ListinoCorriere listino = (ListinoCorriere) element;
				String corriere = listino.getDescrizione();
				return corriere;
			}
		});
		tableListini = viewerListini.getTable();
		tableListini.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableListini.setSize(428, 81);
		tableListini.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				ListinoCorriere corriereSelezionato = getListinoSelezionato();
				if (corriereSelezionato != null) {
					ProprietaListinoCorriere proprieta = ProprietaListinoCorriere.getInstance(corriereSelezionato);
					int esito = proprieta.open();
					if (esito == Dialog.OK) {
						viewerListini.refresh();
					}
				}
			}
		});
		tableListini.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ListinoCorriere listinoSelezionato = getListinoSelezionato();
				boolean isSelezionato = listinoSelezionato != null;
				btnNuovaVoce.setEnabled(isSelezionato);
				btnEliminaListino.setEnabled(isSelezionato);
				btnCopiaListino.setEnabled(isSelezionato);
				if (isSelezionato)
					aggiornaVociDiListino(listinoSelezionato);
			}
		});
		tableListini.setHeaderVisible(true);
		tableListini.setLinesVisible(true);
		viewerListini.setContentProvider(ArrayContentProvider.getInstance());
		aggiornaListini();
		
		compositeVoci = new Composite(compositeCorrieri, SWT.NONE);
		compositeVoci.setLayout(new GridLayout(1, false));
		
		Composite compositeControlliVoci = new Composite(compositeVoci, SWT.NONE);
		compositeControlliVoci.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
		compositeControlliVoci.setLayout(new GridLayout(3, false));
		
		textFiltraVoci = new Text(compositeControlliVoci, SWT.SEARCH | SWT.CANCEL | SWT.ICON_SEARCH);
		textFiltraVoci.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, false, false, 1, 1));
		textFiltraVoci.setToolTipText("Filtra le voci di listino.");
		textFiltraVoci.setMessage("Filtra...");
		textFiltraVoci.addModifyListener(new ModifyListener() {
			public void modifyText(ModifyEvent e) {
				filtroVociDiListino = textFiltraVoci.getText().toUpperCase();
				viewerVociDiListino.refresh();
			}
		});
		
		btnEliminaVoce = new Button(compositeControlliVoci, SWT.NONE);
		btnEliminaVoce.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, true, false, 1, 1));
		btnEliminaVoce.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				eliminaVoceDiListino();
				tableVociDiListino.setFocus();
			}
		});
		btnEliminaVoce.setText("Elimina Voce");
		btnEliminaVoce.setEnabled(false);
		
		btnNuovaVoce = new Button(compositeControlliVoci, SWT.NONE);
		btnNuovaVoce.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false, 1, 1));
		btnNuovaVoce.setSize(86, 25);
		btnNuovaVoce.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ListinoCorriere listinoSelezionato = getListinoSelezionato();
				DialogWizard wizard = new DialogWizard(new NuovaVoceListinoCorriereWizard(listinoSelezionato), DialogWizard.WIZARD_LISTINO);
				int esito = wizard.open();
				if (esito == WizardDialog.OK) {
					aggiornaVociDiListino(listinoSelezionato);
				}
			}
		});
		btnNuovaVoce.setText("Nuova Voce");
		btnNuovaVoce.setEnabled(false);
		
		viewerVociDiListino = new TableViewer(compositeVoci, SWT.BORDER | SWT.FULL_SELECTION);
		viewerVociDiListino.setContentProvider(new ArrayContentProvider());
		viewerVociDiListino.addFilter(new ViewerFilter() {
			public boolean select(Viewer viewer, Object parentElement, Object element) {
				boolean toShow = true;
				VoceDiListinoCorriere listino = (VoceDiListinoCorriere) element;
				String nome = listino.getNome().toUpperCase();
				if (filtroVociDiListino != null)
					toShow = nome.contains(filtroVociDiListino);
				return toShow;
			}
		});
		
		tableVociDiListino = viewerVociDiListino.getTable();
		tableVociDiListino.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableVociDiListino.setSize(428, 87);
		tableVociDiListino.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseDoubleClick(MouseEvent e) {
				ListinoCorriere listinoSelezionato = getListinoSelezionato();
				VoceDiListinoCorriere voceSelezionata = getVoceDiListinoSelezionata();
				if (listinoSelezionato != null && voceSelezionata != null) {
					apriModificaVoce(listinoSelezionato, voceSelezionata);
				}
			}
		});
		tableVociDiListino.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				VoceDiListinoCorriere voce = getVoceDiListinoSelezionata();
				boolean isSelezionato = voce != null;
				btnEliminaVoce.setEnabled(isSelezionato);
			}
		});
		tableVociDiListino.setLinesVisible(true);
		tableVociDiListino.setHeaderVisible(true);
		
		tableViewerColumnVoce = new TableViewerColumn(viewerVociDiListino, SWT.NONE);
		tblclmnVoce = tableViewerColumnVoce.getColumn();
		tblclmnVoce.setWidth(100);
		tblclmnVoce.setText("Voce");
		tableViewerColumnVoce.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				VoceDiListinoCorriere voce = (VoceDiListinoCorriere) element;
				String nome = voce.getNome();
				return nome;
			}
		});
		
		tableViewerColumnAmbito = new TableViewerColumn(viewerVociDiListino, SWT.NONE);
		tblclmnAmbito = tableViewerColumnAmbito.getColumn();
		tblclmnAmbito.setWidth(100);
		tblclmnAmbito.setText("Ambito");
		tableViewerColumnAmbito.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				VoceDiListinoCorriere voce = (VoceDiListinoCorriere) element;
				String codiceAmbito = voce.getAmbito();
				AmbitoDiTrasporto ambito = AmbitoDiTrasporto.getAmbito(codiceAmbito);
				String descrizioneAmbito = (ambito != null) ? ambito.getDescrizione() : "";
				return descrizioneAmbito;
			}
		});
		
		tableViewerColumnVoceDescrizione = new TableViewerColumn(viewerVociDiListino, SWT.NONE);
		tblclmnDescrizione = tableViewerColumnVoceDescrizione.getColumn();
		tblclmnDescrizione.setToolTipText("Contiene la descrizione della voce di listino.");
		tblclmnDescrizione.setWidth(400);
		tblclmnDescrizione.setText("Descrizione");
		tableViewerColumnVoceDescrizione.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				VoceDiListinoCorriere voce = (VoceDiListinoCorriere) element;
				String descrizione = voce.getDescrizione();
				return descrizione;
			}
		});
		
	}
	
	private void mostraMessaggioErrore(String titolo, String messaggio) {
		Display display = Display.getCurrent();
		Shell messageShell = display.getActiveShell();
		MessageDialog.openError(messageShell, titolo, messaggio);
	}
	
	private boolean mostraMessaggioConferma(String titolo, String messaggio) {
		Display display = Display.getCurrent();
		Shell messageShell = display.getActiveShell();
		boolean scelta = MessageDialog.openConfirm(messageShell, titolo, messaggio);
		return scelta;
	}
	
	private void aggiornaListini() {
		List<ListinoCorriere> listini = controller.getListiniCorrieri();
		viewerListini.setInput(listini);
		for (TableColumn tc : tableListini.getColumns()) {
			tc.pack();
		}
	}
	
	private void aggiornaVociDiListino(ListinoCorriere listino) {
		List<VoceDiListinoCorriere> vociDiListino = controller.getVociDiListino(listino);
		viewerVociDiListino.setInput(vociDiListino);
		for (TableColumn tc : tableVociDiListino.getColumns()) {
			tc.pack();
		}
	}
	
	private void ripulisciVociDiListino() {
		List<VoceDiListinoCorriere> listaVuota = new ArrayList<VoceDiListinoCorriere>();
		viewerVociDiListino.setInput(listaVuota);
	}
	
	private ListinoCorriere getListinoSelezionato() {
		ListinoCorriere listinoSelezionato = null;
		int selectedIndex = tableListini.getSelectionIndex();
		if (selectedIndex != -1) {
			TableItem selectedItem = tableListini.getItem(selectedIndex);
			listinoSelezionato = (ListinoCorriere) selectedItem.getData();
		}
		return listinoSelezionato;
	}
	
	private VoceDiListinoCorriere getVoceDiListinoSelezionata() {
		VoceDiListinoCorriere voceSelezionata = null;
		int selectedIndex = tableVociDiListino.getSelectionIndex();
		if (selectedIndex != -1) {
			TableItem selectedItem = tableVociDiListino.getItem(selectedIndex);
			voceSelezionata = (VoceDiListinoCorriere) selectedItem.getData();
		}
		return voceSelezionata;
	}
	
	private void copiaListino() {
		boolean scelta = mostraMessaggioConferma("Conferma copia", "Sei sicuro di voler copiare il listino selezionato?");
		if (scelta) {
			ListinoCorriere listino = getListinoSelezionato();
			if (listino != null) {
				boolean copia = controller.copiaListino(listino);
				if (copia) {
					aggiornaListini();
				} else {
					mostraMessaggioErrore("Copia fallita", "Impossibile ecopiare il listino selezionato.");
				}
			}
		}
	}
	
	private void eliminaListino() {
		boolean scelta = mostraMessaggioConferma("Conferma eliminazione", "Sei sicuro di voler eliminare il listino selezionato?");
		if (scelta) {
			ListinoCorriere listino = getListinoSelezionato();
			if (listino != null) {
				boolean eliminazione = controller.eliminaListino(listino);
				if (eliminazione) {
					btnEliminaListino.setEnabled(false);
					btnCopiaListino.setEnabled(false);
					aggiornaListini();
					ripulisciVociDiListino();
				} else {
					mostraMessaggioErrore("Eliminazione fallita", "Impossibile eliminare il listino selezionato.");
				}
			}
		}
	}
	
	private void eliminaVoceDiListino() {
		boolean scelta = mostraMessaggioConferma("Conferma eliminazione", "Sei sicuro di voler eliminare la voce selezionata?");
		if (scelta) {
			ListinoCorriere listinoSelezionato = getListinoSelezionato();
			VoceDiListinoCorriere voceSelezionata = getVoceDiListinoSelezionata();
			if (listinoSelezionato != null && voceSelezionata != null) {
				boolean eliminazione = controller.eliminaVoceDiListino(voceSelezionata);
				if (eliminazione) {
					btnEliminaVoce.setEnabled(false);
					aggiornaVociDiListino(listinoSelezionato);
				} else {
					mostraMessaggioErrore("Eliminazione fallita", "Impossibile eliminare la voce di listino selezionata.");
				}
			}
		}
	}
	
	private void apriModificaVoce(ListinoCorriere listino, VoceDiListinoCorriere voce) {
		String tipoAlgoritmo = voce.getTipo();
		int esito;
		switch (tipoAlgoritmo) {
			case AlgoritmoFisso.NOME : 
			{
				ProprietaVoceListinoCorriereFissa proprieta = ProprietaVoceListinoCorriereFissa.getInstance(voce);
				esito = proprieta.open();
				break;
			}
			case AlgoritmoPercentuale.NOME :
			{
				ProprietaVoceListinoCorrierePercentuale proprieta = ProprietaVoceListinoCorrierePercentuale.getInstance(voce);
				esito = proprieta.open();
				break;
			}
			case AlgoritmoProporzionale.NOME :
			{
				ProprietaVoceListinoCorriereProporzionale proprieta = ProprietaVoceListinoCorriereProporzionale.getInstance(voce);
				esito = proprieta.open();
				break;
			}
			case AlgoritmoScaglioni.NOME :
			{
				ProprietaVoceListinoCorriereScaglioni proprieta = ProprietaVoceListinoCorriereScaglioni.getInstance(voce);
				esito = proprieta.open();
				break;
			}
			case AlgoritmoScaglioniRipetuti.NOME :
			{
				ProprietaVoceListinoCorriereScaglioniRipetuti proprieta = ProprietaVoceListinoCorriereScaglioniRipetuti.getInstance(voce);
				esito = proprieta.open();
				break;
			}
			default : esito = Dialog.CANCEL;
		}
		if (esito == Dialog.OK) {
			aggiornaVociDiListino(listino);
		}
	}
	
}