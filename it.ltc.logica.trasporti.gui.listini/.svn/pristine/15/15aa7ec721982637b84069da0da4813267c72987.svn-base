package it.ltc.logica.trasporti.gui.listini.dialogs.cliente;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Composite;

import it.ltc.logica.database.model.centrale.AmbitoDiTrasporto;
import it.ltc.logica.database.model.centrale.VoceDiListino;
import it.ltc.logica.database.model.centrale.VoceDiListinoFissa;
import it.ltc.logica.database.orm.ValidationResult;
import it.ltc.logica.gui.container.DialogModel;
import it.ltc.logica.trasporti.controller.ListiniClientiController;
import it.ltc.logica.trasporti.gui.composite.CompositeVoceFissa;
import it.ltc.logica.trasporti.gui.composite.CompositeVoceListino;

public class ProprietaVoceListinoCommessaFissa extends DialogModel<VoceDiListino> {
	
	private static final String titolo = "Propriet\u00E0 - Voce di listino cliente fissa";
	
	private static ProprietaVoceListinoCommessaFissa instance;
	
	private ListiniClientiController controller;
	
	private VoceDiListino voce;
	//private VoceDiListinoTrasporti voceTrasporti;
	private VoceDiListinoFissa voceFissa;
	
	private CompositeVoceListino compositeVoce;
	private CompositeVoceFissa compositeFissa;
	
	private ProprietaVoceListinoCommessaFissa(VoceDiListino voceDiListino) {
		super(titolo, voceDiListino);
		controller = ListiniClientiController.getInstance();
		voce = voceDiListino;
		//voceTrasporti = controller.caricaVoceTrasporti(voce);
		voceFissa = controller.caricaVoceFissa(voce);
	}
	
	public static ProprietaVoceListinoCommessaFissa getInstance(VoceDiListino voceDiListino) {
		instance = new ProprietaVoceListinoCommessaFissa(voceDiListino);
		return instance;
	}
	
	@Override
	protected Point getInitialSize() {
		return new Point(450, 300);
	}

	@Override
	public void aggiungiElementiGrafici(Composite container) {
		compositeVoce = new CompositeVoceListino(container, SWT.NONE, CompositeVoceListino.TIPO_CLIENTE);
		compositeVoce.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		addChild(compositeVoce);
		
		compositeFissa = new CompositeVoceFissa(container, SWT.NONE);
		compositeFissa.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		addChild(compositeFissa);
	}

	@Override
	public boolean isDirty() {
		boolean voceValida = compositeVoce.isDirty();
		boolean fissaValida = compositeFissa.isDirty();
		return voceValida || fissaValida;
	}

	@Override
	public void loadModel() {
		String nome = voce.getNome();
		String descrizione = voce.getDescrizione();
		compositeVoce.setNome(nome);
		compositeVoce.setDescrizione(descrizione);
		String ambito = voce.getSottoAmbito();
		AmbitoDiTrasporto ambitoDiTrasporto = AmbitoDiTrasporto.getAmbito(ambito);
		compositeVoce.setAmbito(ambitoDiTrasporto);
//		if (voceTrasporti != null) {
//			String ambito = voceTrasporti.getAmbito();
//			AmbitoDiTrasporto ambitoDiTrasporto = AmbitoDiTrasporto.getAmbito(ambito);
//			compositeVoce.setAmbito(ambitoDiTrasporto);
//		}
		if (voceFissa != null) {
			Double valore = voceFissa.getValore();
			compositeFissa.setValore(valore);
		}
	}

	@Override
	public void copyDataToModel() {
		String nome = compositeVoce.getNome();
		voce.setNome(nome);
		String descrizione = compositeVoce.getDescrizione();
		voce.setDescrizione(descrizione);
		String ambito = compositeVoce.getAmbito().getCodice();
		//voceTrasporti.setAmbito(ambito);
		voce.setSottoAmbito(ambito);
		Double valore = compositeFissa.getValore();
		voceFissa.setValore(valore);
	}

	@Override
	public boolean updateModel() {
		boolean updateListino = controller.aggiornaVoceDiListino(voce);
		//boolean updateTrasporti = controller.aggiornaVoceDiListinoTrasporti(voceTrasporti);
		boolean updateFissa = controller.aggiornaVoceDiListinoFissa(voceFissa);
		boolean update = updateListino /*&& updateTrasporti*/ && updateFissa;
		return update;
	}

	@Override
	public VoceDiListino createNewModel() {
		VoceDiListino listino = new VoceDiListino();
		return listino;
	}

	@Override
	public boolean insertModel() {
		//TODO - DO NOTHING! Not Yet Supported!
		return false;
	}

	@Override
	public List<String> validateModel() {
		ArrayList<String> errors = new ArrayList<String>();
		ValidationResult esitoVoce = voce.validate();
		if (!esitoVoce.isValid())
			errors.addAll(esitoVoce.getMessages());
		ValidationResult esitoFisso = voceFissa.validate();
		if (!esitoFisso.isValid())
			errors.addAll(esitoFisso.getMessages());
		return errors;
	}

}
