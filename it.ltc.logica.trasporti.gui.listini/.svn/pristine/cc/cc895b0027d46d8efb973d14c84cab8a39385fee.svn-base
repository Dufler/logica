package it.ltc.logica.trasporti.gui.listini.dialogs.corriere;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;

import it.ltc.logica.database.model.centrale.AmbitoDiTrasporto;
import it.ltc.logica.database.model.centrale.VoceDiListinoCorriere;
import it.ltc.logica.database.model.centrale.VoceDiListinoCorrierePercentuale;
import it.ltc.logica.database.orm.ValidationResult;
import it.ltc.logica.gui.container.DialogModel;
import it.ltc.logica.trasporti.controller.ListiniCorrieriController;
import it.ltc.logica.trasporti.gui.composite.CompositeVoceListino;
import it.ltc.logica.trasporti.gui.composite.CompositeVocePercentuale;

public class ProprietaVoceListinoCorrierePercentuale extends DialogModel<VoceDiListinoCorriere> {
	
	private static final String titolo = "Propriet\u00E0 - Voce di listino corriere percentuale";
	
	private ListiniCorrieriController controller;
	
	private VoceDiListinoCorriere voce;
	private VoceDiListinoCorrierePercentuale vocePercentuale;

	private CompositeVoceListino compositeVoce;
	private CompositeVocePercentuale compositePercentuale;
	
	private final boolean permessoGestione;

	public ProprietaVoceListinoCorrierePercentuale(VoceDiListinoCorriere voceDiListino, boolean permesso) {
		super(titolo, voceDiListino);
		voce = voceDiListino;
		controller = ListiniCorrieriController.getInstance();
		permessoGestione = permesso;
	}

	@Override
	public void aggiungiElementiGrafici(Composite container) {
		container.setLayout(new GridLayout(1, false));
		
		compositeVoce = new CompositeVoceListino(container, SWT.NONE, CompositeVoceListino.TIPO_CORRIERE);
		compositeVoce.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		compositeVoce.enableInputElements(permessoGestione);
		addChild(compositeVoce);
		
		compositePercentuale = new CompositeVocePercentuale(container, SWT.NONE);
		compositePercentuale.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false, 1, 1));
		compositePercentuale.enableInputElements(permessoGestione);
		addChild(compositePercentuale);
	}

	@Override
	public boolean isDirty() {
		boolean modifyVoce = compositeVoce.isDirty();
		boolean modifyPercentuale = compositePercentuale.isDirty();
		return modifyVoce || modifyPercentuale;
	}

	@Override
	public void loadModel() {
		String nome = voce.getNome();
		compositeVoce.setNome(nome);
		String descrizione = voce.getDescrizione();
		compositeVoce.setDescrizione(descrizione);
		String ambito = voce.getAmbito();
		AmbitoDiTrasporto ambitoDiTrasporto = AmbitoDiTrasporto.getAmbito(ambito);
		compositeVoce.setAmbito(ambitoDiTrasporto);
		vocePercentuale = controller.caricaVocePercentuale(voce);
		if (vocePercentuale != null) {
			String tipo = vocePercentuale.getTipo();
			compositePercentuale.setTipo(tipo);
			Double valore = vocePercentuale.getValore();
			compositePercentuale.setValore(valore);
			Double minimo = vocePercentuale.getMinimo();
			compositePercentuale.setMinimo(minimo);
			Double massimo = vocePercentuale.getMassimo();
			compositePercentuale.setMassimo(massimo);
		}
	}

	@Override
	public void copyDataToModel() {
		String nome = compositeVoce.getNome();
		voce.setNome(nome);
		String descrizione = compositeVoce.getDescrizione();
		voce.setDescrizione(descrizione);
		String ambito = compositeVoce.getAmbito().getCodice();
		voce.setAmbito(ambito);
		String tipo = compositePercentuale.getTipo();
		vocePercentuale.setTipo(tipo);
		Double valore = compositePercentuale.getValore();
		vocePercentuale.setValore(valore);
		Double minimo = compositePercentuale.getMinimo();
		vocePercentuale.setMinimo(minimo);
		Double massimo = compositePercentuale.getMassimo();
		vocePercentuale.setMassimo(massimo);
	}

	@Override
	public List<String> validateModel() {
		ArrayList<String> errors = new ArrayList<String>();
		ValidationResult esitoVoce = voce.validate();
		errors.addAll(esitoVoce.getMessages());
		ValidationResult esitoPercentuale = vocePercentuale.validate();
		errors.addAll(esitoPercentuale.getMessages());
		return errors;
	}

	@Override
	public boolean updateModel() {
		boolean updateVoce = controller.aggiornaVoceDiListino(voce);
		boolean updatePercentuale = controller.aggiornaVoceDiListinoPercentuale(vocePercentuale);
		return updateVoce && updatePercentuale;
	}

	@Override
	public boolean insertModel() {
		//DO NOTHING!
		return false;
	}

	@Override
	public VoceDiListinoCorriere createNewModel() {
		VoceDiListinoCorriere listino = new VoceDiListinoCorriere();
		return listino;
	}

}
