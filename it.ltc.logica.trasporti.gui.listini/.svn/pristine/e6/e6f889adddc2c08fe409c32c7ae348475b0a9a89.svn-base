package it.ltc.logica.trasporti.gui.listini.dialogs.simulazione;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;

import it.ltc.logica.common.calcolo.algoritmi.Scaglione;
import it.ltc.logica.common.controller.fatturazione.ControllerAmbitiFatturazione;
import it.ltc.logica.common.controller.listini.ListiniSimulazioneController;
import it.ltc.logica.database.model.centrale.fatturazione.SottoAmbitoFattura;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoce;
import it.ltc.logica.database.model.locale.ListinoSimulazioneVoceScaglioni;
import it.ltc.logica.database.orm.ValidationResult;
import it.ltc.logica.gui.dialog.DialogModel;
import it.ltc.logica.trasporti.gui.composite.CompositeVoceListino;
import it.ltc.logica.trasporti.gui.composite.CompositeVoceScaglioni;
import it.ltc.logica.trasporti.gui.elements.ETipoListino;

public class ProprietaVoceListinoSimulazioneScaglioni extends DialogModel<ListinoSimulazioneVoce> {

	private static final String titolo = "Propriet\u00E0 - Voce di listino di simulazione a scaglioni";
	
	private ListiniSimulazioneController controller;
	
	private final ListinoSimulazioneVoce voce;
	private final List<ListinoSimulazioneVoceScaglioni> vociScaglioni;
	
	private CompositeVoceListino compositeVoce;
	private CompositeVoceScaglioni compositeScaglioni;
	
	private final boolean permessoGestione;
	
	public ProprietaVoceListinoSimulazioneScaglioni(ListinoSimulazioneVoce voceDiListino, boolean permesso) {
		super(titolo, voceDiListino);
		controller = ListiniSimulazioneController.getInstance();
		voce = voceDiListino;
		vociScaglioni = controller.getVociScaglioni(voce);
		permessoGestione = permesso;
	}

	@Override
	public void aggiungiElementiGrafici(Composite container) {
		container.setLayout(new GridLayout(1, false));
		
		compositeVoce = new CompositeVoceListino(container, SWT.NONE, ETipoListino.SIMULAZIONE);
		compositeVoce.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 1, 1));
		compositeVoce.enableInputElements(permessoGestione);
		addChild(compositeVoce);
		
		compositeScaglioni = new CompositeVoceScaglioni(container, SWT.NONE);
		compositeScaglioni.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		compositeScaglioni.enableInputElements(permessoGestione);
		addChild(compositeScaglioni);
	}

	@Override
	public boolean isDirty() {
		boolean modifyVoce = compositeVoce.isDirty();
		boolean modifyScaglioni = compositeScaglioni.isDirty();
		return modifyVoce || modifyScaglioni;
	}

	@Override
	public void loadModel() {
		String nome = voce.getNome();
		compositeVoce.setNome(nome);
		String descrizione = voce.getDescrizione();
		compositeVoce.setDescrizione(descrizione);
		Integer ambito = voce.getIdsottoAmbito();
		SottoAmbitoFattura ambitoDiTrasporto = ControllerAmbitiFatturazione.getInstance().getSottoAmbito(ambito);
		compositeVoce.setAmbito(ambitoDiTrasporto);
		String valoreAmbito = voce.getValoreSottoAmbito();
		if (valoreAmbito != null)
			compositeVoce.setValoreAmbito(valoreAmbito);
		String tipo = voce.getStrategia();
		ArrayList<Scaglione> scaglioni = new ArrayList<Scaglione>();
		for (ListinoSimulazioneVoceScaglioni voceScaglione : vociScaglioni) {
			Scaglione scaglione = new Scaglione();
			scaglione.setTipo(voce.getStrategia());
			scaglione.setInizio(voceScaglione.getInizio());
			scaglione.setFine(voceScaglione.getFine());
			scaglione.setValore(voceScaglione.getValore());
			scaglioni.add(scaglione);
		}
		compositeScaglioni.setScaglioni(scaglioni);
		compositeScaglioni.setTipo(tipo);
		compositeScaglioni.abilitaInserimento(true);
	}

	@Override
	public void copyDataToModel() {
		String nome = compositeVoce.getNome();
		voce.setNome(nome);
		String descrizione = compositeVoce.getDescrizione();
		voce.setDescrizione(descrizione);
		Integer ambito = compositeVoce.getAmbito().getId();
		voce.setIdsottoAmbito(ambito);
		String valoreAmbito = compositeVoce.getValoreAmbito();
		if (!valoreAmbito.isEmpty())
			voce.setValoreSottoAmbito(valoreAmbito);
		Integer id = voce.getId();
		String tipo = compositeScaglioni.getTipo();
		voce.setStrategia(tipo);
		ArrayList<Scaglione> scaglioni = compositeScaglioni.getScaglioni();
		vociScaglioni.clear();
		for (Scaglione scaglione : scaglioni) {
			ListinoSimulazioneVoceScaglioni voceScaglione = new ListinoSimulazioneVoceScaglioni();
			voceScaglione.setId(id);
			//voceScaglione.setTipo(tipo);
			voceScaglione.setInizio(scaglione.getInizio());
			voceScaglione.setFine(scaglione.getFine());
			voceScaglione.setValore(scaglione.getValore());
			vociScaglioni.add(voceScaglione);
		}
	}

	@Override
	public List<String> validateModel() {
		ArrayList<String> errors = new ArrayList<String>();
		ValidationResult esitoVoce = voce.validate();
		errors.addAll(esitoVoce.getMessages());
		ValidationResult esitoScaglioni = ListinoSimulazioneVoceScaglioni.validate(vociScaglioni);
		errors.addAll(esitoScaglioni.getMessages());
		return errors;
	}

	@Override
	public boolean updateModel() {
		boolean updateVoce = controller.aggiornaListinoSimulazioneVoce(voce);
		boolean updateScaglioni = controller.aggiornaListinoSimulazioneVoceScaglioni(vociScaglioni, voce.getId());
		boolean update = updateVoce && updateScaglioni;
		return update;
	}

	@Override
	public boolean insertModel() {
		//DO NOTHING!
		return false;
	}
	
	@Override
	public void prefillModel() {
		//DO NOTHING!		
	}

	@Override
	public ListinoSimulazioneVoce createNewModel() {
		ListinoSimulazioneVoce listino = new ListinoSimulazioneVoce();
		return listino;
	}

}
