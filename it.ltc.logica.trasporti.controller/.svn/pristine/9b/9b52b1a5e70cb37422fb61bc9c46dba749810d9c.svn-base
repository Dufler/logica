package it.ltc.logica.trasporti.controller;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.operation.IRunnableWithProgress;

import it.ltc.logica.common.calcolo.algoritmi.Calcolo;
import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino.Scopo;
import it.ltc.logica.common.calcolo.algoritmi.VoceCalcolata;
import it.ltc.logica.database.configuration.ConfigurationManager;
import it.ltc.logica.database.model.centrale.fatturazione.AmbitoFattura;
import it.ltc.logica.database.model.centrale.fatturazione.VoceFattura;
import it.ltc.logica.database.model.centrale.listini.ListinoCommessa;
import it.ltc.logica.database.model.centrale.trasporti.CodiceClienteCorriere;
import it.ltc.logica.database.model.centrale.trasporti.Spedizione;
import it.ltc.logica.database.orm.EntityManager;
import it.ltc.logica.database.orm.TransactionManager;
import it.ltc.logica.gui.container.DialogMessaggio;
import it.ltc.logica.gui.container.DialogProgresso;
import it.ltc.logica.trasporti.calcolo.algoritmi.CalcolatoreTrasporti;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;
import it.ltc.logica.trasporti.calcolo.algoritmi.VoceDiListinoTrasporti;
import it.ltc.logica.trasporti.calcolo.ambiti.trasporti.FactoryAmbitiTrasporti;
import it.ltc.logica.utilities.excel.FileExcel;

public class FatturazioneSpedizioniController extends FatturazioneController {
	
	private static FatturazioneSpedizioniController instance;
	
	private final SpedizioniController controllerSpedizioni;
	
	private final EntityManager<Spedizione> managerSpedizioni;
	
	private final HashMap<String, ListinoCommessa> listiniTrasporti;
	private final HashMap<String, List<SpedizioneModel>> modelTrasporti;
	
	private FatturazioneSpedizioniController() {
		controllerSpedizioni = SpedizioniController.getInstance();
		managerSpedizioni = new EntityManager<Spedizione>(Spedizione.class, ConfigurationManager.getDefault());
		listiniTrasporti = new HashMap<String, ListinoCommessa>();
		modelTrasporti = new HashMap<String, List<SpedizioneModel>>();
	}

	public static FatturazioneSpedizioniController getInstance() {
		if (instance == null) {
			instance = new FatturazioneSpedizioniController();
		}
		return instance;
	}
	
	public HashMap<String, List<SpedizioneModel>> getSpedizioniFatturate() {
		return modelTrasporti;
	}
	
	public List<ListinoCommessa> getListiniTrasportiUtilizzati() {
		List<ListinoCommessa> listiniUtilizzati = new ArrayList<ListinoCommessa>();
		for (String codice : listiniTrasporti.keySet()) {
			ListinoCommessa listino = listiniTrasporti.get(codice);
			listiniUtilizzati.add(listino);
		}
		return listiniUtilizzati;
	}
	
	private List<Spedizione> getSpedizioni() {
		String query = "SELECT * FROM spedizione WHERE id_commessa = [idCommessa] AND data_partenza >= '[inizio]' AND data_partenza <= '[fine]' AND fatturazione = " + Spedizione.FATTURABILE;
		query = query.replace("[idCommessa]", commessa.getId().toString());
		query = query.replace("[inizio]", sdf.format(inizio));
		query = query.replace("[fine]", sdf.format(fine));
		List<Spedizione> listaSpedizioni = managerSpedizioni.executeQuery(query);
		return listaSpedizioni;
	}
	
	private ListinoCommessa getListinoTrasporti(String codiceCliente) {
		if (!listiniTrasporti.containsKey(codiceCliente)) {
			CodiceClienteCorriere codice = CodiciClienteController.getInstance().getCodiceCliente(codiceCliente);
			if (codice != null) {
				ListinoCommessa filtro = new ListinoCommessa();
				filtro.setTipo(AmbitoFattura.ID_SPEDIZIONI);
				filtro.setIdCommessa(codice.getIdCommessa());
				ListinoCommessa listino = managerListini.getEntity(filtro, true);
				if (listino != null)
					listiniTrasporti.put(codiceCliente, listino);
			} else {
				String messaggio = MESSAGGIO_ERRORE_CODICE_NON_TROVATO.replace("[codice]", codiceCliente);
				DialogMessaggio.openError(TITOLO_ERRORE_CODICE_NON_TROVATO, messaggio);
			}
		}
		return listiniTrasporti.get(codiceCliente);
	}
	
	private List<SpedizioneModel> getListaSpedizioniTrasporti(String codiceCliente) {
		if (!modelTrasporti.containsKey(codiceCliente)) {
			ArrayList<SpedizioneModel> lista = new ArrayList<SpedizioneModel>();
			modelTrasporti.put(codiceCliente, lista);
		}
		return modelTrasporti.get(codiceCliente);
	}

	public void calcolaFatturazioneTrasporti() {
		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				CalcolatoreTrasporti calcolatore = CalcolatoreTrasporti.getInstance();
				listiniTrasporti.clear();
				modelTrasporti.clear();
				List<Spedizione> spedizioni = getSpedizioni();
				monitor.beginTask("Calcolo della fatturazione trasporti", spedizioni.size());
				for (Spedizione spedizione : spedizioni) {
					String codiceCliente = spedizione.getCodiceCliente();
					ListinoCommessa listinoCommessa = getListinoTrasporti(codiceCliente);
					if (listinoCommessa == null) {
						throw new InvocationTargetException(new RuntimeException("Listino Mancante"), "Inserire ad associare un listino per il codice cliente: " + codiceCliente);
//						DialogMessaggio.openError("Listino Mancante", "Inserire ad associare un listino per il codice cliente: " + codiceCliente);
//						continue;
					}
					List<SpedizioneModel> listaModel = getListaSpedizioniTrasporti(codiceCliente);
					SpedizioneModel model = SpedizioneModel.caricaSpedizione(spedizione);
					calcolatore.calcolaRicavo(model, listinoCommessa);
					listaModel.add(model);
					monitor.worked(1);
				}
				monitor.done();
			}
		};

		try {
			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
			dialog.run(true, true, runnable);
		} catch (InvocationTargetException e) {
			DialogMessaggio.openError(e.getCause().getMessage(), e.getMessage());
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	private String getNomeFile(String path) {
		String tipoFile = "Fatturazione";
		String nomeCommessa = commessa.getNome();
		String periodo = meseEAnno.format(inizio);
		String estensione = ".xls";
		String nomeFile = path  + "\\"  + tipoFile + " " + nomeCommessa + " " + periodo + estensione;
		return nomeFile;
	}
	
	public boolean salvaDatiTrasporti() {
		boolean salvataggio = false;
		IRunnableWithProgress runnable = new IRunnableWithProgress() {
			@Override
			public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
				monitor.beginTask("Salvataggio dei dati di fatturazione.", -1);	
				avviaProcessoSalvaDatiTrasporti();
			}
		};
			
		try {
			DialogProgresso dialog = new DialogProgresso(DialogProgresso.TITOLO_DEFAULT);
			dialog.run(true, true, runnable);
			salvataggio = true;
		} catch (InvocationTargetException | InterruptedException e) {
			e.printStackTrace();
		}
		return salvataggio;
	}
	
	private boolean avviaProcessoSalvaDatiTrasporti() {
		boolean salvataggio = false;
		//Instanzio i manager transazionali
		//TransactionManager<DocumentoFattura> managerDocumento = new TransactionManager<DocumentoFattura>(DocumentoFattura.class, ConfigurationManager.getDefault());
		TransactionManager<VoceFattura> managerVoci = new TransactionManager<VoceFattura>(VoceFattura.class, ConfigurationManager.getDefault());
		TransactionManager<Spedizione> managerSpedizioni = new TransactionManager<Spedizione>(Spedizione.class, ConfigurationManager.getDefault());
		//Preparo le entity da salvare
		int idDocumento = getDocumentoFatturazione(commessa.getId(), AmbitoFattura.ID_SPEDIZIONI, inizio);
		boolean recuperoDocumento = idDocumento != -1;
		boolean inserimentoVoci = true;
		if (recuperoDocumento)
			inserimentoVoci:
			for (String codice : modelTrasporti.keySet()) {
				List<SpedizioneModel> spedizioni = modelTrasporti.get(codice);
				for(SpedizioneModel spedizione : spedizioni) {
					Calcolo preventivo = spedizione.getPreventivoRicavo();
					//Aggiorno il totale e lo stato di fatturazione della spedizione
					boolean update = false;
					int idSpedizione = spedizione.getSpedizione().getId();
					Spedizione trovata = controllerSpedizioni.getSpedizione(idSpedizione);
					if (trovata != null) {
						trovata.setRicavo(preventivo.getTotale());
						trovata.setFatturazione(Spedizione.FATTURATA);
						update = managerSpedizioni.update(trovata);
					}
					//Inserisco le voci di fatturazione
					int vociInserite = 0;
					for (VoceCalcolata voce : preventivo.getVoci()) {
						//Voce di fatturazione
						VoceFattura nuovaVoce = new VoceFattura();
						nuovaVoce.setIdAmbito(AmbitoFattura.ID_SPEDIZIONI);
						nuovaVoce.setIdSottoAmbito(voce.getIdAmbito());
						nuovaVoce.setIdCommessa(commessa.getId());
						nuovaVoce.setIdDocumento(idDocumento);
						nuovaVoce.setIdListino(preventivo.getIdListino());
						nuovaVoce.setIdRiferimento(idSpedizione);
						nuovaVoce.setIdVoce(voce.getIdVoce());
						nuovaVoce.setImporto(voce.getCosto());
						boolean insert = managerVoci.insert(nuovaVoce);
						if (insert) {
							vociInserite += 1;
						}
					}
					//Se qualcosa è fallito esco dai cicli e faccio rollback
					if (!update || vociInserite != preventivo.getVoci().size()) {
						inserimentoVoci = false;
						break inserimentoVoci;
					}
				}
			}
		//Scrivo tutto nel DB, se è andato a buon fine
		if (recuperoDocumento && inserimentoVoci) {
			//managerDocumento.commit();
			managerVoci.commit();
			managerSpedizioni.commit();
			salvataggio = true;
		} else {
			//managerDocumento.rollback();
			managerVoci.rollback();
			managerSpedizioni.rollback();
		}
		return salvataggio;
	}

	public void esportaDatiTrasporti(String path) {
		CalcolatoreTrasporti calcolatore = CalcolatoreTrasporti.getInstance();
		String nomeFile = getNomeFile(path);
		FileExcel workbook = FileExcel.getFileExcel(nomeFile);
		boolean successo = false;
		if (workbook != null && !modelTrasporti.isEmpty()) {
			for (String codice : modelTrasporti.keySet()) {
				workbook.creaFoglio(codice);
				//Titolo - riga 1
				workbook.aggiungiTitolo(codice, 0, 0, commessa.getNome() + " - " + codice);
				//Sotto titoli - riga 2
				int colonnaSottoTitoli = 0;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Data");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Riferimento");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Destinatario");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Localita'");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Provincia");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Colli");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Pezzi");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Peso");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Volume");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Contrassegno");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Totale");
				colonnaSottoTitoli += 1;
				workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, "Nolo");
				//colonnaSottoTitoli += 1;
				ListinoCommessa listinoCommessa = getListinoTrasporti(codice);
				List<VoceDiListinoTrasporti> voci = calcolatore.getTutteLeVociDiListino(listinoCommessa.getId());
				HashMap<Integer, Integer> colonneVoci = new HashMap<Integer, Integer>();
				for (VoceDiListinoTrasporti voce : voci) {
					if (!(FactoryAmbitiTrasporti.getInstance().isAmbitoNoloBase(voce.getAmbito().getId()))) {
						colonnaSottoTitoli += 1;
						workbook.aggiungiSottoTitolo(codice, colonnaSottoTitoli, 1, voce.getNome());
						colonneVoci.put(voce.getIdVoce(), colonnaSottoTitoli);
					}
				}
				//Spedizioni - righe successive
				int riga = 1;
				List<SpedizioneModel> spedizioni = modelTrasporti.get(codice);
				for(SpedizioneModel spedizione : spedizioni) {
					riga += 1;
					workbook.aggiungiTesto(codice, 0, riga, semplice.format(spedizione.getSpedizione().getData()));
					workbook.aggiungiTesto(codice, 1, riga, spedizione.getSpedizione().getRiferimentoCliente());
					workbook.aggiungiTesto(codice, 2, riga, spedizione.getDestinazione().getRagioneSociale());
					workbook.aggiungiTesto(codice, 3, riga, spedizione.getDestinazione().getLocalita());
					workbook.aggiungiTesto(codice, 4, riga, spedizione.getDestinazione().getProvincia());
					workbook.aggiungiInteger(codice, 5, riga, spedizione.getSpedizione().getColli());
					workbook.aggiungiInteger(codice, 6, riga, spedizione.getSpedizione().getPezzi());
					workbook.aggiungiDouble(codice, 7, riga, spedizione.getSpedizione().getPeso());
					workbook.aggiungiDouble(codice, 8, riga, spedizione.getSpedizione().getVolume());
					if (spedizione.getContrassegno() != null) {
						workbook.aggiungiValutaDueCifre(codice, 9, riga, spedizione.getContrassegno().getValore());
					} else {
						//workbook.aggiungiTesto(codice, 7, riga, "-");
					}
					Calcolo preventivo = spedizione.getPreventivoRicavo();
					workbook.aggiungiValutaTreCifre(codice, 10, riga, preventivo.getTotale());
					workbook.aggiungiValutaTreCifre(codice, 11, riga, spedizione.getCostoNoloBase(Scopo.RICAVO));
					for (VoceCalcolata voce : preventivo.getVoci()) {
						Integer colonna = colonneVoci.get(voce.getIdVoce());
						if (colonna != null)
							workbook.aggiungiValutaTreCifre(codice, colonna, riga, voce.getCosto());
					}
				}
			}		
			successo = workbook.salvaEChiudi();
		}
		if (successo) {
			DialogMessaggio.openInformation("Esportazione completata", "Esportazione completata!\r\nE' stato generato il file:\r\n" + nomeFile);
		} else {
			DialogMessaggio.openError("Errore nella esportazione", "Non \u00E8 stato possibile esportare i risultati.");
		}
	}
	
}
