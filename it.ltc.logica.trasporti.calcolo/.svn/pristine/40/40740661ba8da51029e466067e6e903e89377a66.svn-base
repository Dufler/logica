package it.ltc.logica.trasporti.calcolo.ambiti;

import it.ltc.logica.common.calcolo.algoritmi.AlgoritmoPercentuale;
import it.ltc.logica.common.calcolo.algoritmi.AlgoritmoProporzionale;
import it.ltc.logica.common.calcolo.algoritmi.AlgoritmoScaglioni;
import it.ltc.logica.common.calcolo.algoritmi.AlgoritmoScaglioniRipetuti;
import it.ltc.logica.common.calcolo.algoritmi.IAmbito;
import it.ltc.logica.common.calcolo.algoritmi.MDettaglioVoce;
import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino;
import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino.Scopo;
import it.ltc.logica.common.calcolo.algoritmi.MVoceFissa;
import it.ltc.logica.common.calcolo.algoritmi.MVocePercentuale;
import it.ltc.logica.common.calcolo.algoritmi.MVoceProporzionale;
import it.ltc.logica.common.calcolo.algoritmi.MVoceScaglioni;
import it.ltc.logica.common.calcolo.algoritmi.MVoceScaglioniRipetuti;
import it.ltc.logica.common.calcolo.algoritmi.TipoAlgoritmo;
import it.ltc.logica.database.model.centrale.fatturazione.SottoAmbitoFattura;
import it.ltc.logica.database.model.centrale.trasporti.Spedizione;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;
import it.ltc.logica.trasporti.calcolo.algoritmi.StrategiaPercentualePerTrasporti;
import it.ltc.logica.trasporti.calcolo.algoritmi.StrategiaProporzionalePerTrasporti;
import it.ltc.logica.trasporti.calcolo.algoritmi.StrategiaScaglioniPerTrasporti;

public abstract class IAmbitoTrasporto extends IAmbito<SpedizioneModel> {
	
	public IAmbitoTrasporto(SottoAmbitoFattura ambito) {
		super(ambito.getId(), ambito.getNome(), ambito.getDescrizione(), ambito.getCategoria());
	}

	public enum Tipo {
		
		NOLO_BASE,
		NOLO_EXTRA,
		EXTRA,
		GIACENZA,
		CONTRASSEGNO,
		FUEL,
		ISTAT,
		FORFETTARIO
		
	}
	
	@Override
	public String toString() {
		return nome;
	}
	
	public abstract Tipo getTipo();
	
	@Override
	public double getValore(SpedizioneModel spedizione, MVoceDiListino<SpedizioneModel> voce) {
		double valore = 0;
		TipoAlgoritmo tipoAlgoritmo = getTipoAlgoritmo(voce);
		switch (tipoAlgoritmo) {
			case FISSO : valore = getValoreFisso(spedizione, voce); break;
			case PERCENTUALE : valore = getValorePercentuale(spedizione, voce); break;
			case PROPORZIONALE : valore = getValoreProporzionale(spedizione, voce); break;
			case SCAGLIONI : valore = getValoreScaglioni(spedizione, voce); break;
			case SCAGLIONI_RIPETUTI : valore = getValoreScaglioniRipetuti(spedizione, voce); break;
			default : valore = 0;
		}
		return valore;
	}
	
	protected double getValoreFisso(SpedizioneModel model, MVoceDiListino<SpedizioneModel> voce) {
		MDettaglioVoce dettagli = voce.getDettagli();
		MVoceFissa dettaglioFissa = (MVoceFissa) dettagli;
		double valore = dettaglioFissa.getValore();
		return valore;
	}
	
	protected double getValorePercentuale(SpedizioneModel model, MVoceDiListino<SpedizioneModel> voce) {
		MVocePercentuale dettaglioPercentuale = (MVocePercentuale) voce.getDettagli();
		AlgoritmoPercentuale ap = (AlgoritmoPercentuale) voce.getAlgoritmo();
		StrategiaPercentualePerTrasporti strategia = (StrategiaPercentualePerTrasporti) ap.getStrategia();
		Scopo scopo = voce.getScopo();
		double base;
		switch (strategia) {
			case SOLO_CONTRASSEGNO : base = model.getCostoContrassegno(scopo); break;
			case SOLO_EXTRA : base = model.getCostoTotale(scopo) - model.getCostoNolo(scopo) - model.getCostoContrassegno(scopo); break;
			case SOLO_NOLO : base = model.getCostoNolo(scopo); break;
			case SOLO_NOLO_BASE : base = model.getCostoNoloBase(scopo); break;
			case SOLO_NOLO_EXTRA : base = model.getCostoNolo(scopo) - model.getCostoNoloBase(scopo); break;
			case TUTTO : base = model.getCostoTotale(scopo); break;
			default : base = 0;
		}
		double percentuale = dettaglioPercentuale.getValore();
		Double minimo = dettaglioPercentuale.getMinimo();
		Double massimo = dettaglioPercentuale.getMassimo();
		double costo = ap.calcolaCosto(base, percentuale, minimo, massimo);
		return costo;
	}
	
	public double getValoreProporzionale(SpedizioneModel model, MVoceDiListino<SpedizioneModel> voce) {
		MVoceProporzionale dettaglioProporzionale = (MVoceProporzionale) voce.getDettagli();
		AlgoritmoProporzionale ap = (AlgoritmoProporzionale) voce.getAlgoritmo();
		Spedizione spedizione = model.getSpedizione();
		StrategiaProporzionalePerTrasporti tipoProporzionale = (StrategiaProporzionalePerTrasporti) ap.getStrategia();
		double elementi;
		switch (tipoProporzionale) {
			case COLLI : elementi = spedizione.getColli(); break;
			case PEZZI : elementi = spedizione.getPezzi(); break;
			default : elementi = 0;
		}
		double valorePerElemento = dettaglioProporzionale.getValore();
		Double minimo = dettaglioProporzionale.getMinimo();
		Double massimo = dettaglioProporzionale.getMassimo();
		double costo = ap.calcolaCosto(valorePerElemento, elementi, minimo, massimo);
		return costo;
	}
	
	public double getValoreScaglioni(SpedizioneModel model, MVoceDiListino<SpedizioneModel> voce) {
		MVoceScaglioni dettaglioScaglioni = (MVoceScaglioni) voce.getDettagli();
		AlgoritmoScaglioni as = (AlgoritmoScaglioni) voce.getAlgoritmo();
		Spedizione spedizione = model.getSpedizione();
		StrategiaScaglioniPerTrasporti tipoScaglioni = (StrategiaScaglioniPerTrasporti) as.getTipo();
		double valore;
		switch(tipoScaglioni) {
			case COLLI : valore = spedizione.getColli(); break;
			case PESO_VOLUME_100: valore = getRapportoPesoVolume(spedizione, 100); break;
			case PESO_VOLUME_150: valore = getRapportoPesoVolume(spedizione, 150); break;
			case PESO_VOLUME_167: valore = getRapportoPesoVolume(spedizione, 167); break;
			case PESO_VOLUME_200: valore = getRapportoPesoVolume(spedizione, 200); break;
			case PESO_VOLUME_250: valore = getRapportoPesoVolume(spedizione, 250); break;
			case PESO_VOLUME_300: valore = getRapportoPesoVolume(spedizione, 300); break;
			default : valore = 0;
		}
		double costo = as.calcolaCosto(valore, dettaglioScaglioni.getScaglioni());
		return costo;
	}
	
	public double getValoreScaglioniRipetuti(SpedizioneModel model, MVoceDiListino<SpedizioneModel> voce) {
		MVoceScaglioniRipetuti dettaglioScaglioniRipetuti = (MVoceScaglioniRipetuti) voce.getDettagli();
		AlgoritmoScaglioniRipetuti asr = (AlgoritmoScaglioniRipetuti) voce.getAlgoritmo();
		Spedizione spedizione = model.getSpedizione();
		StrategiaScaglioniPerTrasporti tipoScaglioniRipetuti = (StrategiaScaglioniPerTrasporti) asr.getTipo();
		double valore;
		switch(tipoScaglioniRipetuti) {
			case COLLI : valore = spedizione.getColli(); break;
			case PESO_VOLUME_100: valore = getRapportoPesoVolume(spedizione, 100); break;
			case PESO_VOLUME_150: valore = getRapportoPesoVolume(spedizione, 150); break;
			case PESO_VOLUME_167: valore = getRapportoPesoVolume(spedizione, 167); break;
			case PESO_VOLUME_200: valore = getRapportoPesoVolume(spedizione, 200); break;
			case PESO_VOLUME_250: valore = getRapportoPesoVolume(spedizione, 250); break;
			case PESO_VOLUME_300: valore = getRapportoPesoVolume(spedizione, 300); break;
			default : valore = 0;
		}
		double intervallo = dettaglioScaglioniRipetuti.getIntervallo();
		double costoSingoloScaglione = dettaglioScaglioniRipetuti.getValore();
		Double minimo = dettaglioScaglioniRipetuti.getSogliaMinima();
		Double massimo = dettaglioScaglioniRipetuti.getSogliaMassima();
		double costo = asr.calcolaCosto(valore, intervallo, costoSingoloScaglione, minimo, massimo);
		return costo;
	}
	
	protected double getRapportoPesoVolume(Spedizione spedizione, double rapporto) {
		double peso = spedizione.getPeso();
		double volume = spedizione.getVolume();
		volume = volume * rapporto;
		double valoreRapporto = (peso > volume) ? peso : volume;
		return valoreRapporto;
	}

}
