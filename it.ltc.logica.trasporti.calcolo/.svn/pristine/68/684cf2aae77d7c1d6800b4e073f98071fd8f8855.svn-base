package it.ltc.logica.trasporti.calcolo.algoritmi;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;

import it.ltc.logica.database.model.AmbitoDiTrasporto;
import it.ltc.logica.database.model.ListinoCommessa;
import it.ltc.logica.database.model.ListinoCorriere;
import it.ltc.logica.database.model.VoceDiListino;
import it.ltc.logica.database.model.VoceDiListinoCorriere;
import it.ltc.logica.database.model.VoceDiListinoCorriereFissa;
import it.ltc.logica.database.model.VoceDiListinoCorrierePercentuale;
import it.ltc.logica.database.model.VoceDiListinoCorriereProporzionale;
import it.ltc.logica.database.model.VoceDiListinoCorriereScaglioni;
import it.ltc.logica.database.model.VoceDiListinoCorriereScaglioniRipetuti;
import it.ltc.logica.database.model.VoceDiListinoFissa;
import it.ltc.logica.database.model.VoceDiListinoPercentuale;
import it.ltc.logica.database.model.VoceDiListinoProporzionale;
import it.ltc.logica.database.model.VoceDiListinoScaglioni;
import it.ltc.logica.database.model.VoceDiListinoScaglioniRipetuti;
import it.ltc.logica.database.orm.EntityManager;
import it.ltc.logica.trasporti.calcolo.ambiti.FactoryAmbiti;
import it.ltc.logica.trasporti.calcolo.ambiti.IAmbito;

public class Calcolatore {
	
	private static Calcolatore instance;
	
	private final EntityManager<VoceDiListinoCorriere> managerVociCorriere;
	private final EntityManager<VoceDiListinoCorriereFissa> managerVociCorriereFisse;
	private final EntityManager<VoceDiListinoCorrierePercentuale> managerVociCorrierePercentuali;
	private final EntityManager<VoceDiListinoCorriereProporzionale> managerVociCorriereProporzionali;
	private final EntityManager<VoceDiListinoCorriereScaglioni> managerVociCorriereScaglioni;
	private final EntityManager<VoceDiListinoCorriereScaglioniRipetuti> managerVociCorriereScaglioniRipetuti;
	
	private final EntityManager<VoceDiListino> managerVociCommessa;
	//private final EntityManager<VoceDiListinoTrasporti> managerVociTrasporti;
	private final EntityManager<VoceDiListinoFissa> managerVociCommessaFisse;
	private final EntityManager<VoceDiListinoPercentuale> managerVociCommessaPercentuali;
	private final EntityManager<VoceDiListinoProporzionale> managerVociCommessaProporzionali;
	private final EntityManager<VoceDiListinoScaglioni> managerVociCommessaScaglioni;
	private final EntityManager<VoceDiListinoScaglioniRipetuti> managerVociCommessaScaglioniRipetuti;
	
	//Sperimentale
	private final HashMap<ListinoCommessa, List<VoceDiListino>> mappaVociDeiListiniCommesse;
	
	private Calcolatore() {
		managerVociCorriere = new EntityManager<VoceDiListinoCorriere>(VoceDiListinoCorriere.class);
		managerVociCorriereFisse = new EntityManager<VoceDiListinoCorriereFissa>(VoceDiListinoCorriereFissa.class);
		managerVociCorrierePercentuali = new EntityManager<VoceDiListinoCorrierePercentuale>(VoceDiListinoCorrierePercentuale.class);
		managerVociCorriereProporzionali = new EntityManager<VoceDiListinoCorriereProporzionale>(VoceDiListinoCorriereProporzionale.class);
		managerVociCorriereScaglioni = new EntityManager<VoceDiListinoCorriereScaglioni>(VoceDiListinoCorriereScaglioni.class);
		managerVociCorriereScaglioniRipetuti = new EntityManager<VoceDiListinoCorriereScaglioniRipetuti>(VoceDiListinoCorriereScaglioniRipetuti.class);
		managerVociCommessa = new EntityManager<VoceDiListino>(VoceDiListino.class);
		//managerVociTrasporti = new EntityManager<VoceDiListinoTrasporti>(VoceDiListinoTrasporti.class);
		managerVociCommessaFisse = new EntityManager<VoceDiListinoFissa>(VoceDiListinoFissa.class);
		managerVociCommessaPercentuali = new EntityManager<VoceDiListinoPercentuale>(VoceDiListinoPercentuale.class);
		managerVociCommessaProporzionali = new EntityManager<VoceDiListinoProporzionale>(VoceDiListinoProporzionale.class);
		managerVociCommessaScaglioni = new EntityManager<VoceDiListinoScaglioni>(VoceDiListinoScaglioni.class);
		managerVociCommessaScaglioniRipetuti = new EntityManager<VoceDiListinoScaglioniRipetuti>(VoceDiListinoScaglioniRipetuti.class);
		//Sperimentale
		mappaVociDeiListiniCommesse = new HashMap<ListinoCommessa, List<VoceDiListino>>();
	}
	
	public static Calcolatore getInstance() {
		if (instance == null) {
			instance = new Calcolatore();
		}
		return instance;
	}
	
	public List<VoceDiListinoCorriere> getVociDiListinoCorriere(ListinoCorriere listino) {
		VoceDiListinoCorriere filtroVoci = new VoceDiListinoCorriere();
		filtroVoci.setIdListino(listino.getId());
		List<VoceDiListinoCorriere> voci = managerVociCorriere.getEntities(filtroVoci);
		voci.sort(null);
		return voci;
	}
	
	public List<VoceDiListino> getVociDiListinoCommessa(ListinoCommessa listino) {
		if (!mappaVociDeiListiniCommesse.containsKey(listino)) {
			VoceDiListino filtroVoci = new VoceDiListino();
			filtroVoci.setIdListino(listino.getId());
			filtroVoci.setAmbito("TRASPORTI");
			List<VoceDiListino> voci = managerVociCommessa.getEntities(filtroVoci);
			voci.sort(null);
			mappaVociDeiListiniCommesse.put(listino, voci);
		}
		return mappaVociDeiListiniCommesse.get(listino);
	}
	
	//Sperimentale
	private List<VoceDiListino> getVociDiListinoCommessaApplicabili(ListinoCommessa listino, SpedizioneModel model) {
		List<VoceDiListino> vociApplicabili = new ArrayList<VoceDiListino>();
		List<VoceDiListino> vociNoloBase = new ArrayList<VoceDiListino>();
		for (VoceDiListino voce : getVociDiListinoCommessa(listino)) {
			IAmbito ambito = FactoryAmbiti.getAmbito(voce.getSottoAmbito());
			if (ambito.isApplicabile(model)) {
				vociApplicabili.add(voce);
				//Inoltre se è una voce nolo base la aggiungo alla lista delle sole voci nolo base
				AmbitoDiTrasporto ambitoTrasporto = AmbitoDiTrasporto.getAmbito(voce.getSottoAmbito());
				if (ambitoTrasporto.getTipo().equals(AmbitoDiTrasporto.TIPO_NOLO_BASE)) {
					vociNoloBase.add(voce);
				}
			}
		}
		//Controllo se ne ho più tipi
		boolean tipiNoloBaseDiversi = false;
		String tipoNoloBase = null;
		for (VoceDiListino voce : vociNoloBase) {
			AmbitoDiTrasporto ambitoTrasporto = AmbitoDiTrasporto.getAmbito(voce.getSottoAmbito());
			if (tipoNoloBase == null)
				tipoNoloBase = ambitoTrasporto.getCodice();
			else if (!tipoNoloBase.equals(ambitoTrasporto.getCodice())) {
				tipiNoloBaseDiversi = true;
				break;
			}
		}
		//Se è così elimino il nolo base italia
		if (tipiNoloBaseDiversi) {
			ListIterator<VoceDiListino> iterator = vociApplicabili.listIterator();
			while (iterator.hasNext()) {
				VoceDiListino voce = iterator.next();
				AmbitoDiTrasporto ambitoTrasporto = AmbitoDiTrasporto.getAmbito(voce.getSottoAmbito());
				if (ambitoTrasporto.getCodice().equals("NOLO")) {
					iterator.remove();
				}
			}
		}
		return vociApplicabili;
	}
	
	public double calcolaCosto(SpedizioneModel model, ListinoCorriere listino) {
		double costo = 0;
		CorriereCalcolato preventivoCosto = new CorriereCalcolato(listino);
		model.aggiungiPreventivoCosto(preventivoCosto);
		List<VoceDiListinoCorriere> voci = getVociDiListinoCorriere(listino);
		for (VoceDiListinoCorriere voce : voci) {
			VoceModel voceModel = getVoceModel(voce);
			IAmbito ambito = voceModel.getAmbito();
			if (ambito.isApplicabile(model)) {
				IAlgoritmo algoritmo = getAlgoritmo(voceModel.getTipoAlgoritmo(), voceModel.getStrategiaAlgoritmo(), false);
				double costoVoce = algoritmo.calcolaCosto(model, voceModel);
				if (costoVoce > 0) {
					costo += costoVoce;
					VoceCalcolata voceCalcolata = new VoceCalcolata(voce.getAmbito());
					voceCalcolata.setCosto(costoVoce);
					preventivoCosto.aggiungiVoce(voceCalcolata);
				}
			}
		}
		return costo;
	}
	
	public double calcolaRicavo(SpedizioneModel model, ListinoCommessa listino) {
		double costo = 0;
		CommessaCalcolata preventivoRicavo = new CommessaCalcolata(listino);
		model.setPreventivoRicavo(preventivoRicavo);
		List<VoceDiListino> voci =  getVociDiListinoCommessaApplicabili(listino, model);
		for (VoceDiListino voce : voci) {
			//VoceDiListinoTrasporti voceTrasporto = caricaVoceTrasporto(voce);
			VoceModel voceModel = getVoceModel(voce);
			IAmbito ambito = voceModel.getAmbito();
			if (ambito.isApplicabile(model)) {
				IAlgoritmo algoritmo = getAlgoritmo(voceModel.getTipoAlgoritmo(), voceModel.getStrategiaAlgoritmo(), true);
				double costoVoce = algoritmo.calcolaCosto(model, voceModel);
				if (costoVoce > 0) {
					costo += costoVoce;
					VoceCalcolata voceCalcolata = new VoceCalcolata(voce.getSottoAmbito()); //new VoceCalcolata(voceTrasporto.getAmbito());
					voceCalcolata.setCosto(costoVoce);
					preventivoRicavo.aggiungiVoce(voceCalcolata);
				}
			}
		}
		return costo;
	}
	
	private IAlgoritmo getAlgoritmo(String tipoAlgoritmo, String strategiaAlgoritmo, boolean ricavo) {
		IAlgoritmo algoritmo = null;
		switch (tipoAlgoritmo) {
			case AlgoritmoFisso.NOME : algoritmo = AlgoritmoFisso.getInstance(); break;
			case AlgoritmoPercentuale.NOME : 
				{
					if (ricavo) {
						algoritmo = AlgoritmoPercentuale.getInstance(strategiaAlgoritmo, AlgoritmoPercentuale.SCOPO_RICAVO); 
					} else {
						algoritmo = AlgoritmoPercentuale.getInstance(strategiaAlgoritmo, AlgoritmoPercentuale.SCOPO_COSTO);
					}
					break;
				}
			case AlgoritmoProporzionale.NOME : algoritmo = AlgoritmoProporzionale.getInstance(strategiaAlgoritmo); break;
			case AlgoritmoScaglioni.NOME : algoritmo = AlgoritmoScaglioni.getInstance(strategiaAlgoritmo); break;
			case AlgoritmoScaglioniRipetuti.NOME : algoritmo = AlgoritmoScaglioniRipetuti.getInstance(strategiaAlgoritmo); break;
		}
		return algoritmo;
	}
	
	private VoceModel getVoceModel(VoceDiListinoCorriere voce) {
		String codiceAmbito = voce.getAmbito();
		IAmbito ambito = FactoryAmbiti.getAmbito(codiceAmbito);
		double valore = 0;
		VoceModel voceModel = new VoceModel(ambito, valore);
		Double minimo = null;
		Double massimo = null;
		Double intervallo = null;
		List<Scaglione> scaglioni = new ArrayList<Scaglione>();
		String tipoAlgoritmo = voce.getTipo();
		String strategiaAlgoritmo = "";
		switch (tipoAlgoritmo) {
			case AlgoritmoFisso.NOME :
			{
				VoceDiListinoCorriereFissa voceFissa = caricaVoceFissa(voce);
				if (voceFissa != null) {
					valore = voceFissa.getValore();
				}
			}
			break;
			case AlgoritmoPercentuale.NOME :
			{
				VoceDiListinoCorrierePercentuale vocePercentuale = caricaVocePercentuale(voce);
				if (vocePercentuale != null) {
					valore = vocePercentuale.getValore();
					minimo = vocePercentuale.getValoreMinimo();
					massimo = vocePercentuale.getValoreMassimo();
					strategiaAlgoritmo = vocePercentuale.getTipo();
				}
			}
			break;
			case AlgoritmoProporzionale.NOME :
			{
				VoceDiListinoCorriereProporzionale voceProporzionale = caricaVoceProporzionale(voce);
				if (voceProporzionale != null) {
					valore = voceProporzionale.getValore();
					minimo = voceProporzionale.getMinimo();
					massimo = voceProporzionale.getMassimo();
					strategiaAlgoritmo = voceProporzionale.getTipo();
				}
			}
			break;
			case AlgoritmoScaglioni.NOME :
			{
				List<VoceDiListinoCorriereScaglioni> vociScaglioni = caricaVociScaglioni(voce);
				for (VoceDiListinoCorriereScaglioni voceScaglione : vociScaglioni) {
					Scaglione scaglione = new Scaglione();
					scaglione.setValore(voceScaglione.getValore());
					scaglione.setInizio(voceScaglione.getInizio());
					scaglione.setFine(voceScaglione.getFine());
					scaglione.setTipo(voceScaglione.getTipo());
					scaglioni.add(scaglione);
					strategiaAlgoritmo = voceScaglione.getTipo();
				}
			}
			break;
			case AlgoritmoScaglioniRipetuti.NOME :
			{
				VoceDiListinoCorriereScaglioniRipetuti voceScaglioneRipetuto = caricaVoceScaglioniRipetuti(voce);
				if (voceScaglioneRipetuto != null) {
					valore = voceScaglioneRipetuto.getValore();
					minimo = voceScaglioneRipetuto.getMinimo();
					massimo = voceScaglioneRipetuto.getMassimo();
					intervallo = voceScaglioneRipetuto.getIntervallo();
					strategiaAlgoritmo = voceScaglioneRipetuto.getTipo();
				}
			}
		}
		voceModel.setTipoAlgoritmo(tipoAlgoritmo);
		voceModel.setStrategiaAlgoritmo(strategiaAlgoritmo);
		voceModel.setValore(valore);
		voceModel.setIntervallo(intervallo);
		voceModel.setMinimo(minimo);
		voceModel.setMassimo(massimo);
		voceModel.setScaglioni(scaglioni);
		
		return voceModel;
	}
	
	private VoceModel getVoceModel(VoceDiListino voce) {
		//VoceDiListinoTrasporti voceTrasporto = caricaVoceTrasporto(voce);
		String codiceAmbito = voce.getSottoAmbito(); //voceTrasporto.getAmbito();
		IAmbito ambito = FactoryAmbiti.getAmbito(codiceAmbito);
		double valore = 0;
		VoceModel voceModel = new VoceModel(ambito, valore);
		Double minimo = null;
		Double massimo = null;
		Double intervallo = null;
		List<Scaglione> scaglioni = new ArrayList<Scaglione>();
		String tipoAlgoritmo = voce.getTipo();
		String strategiaAlgoritmo = "";
		switch (tipoAlgoritmo) {
			case AlgoritmoFisso.NOME :
			{
				VoceDiListinoFissa voceFissa = caricaVoceFissa(voce);
				if (voceFissa != null) {
					valore = voceFissa.getValore();
				}
			}
			break;
			case AlgoritmoPercentuale.NOME :
			{
				VoceDiListinoPercentuale vocePercentuale = caricaVocePercentuale(voce);
				if (vocePercentuale != null) {
					valore = vocePercentuale.getValore();
					minimo = vocePercentuale.getValoreMinimo();
					massimo = vocePercentuale.getValoreMassimo();
					strategiaAlgoritmo = vocePercentuale.getTipo();
				}
			}
			break;
			case AlgoritmoProporzionale.NOME :
			{
				VoceDiListinoProporzionale voceProporzionale = caricaVoceProporzionale(voce);
				if (voceProporzionale != null) {
					valore = voceProporzionale.getValore();
					minimo = voceProporzionale.getMinimo();
					massimo = voceProporzionale.getMassimo();
					strategiaAlgoritmo = voceProporzionale.getTipo();
				}
			}
			break;
			case AlgoritmoScaglioni.NOME :
			{
				List<VoceDiListinoScaglioni> vociScaglioni = caricaVociScaglioni(voce);
				for (VoceDiListinoScaglioni voceScaglione : vociScaglioni) {
					Scaglione scaglione = new Scaglione();
					scaglione.setValore(voceScaglione.getValore());
					scaglione.setInizio(voceScaglione.getInizio());
					scaglione.setFine(voceScaglione.getFine());
					scaglione.setTipo(voceScaglione.getTipo());
					scaglioni.add(scaglione);
					strategiaAlgoritmo = voceScaglione.getTipo();
				}
			}
			break;
			case AlgoritmoScaglioniRipetuti.NOME :
			{
				VoceDiListinoScaglioniRipetuti voceScaglioneRipetuto = caricaVoceScaglioniRipetuti(voce);
				if (voceScaglioneRipetuto != null) {
					valore = voceScaglioneRipetuto.getValore();
					minimo = voceScaglioneRipetuto.getMinimo();
					massimo = voceScaglioneRipetuto.getMassimo();
					intervallo = voceScaglioneRipetuto.getIntervallo();
					strategiaAlgoritmo = voceScaglioneRipetuto.getTipo();
				}
			}
		}
		voceModel.setTipoAlgoritmo(tipoAlgoritmo);
		voceModel.setStrategiaAlgoritmo(strategiaAlgoritmo);
		voceModel.setValore(valore);
		voceModel.setIntervallo(intervallo);
		voceModel.setMinimo(minimo);
		voceModel.setMassimo(massimo);
		voceModel.setScaglioni(scaglioni);
		
		return voceModel;
	}
	
//	public VoceDiListinoTrasporti caricaVoceTrasporto(VoceDiListino voceDiListino) {
//		VoceDiListinoTrasporti filtro = new VoceDiListinoTrasporti();
//		filtro.setId(voceDiListino.getId());
//		VoceDiListinoTrasporti voce = managerVociTrasporti.getEntity(filtro);
//		return voce;
//	}
	
	private VoceDiListinoFissa caricaVoceFissa(VoceDiListino voceDiListino) {
		VoceDiListinoFissa filtro = new VoceDiListinoFissa();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoFissa voce = managerVociCommessaFisse.getEntity(filtro);
		return voce;
	}
	
	private VoceDiListinoPercentuale caricaVocePercentuale(VoceDiListino voceDiListino) {
		VoceDiListinoPercentuale filtro = new VoceDiListinoPercentuale();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoPercentuale voce = managerVociCommessaPercentuali.getEntity(filtro);
		return voce;
	}
	
	private VoceDiListinoProporzionale caricaVoceProporzionale(VoceDiListino voceDiListino) {
		VoceDiListinoProporzionale filtro = new VoceDiListinoProporzionale();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoProporzionale voce = managerVociCommessaProporzionali.getEntity(filtro);
		return voce;
	}
	
	private List<VoceDiListinoScaglioni> caricaVociScaglioni(VoceDiListino voceDiListino) {
		VoceDiListinoScaglioni filtro = new VoceDiListinoScaglioni();
		filtro.setId(voceDiListino.getId());
		List<VoceDiListinoScaglioni> voci = managerVociCommessaScaglioni.getEntities(filtro);
		return voci;
	}
	
	private VoceDiListinoScaglioniRipetuti caricaVoceScaglioniRipetuti(VoceDiListino voceDiListino) {
		VoceDiListinoScaglioniRipetuti filtro = new VoceDiListinoScaglioniRipetuti();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoScaglioniRipetuti voce = managerVociCommessaScaglioniRipetuti.getEntity(filtro);
		return voce;
	}

	private VoceDiListinoCorriereFissa caricaVoceFissa(VoceDiListinoCorriere voceDiListino) {
		VoceDiListinoCorriereFissa filtro = new VoceDiListinoCorriereFissa();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoCorriereFissa voce = managerVociCorriereFisse.getEntity(filtro);
		return voce;
	}
	
	private VoceDiListinoCorrierePercentuale caricaVocePercentuale(VoceDiListinoCorriere voceDiListino) {
		VoceDiListinoCorrierePercentuale filtro = new VoceDiListinoCorrierePercentuale();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoCorrierePercentuale voce = managerVociCorrierePercentuali.getEntity(filtro);
		return voce;
	}
	
	private VoceDiListinoCorriereProporzionale caricaVoceProporzionale(VoceDiListinoCorriere voceDiListino) {
		VoceDiListinoCorriereProporzionale filtro = new VoceDiListinoCorriereProporzionale();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoCorriereProporzionale voce = managerVociCorriereProporzionali.getEntity(filtro);
		return voce;
	}
	
	private List<VoceDiListinoCorriereScaglioni> caricaVociScaglioni(VoceDiListinoCorriere voceDiListino) {
		VoceDiListinoCorriereScaglioni filtro = new VoceDiListinoCorriereScaglioni();
		filtro.setId(voceDiListino.getId());
		List<VoceDiListinoCorriereScaglioni> voci = managerVociCorriereScaglioni.getEntities(filtro);
		return voci;
	}
	
	private VoceDiListinoCorriereScaglioniRipetuti caricaVoceScaglioniRipetuti(VoceDiListinoCorriere voceDiListino) {
		VoceDiListinoCorriereScaglioniRipetuti filtro = new VoceDiListinoCorriereScaglioniRipetuti();
		filtro.setId(voceDiListino.getId());
		VoceDiListinoCorriereScaglioniRipetuti voce = managerVociCorriereScaglioniRipetuti.getEntity(filtro);
		return voce;
	}

}
