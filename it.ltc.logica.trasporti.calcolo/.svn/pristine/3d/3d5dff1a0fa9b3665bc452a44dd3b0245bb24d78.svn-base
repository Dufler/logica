package it.ltc.logica.trasporti.calcolo.algoritmi;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import it.ltc.logica.trasporti.calcolo.ambiti.IAmbito;

public class AlgoritmoScaglioni implements IAlgoritmo {
	
	public static final String VERSIONE = "1.0";
	public static final String NOME = "A Scaglioni";
	
	public static final String TIPO_NESSUNO = "NESSUNO";
	public static final String TIPO_PESO_VOLUME_100 = "PESO_VOLUME_100";
	public static final String TIPO_PESO_VOLUME_150 = "PESO_VOLUME_150";
	public static final String TIPO_PESO_VOLUME_167 = "PESO_VOLUME_167";
	public static final String TIPO_PESO_VOLUME_200 = "PESO_VOLUME_200";
	public static final String TIPO_PESO_VOLUME_250 = "PESO_VOLUME_250";
	public static final String TIPO_PESO_VOLUME_300 = "PESO_VOLUME_300";
	public static final String TIPO_COLLI = "COLLI";
	
	public static final String NOME_NESSUNO = "";
	public static final String NOME_PESO_VOLUME_100 = "Peso-Volume 1:100";
	public static final String NOME_PESO_VOLUME_150 = "Peso-Volume 1:150";
	public static final String NOME_PESO_VOLUME_167 = "Peso-Volume 1:167";
	public static final String NOME_PESO_VOLUME_200 = "Peso-Volume 1:200";
	public static final String NOME_PESO_VOLUME_250 = "Peso-Volume 1:250";
	public static final String NOME_PESO_VOLUME_300 = "Peso-Volume 1:300";
	public static final String NOME_COLLI = "Colli";
	
	private static final HashMap<String, String> nomiTipi = new HashMap<String, String>(8);
	private static final HashMap<String, AlgoritmoScaglioni> tipi = new HashMap<String, AlgoritmoScaglioni>(8);
	private static final List<AlgoritmoScaglioni> tipiIstanze = new ArrayList<AlgoritmoScaglioni>();
	
	private String nome;
	private String tipo;
	
	private AlgoritmoScaglioni(String name, String type) {
		nome = name;
		tipo = type;
	}
	
	public static AlgoritmoScaglioni getInstance(String tipo) {
		if (!tipi.containsKey(tipo)) {
			tipi.put(tipo, new AlgoritmoScaglioni(daiNome(tipo), tipo));			
		}
		AlgoritmoScaglioni algoritmo = tipi.get(tipo);
		return algoritmo;
	}
	
	public String getTipo() {
		return tipo;
	}
	
	public String toString() {
		String toString = (nome != null && !nome.isEmpty()) ? nome : NOME;
		return toString;
	}
	
	public boolean equals(Object o) {
		boolean uguali = false;
		if (o != null && o instanceof AlgoritmoScaglioni) {
			AlgoritmoScaglioni algoritmo = (AlgoritmoScaglioni) o;
			if (algoritmo.getTipo().equals(tipo))
				uguali = true;
		}
		return uguali;
	}

	@Override
	public String getVersione() {
		return VERSIONE;
	}

	@Override
	public String getNome() {
		return NOME;
	}

	@Override
	public double calcolaCosto(SpedizioneModel spedizione, VoceModel voce) {
		double costo = 0;
		IAmbito ambito = voce.getAmbito();
		if (ambito.isApplicabile(spedizione)) {
			double valore = ambito.getValore(spedizione, this);
			for (Scaglione scaglione : voce.getScaglioni()) {
				if (scaglione.getInizio() <= valore && valore <= scaglione.getFine()) {
					costo = scaglione.getValore();
					break;
				}
			}
			if (costo == 0) {
				Scaglione ultimo = voce.getScaglioni().get(voce.getScaglioni().size() - 1);
				if (valore > ultimo.getFine())
					costo = ultimo.getValore();
			}
			//Sperimentale
			if (tipo.equals(TIPO_COLLI))
				costo = costo * spedizione.getSpedizione().getColli();
			
		}
		return costo;
	}
	
	public static List<AlgoritmoScaglioni> getListaTipi() {
		if (tipiIstanze.isEmpty()) {
			tipiIstanze.add(getInstance(TIPO_PESO_VOLUME_100));
			tipiIstanze.add(getInstance(TIPO_PESO_VOLUME_150));
			tipiIstanze.add(getInstance(TIPO_PESO_VOLUME_167));
			tipiIstanze.add(getInstance(TIPO_PESO_VOLUME_200));
			tipiIstanze.add(getInstance(TIPO_PESO_VOLUME_250));
			tipiIstanze.add(getInstance(TIPO_PESO_VOLUME_300));
			tipiIstanze.add(getInstance(TIPO_COLLI));
		}
		return tipiIstanze;
	}
	
	private static String daiNome(String tipo) {
		if (nomiTipi.isEmpty()) {
			nomiTipi.put(TIPO_COLLI, NOME_COLLI);
			nomiTipi.put(TIPO_PESO_VOLUME_100, NOME_PESO_VOLUME_100);
			nomiTipi.put(TIPO_PESO_VOLUME_150, NOME_PESO_VOLUME_150);
			nomiTipi.put(TIPO_PESO_VOLUME_167, NOME_PESO_VOLUME_167);
			nomiTipi.put(TIPO_PESO_VOLUME_200, NOME_PESO_VOLUME_200);
			nomiTipi.put(TIPO_PESO_VOLUME_250, NOME_PESO_VOLUME_250);
			nomiTipi.put(TIPO_PESO_VOLUME_300, NOME_PESO_VOLUME_300);
			nomiTipi.put(TIPO_NESSUNO, NOME_NESSUNO);
		}
		return nomiTipi.get(tipo);
	}

	public static int getMaxDecimali(AlgoritmoScaglioni selectedValue) {
		int maxDecimali;
		String valore = selectedValue.getTipo();
		switch (valore) {
			case "COLLI" : maxDecimali = 0; break;
			default : maxDecimali = 3;
		}
		return maxDecimali;
		
	}

}
