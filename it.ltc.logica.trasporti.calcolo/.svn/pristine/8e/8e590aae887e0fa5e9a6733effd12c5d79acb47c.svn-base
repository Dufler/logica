package it.ltc.logica.trasporti.calcolo.ambiti;

import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoFisso;
import it.ltc.logica.trasporti.calcolo.algoritmi.AlgoritmoPercentuale;
import it.ltc.logica.trasporti.calcolo.algoritmi.IAlgoritmo;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;

public class ConsegnaOre10 implements IAmbito {
	
	public static final String CODIFICA_SERVIZIO_ORE10 = "O10";
	
	public static final String CODICE = "CONSEGNA_ORE_10";
	private static ConsegnaOre10 instance;
	
	private ConsegnaOre10() {}
	
	public static ConsegnaOre10 getInstance() {
		if (instance == null) {
			instance = new ConsegnaOre10();
		}
		return instance;
	}

	@Override
	public boolean isApplicabile(SpedizioneModel spedizione) {
		String servizio = spedizione.getSpedizione().getServizio();
		boolean applicabile = CODIFICA_SERVIZIO_ORE10.equals(servizio);
		return applicabile;
	}

	@Override
	public double getValore(SpedizioneModel spedizione, IAlgoritmo algoritmo) {
		double valore;
		String tipoAlgoritmo = algoritmo.getNome();
		switch (tipoAlgoritmo) {
			case AlgoritmoFisso.NOME : valore = 1; 
			case AlgoritmoPercentuale.NOME : valore = getValorePercentuale(spedizione, algoritmo); break;
			default : valore = 0; 
		}
		return valore;
	}
	
	private double getValorePercentuale(SpedizioneModel spedizione, IAlgoritmo algoritmo) {
		double valore;
		AlgoritmoPercentuale ap = (AlgoritmoPercentuale) algoritmo;
		AlgoritmoPercentuale.Scopo scopo = ap.getScopo();
		AlgoritmoPercentuale.Tipo tipo = ap.getTipo();
		if (AlgoritmoPercentuale.Scopo.COSTO == scopo) {
			switch (tipo) {
				case SOLO_NOLO_BASE : valore = spedizione.getCostoNoloBasePerCosto(); break;
				case SOLO_NOLO : valore = spedizione.getCostoNoloPerCosto(); break;
				case TUTTO : valore = spedizione.getCostoTotalePerCosto(); break;
				default : valore = 0;
			}
		} else if (AlgoritmoPercentuale.Scopo.RICAVO == scopo) {
			switch (tipo) {
				case SOLO_NOLO_BASE : valore = spedizione.getCostoNoloBasePerRicavo(); break;
				case SOLO_NOLO : valore = spedizione.getCostoNoloPerRicavo(); break;
				case TUTTO : valore = spedizione.getCostoTotalePerRicavo(); break;
				default : valore = 0;
			}
		} else {
			valore = 0;
		}
		return valore;
	}
	
	@Override
	public String toString() {
		return CODICE;
	}

}
