package it.ltc.logica.trasporti.calcolo.algoritmi;

import java.util.LinkedList;
import java.util.List;

import it.ltc.logica.common.calcolo.algoritmi.Calcolo;
import it.ltc.logica.common.calcolo.algoritmi.Calcolo.Tipo;
import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino.Scopo;
import it.ltc.logica.common.calcolo.algoritmi.ModelDaCalcolare;
import it.ltc.logica.common.calcolo.algoritmi.VoceCalcolata;
import it.ltc.logica.database.configuration.ConfigurationManager;
import it.ltc.logica.database.model.centrale.Assicurazione;
import it.ltc.logica.database.model.centrale.Contrassegno;
import it.ltc.logica.database.model.centrale.Giacenza;
import it.ltc.logica.database.model.centrale.Indirizzo;
import it.ltc.logica.database.model.centrale.ParticolaritaSpedizione;
import it.ltc.logica.database.model.centrale.Spedizione;
import it.ltc.logica.database.model.centrale.storico.ContrassegnoStorico;
import it.ltc.logica.database.model.centrale.storico.SpedizioneStorica;
import it.ltc.logica.database.orm.EntityManager;
import it.ltc.logica.trasporti.calcolo.ambiti.IAmbitoTrasporto;

public class SpedizioneModel extends ModelDaCalcolare {
	
	//private static final EntityManager<Spedizione> managerSpedizioni = new EntityManager<Spedizione>(Spedizione.class, ConfigurationManager.getDefault());
	private static final EntityManager<Contrassegno> managerContrassegni = new EntityManager<Contrassegno>(Contrassegno.class, ConfigurationManager.getDefault());
	private static final EntityManager<Assicurazione> managerAssicurazioni = new EntityManager<Assicurazione>(Assicurazione.class, ConfigurationManager.getDefault());
	private static final EntityManager<Indirizzo> managerIndirizzi = new EntityManager<Indirizzo>(Indirizzo.class, ConfigurationManager.getDefault());
	private static final EntityManager<ParticolaritaSpedizione> managerParticolarita = new EntityManager<ParticolaritaSpedizione>(ParticolaritaSpedizione.class, ConfigurationManager.getDefault());
	private static final EntityManager<Giacenza> managerGiacenze = new EntityManager<Giacenza>(Giacenza.class, ConfigurationManager.getDefault());
	
	private String label;
	
	private Spedizione spedizione;
	private Contrassegno contrassegno;
	private Assicurazione assicurazione;
	private Indirizzo destinazione;
	private Indirizzo partenza;
	private ParticolaritaSpedizione particolarita;
	private Giacenza giacenza;
	
	private Calcolo preventivoRicavo;
	private Calcolo preventivoCosto;

	public SpedizioneModel(Spedizione s, Contrassegno c, Assicurazione a, Indirizzo d, Indirizzo p, ParticolaritaSpedizione ps, Giacenza g) {
		spedizione = s;
		contrassegno = c;
		assicurazione = a;
		destinazione = d;
		partenza = p;
		particolarita = ps;
		//preventivoRicavo = new LinkedList<Calcolo>();
		//preventiviCosti = new LinkedList<Calcolo>();
		giacenza = g;
		setLabel("");
	}
	
	public static SpedizioneModel caricaSpedizione(SpedizioneStorica ss) {
		SpedizioneModel spedizione = null;
		if (ss != null) {
			Spedizione s = caricaSpedizioneDaStorico(ss);
			Contrassegno c = caricaContrassegnoDaStorico(ss);
			Assicurazione a = null;
			Indirizzo d = caricaDestinazione(s);
			Indirizzo p = caricaPartenza(s);
			ParticolaritaSpedizione ps = null;
			spedizione = new SpedizioneModel(s, c, a, d, p, ps, null);
		}
		return spedizione;
	}
	
	public static SpedizioneModel caricaSpedizione(Spedizione s) {
		SpedizioneModel spedizione = null;
		if (s != null) {
			Contrassegno c = caricaContrassegno(s);
			Assicurazione a = caricaAssicurazione(s);
			Indirizzo d = caricaDestinazione(s);
			Indirizzo p = caricaPartenza(s);
			ParticolaritaSpedizione ps = caricaParticolarita(s);
			Giacenza g = caricaPrimaGiacenza(s);
			spedizione = new SpedizioneModel(s, c, a, d, p, ps, g);
		}
		return spedizione;
	}

	public static SpedizioneModel caricaSpedizione(Spedizione s, Giacenza g) {
		SpedizioneModel spedizione = null;
		if (s != null) {
			Contrassegno c = caricaContrassegno(s);
			Assicurazione a = caricaAssicurazione(s);
			Indirizzo d = caricaDestinazione(s);
			Indirizzo p = caricaPartenza(s);
			ParticolaritaSpedizione ps = caricaParticolarita(s);
			spedizione = new SpedizioneModel(s, c, a, d, p, ps, g);
		}
		return spedizione;
	}
	
	private static Spedizione caricaSpedizioneDaStorico(SpedizioneStorica ss) {
		Spedizione s = new Spedizione();
		s.setCodiceCliente(ss.getCodiceCliente());
		s.setColli(ss.getColli());
		s.setData(ss.getData());
		s.setDatiCompleti(ss.getDatiCompleti());
		s.setGiacenza(ss.getGiacenza());
		s.setId(ss.getId());
		s.setIdCommessa(ss.getIdCommessa());
		s.setIdCorriere(ss.getIdCorriere());
		s.setIdIndirizzoDestinazione(ss.getIdIndirizzoDestinazione());
		s.setIdIndirizzoPartenza(ss.getIdIndirizzoPartenza());
		s.setIdOrdine(ss.getIdOrdine());
		s.setLetteraDiVettura(ss.getLetteraDiVettura());
		s.setParticolarita(false);
		s.setContrassegno(ss.getContrassegno());
		s.setPeso(ss.getPeso());
		s.setPezzi(ss.getPezzi());
		s.setServizio(ss.getServizio());
		s.setVolume(ss.getVolume());
		s.setRiferimentoCliente(ss.getRiferimentoCliente());
		s.setRiferimentoMittente(ss.getRiferimentoMittente());
		s.setInRitardo(ss.getInRitardo());
		return s;
	}
	
	private static Contrassegno caricaContrassegnoDaStorico(SpedizioneStorica ss) {
		Contrassegno c = null;
		if (ss.getContrassegno()) {
			c = ContrassegnoStorico.getContrassegno(ss.getId());
		}
		return c;
	}
	
	private static Contrassegno caricaContrassegno(Spedizione s) {
		Contrassegno c = null;
		if (s.getContrassegno()) {
			Contrassegno filtroContrassegno = new Contrassegno();
			filtroContrassegno.setIdSpedizione(s.getId());
			c = managerContrassegni.getEntity(filtroContrassegno);
		}
		return c;
	}
	
	private static Assicurazione caricaAssicurazione(Spedizione s) {
		Assicurazione a = null;
		if (s.getAssicurazione()) {
			Assicurazione filtroAssicurazione = new Assicurazione();
			filtroAssicurazione.setIdSpedizione(s.getId());
			a = managerAssicurazioni.getEntity(filtroAssicurazione);
		}
		return a;
	}
	
	private static Indirizzo caricaDestinazione(Spedizione s) {
		Indirizzo filtroIndirizzo = new Indirizzo();
		filtroIndirizzo.setId(s.getIdIndirizzoDestinazione());
		Indirizzo d = managerIndirizzi.getEntity(filtroIndirizzo);
		return d;
	}
	
	private static Indirizzo caricaPartenza(Spedizione s) {
		Indirizzo filtroIndirizzo = new Indirizzo();
		filtroIndirizzo.setId(s.getIdIndirizzoPartenza());
		Indirizzo p = managerIndirizzi.getEntity(filtroIndirizzo);
		return p;
	}
	
	private static ParticolaritaSpedizione caricaParticolarita(Spedizione s) {
		ParticolaritaSpedizione ps = null;
		if (s.getParticolarita() != null && s.getParticolarita()) {
			ParticolaritaSpedizione filtroParticolarita = new ParticolaritaSpedizione();
			filtroParticolarita.setIdSpedizione(s.getId());
			ps = managerParticolarita.getEntity(filtroParticolarita);
		}
		return ps;
	}
	
	private static Giacenza caricaPrimaGiacenza(Spedizione s) {
		Giacenza g = null;
		if (s.getGiacenza() != null && s.getGiacenza()) {
			Giacenza filtroGiacenza = new Giacenza();
			filtroGiacenza.setIdSpedizione(s.getId());
			g = managerGiacenze.getEntity(filtroGiacenza);
		}
		return g;
	}
	
	public Spedizione getSpedizione() {
		return spedizione;
	}
	public void setSpedizione(Spedizione spedizione) {
		this.spedizione = spedizione;
	}
	public Contrassegno getContrassegno() {
		return contrassegno;
	}
	public void setContrassegno(Contrassegno contrassegno) {
		this.contrassegno = contrassegno;
	}
	public Assicurazione getAssicurazione() {
		return assicurazione;
	}
	public void setAssicurazione(Assicurazione assicurazione) {
		this.assicurazione = assicurazione;
	}

	public Indirizzo getDestinazione() {
		return destinazione;
	}

	public void setDestinazione(Indirizzo destinazione) {
		this.destinazione = destinazione;
	}

	public Indirizzo getPartenza() {
		return partenza;
	}

	public void setPartenza(Indirizzo partenza) {
		this.partenza = partenza;
	}

	public ParticolaritaSpedizione getParticolarita() {
		return particolarita;
	}

	public void setParticolarita(ParticolaritaSpedizione particolarita) {
		this.particolarita = particolarita;
	}

	public Giacenza getGiacenza() {
		return giacenza;
	}

	public void setGiacenze(Giacenza giacenza) {
		this.giacenza = giacenza;
	}

	public String getLabel() {
		return label;
	}

	public void setLabel(String label) {
		this.label = label;
	}

	public Calcolo getPreventivoRicavo() {
		return preventivoRicavo;
	}
	
	public void addCalcolo(Calcolo calcolo) {
		if (calcolo.getTipo() == Tipo.COSTO)
			this.preventivoCosto = calcolo;
		else if (calcolo.getTipo() == Tipo.RICAVO)
			this.preventivoRicavo = calcolo;
		mappaCalcoli.put(calcolo.getIdListino(), calcolo);
	}
	

//	public void addPreventivoRicavo(Calcolo preventivoRicavo) {
//		this.preventivoRicavo = preventivoRicavo;
//		addCalcolo(preventivoRicavo);
//	}

	public Calcolo getPreventivoCosto() {
		return preventivoCosto;
	}

//	public void addPreventivoCosto(Calcolo preventivoCosto) {
//		this.preventivoCosto = preventivoCosto;
//		addCalcolo(preventivoCosto);
//	}

	public List<Calcolo> getPreventiviRicavo() {
		List<Calcolo> preventiviRicavo = new LinkedList<Calcolo>();
		for (Calcolo calcolo : getCalcoli()) {
			if (calcolo.getTipo() == Calcolo.Tipo.RICAVO)
				preventiviRicavo.add(calcolo);
		}
		return preventiviRicavo;
	}

	public List<Calcolo> getPreventiviCosto() {
		List<Calcolo> preventiviRicavo = new LinkedList<Calcolo>();
		for (Calcolo calcolo : getCalcoli()) {
			if (calcolo.getTipo() == Calcolo.Tipo.COSTO)
				preventiviRicavo.add(calcolo);
		}
		return preventiviRicavo;
	}
	
	public double getCostoTotale(Scopo scopo) {
		double totale = 0;
		Calcolo calcolo = getCalcoloRichiesto(scopo);
		if (calcolo != null)
			for (VoceCalcolata voce : calcolo.getVoci()) {
				totale += voce.getCosto();
			}
		return totale;
	}

//	public double getCostoTotalePerRicavo() {
//		double totale = 0;
//		if (preventivoRicavo != null)
//			for (VoceCalcolata voce : preventivoRicavo.getVoci()) {
//				totale += voce.getCosto();
//			}
//		return totale;
//	}
//
//	public double getCostoTotalePerCosto() {
//		double totale = 0;
//		if (preventivoCosto != null)
//			for (VoceCalcolata voce : preventivoCosto.getVoci()) {
//				totale += voce.getCosto();
//			}
//		return totale;
//	}
	
	public double getCostoNolo(Scopo scopo) {
		double totale = 0;
		Calcolo calcolo = getCalcoloRichiesto(scopo);
		if (calcolo != null)
			for (VoceCalcolata voce : calcolo.getVoci()) {
				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
				if (categoria == IAmbitoTrasporto.Tipo.NOLO_BASE || categoria == IAmbitoTrasporto.Tipo.NOLO_EXTRA)
					totale += voce.getCosto();
			}
		return totale;
	}

//	public double getCostoNoloPerRicavo() {
//		double totale = 0;
//		if (preventivoRicavo != null)
//			for (VoceCalcolata voce : preventivoRicavo.getVoci()) {
//				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
//				if (categoria == IAmbitoTrasporto.Tipo.NOLO_BASE || categoria == IAmbitoTrasporto.Tipo.NOLO_EXTRA)
//					totale += voce.getCosto();
//			}
//		return totale;
//	}
//
//	public double getCostoNoloPerCosto() {
//		double totale = 0;
//		if (preventivoCosto != null)
//			for (VoceCalcolata voce : preventivoCosto.getVoci()) {
//				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
//				if (categoria == IAmbitoTrasporto.Tipo.NOLO_BASE || categoria == IAmbitoTrasporto.Tipo.NOLO_EXTRA)
//					totale += voce.getCosto();
//			}
//		return totale;
//	}
	
	public double getCostoNoloBase(Scopo scopo) {
		double totale = 0;
		Calcolo calcolo = getCalcoloRichiesto(scopo);
		if (calcolo != null)
			for (VoceCalcolata voce : calcolo.getVoci()) {
				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
				if (categoria == IAmbitoTrasporto.Tipo.NOLO_BASE)
					totale += voce.getCosto();
			}
		return totale;
	}

//	public double getCostoNoloBasePerRicavo() {
//		double totale = 0;
//		if (preventivoRicavo != null)
//			for (VoceCalcolata voce : preventivoRicavo.getVoci()) {
//				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
//				if (categoria == IAmbitoTrasporto.Tipo.NOLO_BASE)
//					totale += voce.getCosto();
//			}
//		return totale;
//	}
//
//	public double getCostoNoloBasePerCosto() {
//		double totale = 0;
//		if (preventivoCosto != null)
//			for (VoceCalcolata voce : preventivoCosto.getVoci()) {
//				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
//				if (categoria == IAmbitoTrasporto.Tipo.NOLO_BASE)
//					totale += voce.getCosto();
//			}
//		return totale;
//	}

//	public double getCostoContrassegnoPerRicavo() {
//		double totale = 0;
//		if (preventivoRicavo != null)
//			for (VoceCalcolata voce : preventivoRicavo.getVoci()) {
//				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
//				if (categoria == IAmbitoTrasporto.Tipo.CONTRASSEGNO)
//					totale += voce.getCosto();
//			}
//		return totale;
//	}
	
	public double getCostoContrassegno(Scopo scopo) {
		double totale = 0;
		Calcolo calcolo = getCalcoloRichiesto(scopo);
		if (calcolo != null)
			for (VoceCalcolata voce : calcolo.getVoci()) {
				IAmbitoTrasporto.Tipo categoria = IAmbitoTrasporto.Tipo.valueOf(voce.getCategoriaAmbito());
				if (categoria == IAmbitoTrasporto.Tipo.CONTRASSEGNO)
					totale += voce.getCosto();
			}
		return totale;
	}
	
	private Calcolo getCalcoloRichiesto(Scopo scopo) {
		Calcolo calcolo;
		if (scopo == Scopo.COSTO)
			calcolo = preventivoCosto;
		else if (scopo == Scopo.RICAVO)
			calcolo = preventivoRicavo;
		else
			calcolo = null;
		return calcolo;
	}

}
