package it.ltc.logica.trasporti.calcolo.ambiti.giacenza;

import java.util.Date;

import it.ltc.logica.common.calcolo.algoritmi.MVoceDiListino;
import it.ltc.logica.database.model.centrale.fatturazione.SottoAmbitoFattura;
import it.ltc.logica.database.model.centrale.trasporti.Giacenza;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;
import it.ltc.logica.trasporti.calcolo.ambiti.IAmbitoTrasportoConValore;

public class GiacenzaSosta extends IAmbitoTrasportoConValore {
	
	public static final int ID = 17;
	
	private final int franchigia;
	
	public GiacenzaSosta(SottoAmbitoFattura ambito, String valore) {
		super(ambito, valore);
		franchigia = parseValue(valore);
	}
	
	private int parseValue(String valore) {
		int value;
		try {
			value = Integer.parseInt(valore);
		} catch (NumberFormatException e) {
			value = 0;
		}
		return value;
	}

	@Override
	public boolean isApplicabile(SpedizioneModel spedizione) {
		boolean applicabile = false;
		Integer durata = getDurataInGiorniSostaGiacenza(spedizione.getGiacenza());
		if (durata != null && durata >= franchigia) {
			applicabile = true;
		} 
		return applicabile;
	}
	
	@Override
	public double getValore(SpedizioneModel spedizione, MVoceDiListino<SpedizioneModel> voce) {
		double base = super.getValore(spedizione, voce);
		double totale = base * getDurataInGiorniSostaGiacenza(spedizione.getGiacenza());
		return totale;
	}
	
	private Integer getDurataInGiorniSostaGiacenza(Giacenza giacenza) {
		Integer durataInGiorni = null;
		if (giacenza != null && giacenza.getChiusura() != null) {
			Date inizio = giacenza.getApertura();
			Date fine = giacenza.getChiusura();
			durataInGiorni = (int) Math.ceil((fine.getTime() - inizio.getTime()) / 86400000);
		}
		return durataInGiorni;
	}
	
	@Override
	public Tipo getTipo() {
		return Tipo.GIACENZA;
	}

}
