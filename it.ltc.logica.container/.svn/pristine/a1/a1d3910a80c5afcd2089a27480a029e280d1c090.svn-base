package it.ltc.logica.container.controller;

import java.io.File;
import java.util.Base64;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.preferences.IEclipsePreferences;
import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.ui.di.UISynchronize;

import it.ltc.logica.common.controller.ControllerCommesse;
import it.ltc.logica.common.controller.sistema.ControllerSedi;
import it.ltc.logica.database.configuration.ConfigurationManager;
import it.ltc.logica.database.configuration.Database;
import it.ltc.logica.database.model.centrale.Commessa;
import it.ltc.logica.database.model.centrale.Sede;
import it.ltc.logica.database.model.locale.User;
import it.ltc.logica.database.orm.EntityManager;
import it.ltc.logica.database.wsconsumer.WSAnswer;
import it.ltc.logica.database.wsconsumer.WSConsumer;
import it.ltc.logica.update.UpdateController;
import it.ltc.logica.utilities.json.JSON;
import it.ltc.logica.utilities.variabili.Permessi;

public class ControllerUtente {
	
	public static final int STATUS_SUCCESSO = 0;
	public static final int STATUS_UTENTE_NON_TROVATO = 1;
	public static final int STATUS_PASSWORD_ERRATA = 2;
	public static final int STATUS_PROBLEMI_DI_RETE = 3;
	public static final int STATUS_PROBLEMI_GENERICI = 4;
	
	private static ControllerUtente instance;
	private final UISynchronize sync;
	private final IEclipseContext context;
	
	private final EntityManager<User> managerUtenti;
	
	
	private Utenza utente;
	
	private final LinkedHashSet<String> featureNames;
	
	private ControllerUtente(UISynchronize uisync, IEclipseContext e4context) {
		sync = uisync;
		context = e4context;
		managerUtenti = new EntityManager<User>(User.class, Database.SQLITE);
		featureNames = new LinkedHashSet<String>();
	}
	
	public static void createInstance(UISynchronize uisync, IEclipseContext e4context) {
		instance = new ControllerUtente(uisync, e4context);
	}
	
	public static ControllerUtente getInstance() {
		return instance;
	}
	
	public int login(String username, String password, boolean memorizzaPassword) {
		int returnCode;
		String authString = getAuthenticationString(username, password);
		WSConsumer c = WSConsumer.getInstance();
		WSAnswer a = c.login(authString);
		if (a.getStatus() == 200) {
			
			utente = parseJSON(a.getMessage(), username, password, authString);
			
			//Imposto le variabili globali
			setGlobalInfo(utente);
		    
		    //Imposto l'ambiente da cui recuperare i dati in base ai permessi
		    setupDB(utente.getPermessi());
		    
		    //Imposto il sistema con le informazioni recuperate.
		    setupElementiVisibili(utente.getPermessi());
		    
		    //Salvo l'utente e le sue info di login, se necessario.
		    memorizzaUtente(utente, memorizzaPassword);
		    
		    //Avvio la ricerca di aggiornamenti in base alle features legate all'utenza.
		    checkForUpdates(utente.getFeatures());
		    
			returnCode = STATUS_SUCCESSO;
		} else if (a.getStatus() == 401) {
			returnCode = STATUS_PASSWORD_ERRATA;
		} else {
			returnCode = STATUS_PROBLEMI_DI_RETE;
		}
		return returnCode;
	}
	
	private Utenza parseJSON(String json, String username, String password, String authString) {
		JSON info = new JSON();
	    info.parse(json);	    
	    
	    String nome = info.getString("nome");
	    String cognome = info.getString("cognome");
	    String email = info.getString("email");
	    String[] features = info.getStringArray("features");
	    int[] permessi = info.getIntArray("permessi");
	    int[] sedi = info.getIntArray("sedi");
	    int[] commesse = info.getIntArray("commesse");
	    int commessaDefault = commesse.length > 0 ? commesse[0] : 32;
	    
	    Utenza utente = new Utenza();
	    //Imposto le credenziali
	    utente.setUsername(username);
		utente.setPassword(password);
		utente.setAuthString(authString);
		//Imposto il sistema con le informazioni recuperate.
	    utente.setNome(nome);
	    utente.setCognome(cognome);
	    utente.setEmail(email);
	    utente.setNome(nome);
	    utente.setCognome(cognome);
	    utente.setEmail(email);
	    //Sedi
	    LinkedList<Sede> listaSedi = new LinkedList<Sede>();
	    for (int id : sedi) {
	    	Sede sede = ControllerSedi.getInstance().getSede(id);
	    	listaSedi.add(sede);
	    }
	    utente.setSedi(listaSedi);
	    //Permessi
	    boolean[] permessiUtente = utente.getPermessi();
	    for (int id : permessi) {
	    	permessiUtente[id] = true;
	    }
	    //Commesse
	    LinkedList<Commessa> listaCommesse = new LinkedList<Commessa>();
	    for (int id : commesse) {
	    	Commessa commessa = ControllerCommesse.getInstance().getCommessa(id);
	    	listaCommesse.add(commessa);
	    }
	    utente.setCommesse(listaCommesse);
	    utente.setCommessaDefault(ControllerCommesse.getInstance().getCommessa(commessaDefault));
	    //Features
	    LinkedList<String> listaFeatures = new LinkedList<>();
	    for (String feature : features) {
	    	listaFeatures.add(feature);
	    }
	    utente.setFeatures(listaFeatures);
	    
	    return utente;
	}
	
	private void setGlobalInfo(Utenza utente) {
		IEclipsePreferences rootNode = Platform.getPreferencesService().getRootNode();
		//Valori generali sull'utente.
		rootNode.put("utente.username", utente.getUsername());
		rootNode.put("utente.password", utente.getPassword());
		rootNode.put("utente.authstring", utente.getAuthString());
		rootNode.put("utente.email", utente.getEmail());
		rootNode.put("utente.nome", utente.getNome());
		rootNode.put("utente.cognome", utente.getCognome());
		//Permessi dell'utente
		boolean[] permessi = utente.getPermessi();
		for (int index = 0; index < permessi.length; index++) {
			Boolean permesso = permessi[index];
			String key = "utente.permessi." + index; 
			rootNode.put(key, permesso.toString());
		}
	}

	private void setupElementiVisibili(boolean[] permessiUtente) {
		Boolean adminPerspectiveVisible = permessiUtente[Permessi.ADMIN.getID()];
		context.set("it.ltc.logica.admin.perspective.isVisibile", adminPerspectiveVisible.toString());
	}
	
	public LinkedHashSet<String> getFeaturesNames() {
		return featureNames;
	}

	private void checkForUpdates(List<String> features) {
		for (String name : features) {
			featureNames.add(name);
		}		
		UpdateController controller = new UpdateController(featureNames);
		controller.updateFeatures();
		controller.scheduleUpdateCheck(sync);
	}

	private void setupDB(boolean[] permessi) {
		if (permessi[Permessi.TEST.getID()]) {
			ConfigurationManager.setDefault(Database.TEST);
			WSConsumer.getInstance().setDomain(WSConsumer.TEST_DOMAIN);
		}
	}
	
	public Utenza getUtente() {
		return utente;
	}

	public UISynchronize getSync() {
		return sync;
	}
	
	public File getWorkSpaceFolder() {
		File workspaceDirectory = new File(Platform.getInstanceLocation().getURL().getFile());
		return workspaceDirectory;
	}
	
	public List<User> getUtentiSuggeriti() {
		List<User> utenti = managerUtenti.getEntities();
		utenti.sort(null);
		return utenti;
	}
	
	private void memorizzaUtente(Utenza u, boolean memorizzaPassword) {
		User user = new User();
		user.setUsername(u.getUsername());
		if (memorizzaPassword)
			user.setPassword(u.getPassword());
		else
			user.setPassword("");
		user.setUltimoLogin(new Date());
		if (getUtentiSuggeriti().contains(user)) {
			managerUtenti.update(user);
		} else {
			managerUtenti.insert(user);
		}
	}
	
	public String getUserAuthenticationString() {
		String auth = utente != null ? utente.getAuthString() : "";
		return auth;
	}
	
	private String getAuthenticationString(String username, String password) {
		String basicAuth = username + ":" + password;
		String encodedAuth = Base64.getEncoder().encodeToString(basicAuth.getBytes());
		return encodedAuth;
	}

}
