package it.ltc.logica.trasporti.gui.composite;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ColumnLabelProvider;
import org.eclipse.jface.viewers.TableViewer;
import org.eclipse.jface.viewers.TableViewerColumn;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;

import it.ltc.logica.gui.decoration.Decorator;
import it.ltc.logica.trasporti.calcolo.algoritmi.CommessaCalcolata;
import it.ltc.logica.trasporti.calcolo.algoritmi.CorriereCalcolato;
import it.ltc.logica.trasporti.calcolo.algoritmi.SpedizioneModel;

public class CompositeComparazioneCostiRicaviSpedizione extends Composite {
	
	private static final String testoMargine = "Margine di guadagno: ";
	private static final String testoMarginePercentuale = "Margine di guadagno percentuale: ";
	
	private TableViewer tableViewerRicavi;
	private Table tableRicavi;
	private TableViewerColumn colonnaNomeRicavi;
	private TableViewerColumn colonnaTotaleRicavi;
	private TableViewerColumn colonnaIncidenzaPezzoRicavi;
	private TableViewerColumn colonnaIncidenzaColloRicavi;
	private TableColumn tColonnaNomeRicavi;
	private TableColumn tColonnaTotaleRicavi;
	private TableColumn tblclmnIncidenzaAPezzoRicavi;
	private TableColumn tblclmnIncidenzaAColloRicavi;
	
	private TableViewer tableViewerCosti;
	private Table tableCosti;
	private TableViewerColumn colonnaNomeCosti;
	private TableViewerColumn colonnaTotaleCosti;
	private TableViewerColumn colonnaIncidenzaPezzoCosti;
	private TableViewerColumn colonnaIncidenzaColloCosti;
	private TableColumn tColonnaNomeCosti;
	private TableColumn tColonnaTotaleCosti;	
	private TableColumn tblclmnIncidenzaAPezzoCosti;
	private TableColumn tblclmnIncidenzaAColloCosti;
	
	private Composite compositeCompara;
	private Label lblMargineDiGuadagno;
	private Label lblMargineDiGuadagnoPercentuale;

	public CompositeComparazioneCostiRicaviSpedizione(Composite parent, int style, SpedizioneModel spedizione) {
		super(parent, style);
		setLayout(new GridLayout(1, false));
		
		Composite compositeTabelle = new Composite(this, SWT.NONE);
		compositeTabelle.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		compositeTabelle.setBounds(0, 0, 64, 64);
		compositeTabelle.setLayout(new GridLayout(2, false));
		
		Label lblRicavi = new Label(compositeTabelle, SWT.NONE);
		lblRicavi.setText("Ricavi per ogni listino cliente");
		
		Label lblCostiPerOgni = new Label(compositeTabelle, SWT.NONE);
		lblCostiPerOgni.setSize(152, 15);
		lblCostiPerOgni.setText("Costi per ogni listino corriere");
		
		tableViewerRicavi = new TableViewer(compositeTabelle, SWT.BORDER | SWT.FULL_SELECTION);
		tableViewerRicavi.setContentProvider(ArrayContentProvider.getInstance());
		
		tableRicavi = tableViewerRicavi.getTable();
		tableRicavi.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				comparaCostiRicavi();
			}
		});
		tableRicavi.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableRicavi.setSize(388, 190);
		tableRicavi.setLinesVisible(true);
		tableRicavi.setHeaderVisible(true);
		
		colonnaNomeRicavi = new TableViewerColumn(tableViewerRicavi, SWT.NONE);
		colonnaNomeRicavi.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CommessaCalcolata c = (CommessaCalcolata) element;
				String nome = c.getListino().getNome();
				return nome;
			}
		});
		
		tColonnaNomeRicavi = colonnaNomeRicavi.getColumn();
		tColonnaNomeRicavi.setWidth(100);
		tColonnaNomeRicavi.setText("Listino");
		
		colonnaTotaleRicavi = new TableViewerColumn(tableViewerRicavi, SWT.NONE);
		colonnaTotaleRicavi.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CommessaCalcolata c = (CommessaCalcolata) element;
				String totale = Decorator.getEuroValue(c.getTotale());
				return totale;
			}
		});
		
		tColonnaTotaleRicavi = colonnaTotaleRicavi.getColumn();
		tColonnaTotaleRicavi.setWidth(100);
		tColonnaTotaleRicavi.setText("Totale");
		
		colonnaIncidenzaPezzoRicavi = new TableViewerColumn(tableViewerRicavi, SWT.NONE);
		colonnaIncidenzaPezzoRicavi.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CommessaCalcolata c = (CommessaCalcolata) element;
				double incidenza = c.getTotale() / spedizione.getSpedizione().getPezzi();
				String totale = Decorator.getEuroValue(incidenza);
				return totale;
			}
		});
		
		tblclmnIncidenzaAPezzoRicavi = colonnaIncidenzaPezzoRicavi.getColumn();
		tblclmnIncidenzaAPezzoRicavi.setWidth(100);
		tblclmnIncidenzaAPezzoRicavi.setText("Incidenza a Pezzo");
		
		colonnaIncidenzaColloRicavi = new TableViewerColumn(tableViewerRicavi, SWT.NONE);
		colonnaIncidenzaColloRicavi.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CommessaCalcolata c = (CommessaCalcolata) element;
				double incidenza = c.getTotale() / spedizione.getSpedizione().getColli();
				String totale = Decorator.getEuroValue(incidenza);
				return totale;
			}
		});
		
		tblclmnIncidenzaAColloRicavi = colonnaIncidenzaColloRicavi.getColumn();
		tblclmnIncidenzaAColloRicavi.setWidth(100);
		tblclmnIncidenzaAColloRicavi.setText("Incidenza a Collo");
		
		tableViewerCosti = new TableViewer(compositeTabelle, SWT.BORDER | SWT.FULL_SELECTION);
		tableViewerCosti.setContentProvider(ArrayContentProvider.getInstance());
		
		tableCosti = tableViewerCosti.getTable();
		tableCosti.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				comparaCostiRicavi();
			}
		});
		tableCosti.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tableCosti.setSize(225, 140);
		tableCosti.setLinesVisible(true);
		tableCosti.setHeaderVisible(true);
		
		colonnaNomeCosti = new TableViewerColumn(tableViewerCosti, SWT.NONE);
		colonnaNomeCosti.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CorriereCalcolato c = (CorriereCalcolato) element;
				String nome = c.getListino().getNome();
				return nome;
			}
		});
		
		tColonnaNomeCosti = colonnaNomeCosti.getColumn();
		tColonnaNomeCosti.setWidth(100);
		tColonnaNomeCosti.setText("Listino");
		
		colonnaTotaleCosti = new TableViewerColumn(tableViewerCosti, SWT.NONE);
		colonnaTotaleCosti.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CorriereCalcolato c = (CorriereCalcolato) element;
				String totale = Decorator.getEuroValue(c.getTotale());
				return totale;
			}
		});
		
		tColonnaTotaleCosti = colonnaTotaleCosti.getColumn();
		tColonnaTotaleCosti.setWidth(100);
		tColonnaTotaleCosti.setText("Totale");
		
		colonnaIncidenzaPezzoCosti = new TableViewerColumn(tableViewerCosti, SWT.NONE);
		colonnaIncidenzaPezzoCosti.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CorriereCalcolato c = (CorriereCalcolato) element;
				double incidenza = c.getTotale() / spedizione.getSpedizione().getPezzi();
				String totale = Decorator.getEuroValue(incidenza);
				return totale;
			}
		});
		
		tblclmnIncidenzaAPezzoCosti = colonnaIncidenzaPezzoCosti.getColumn();
		tblclmnIncidenzaAPezzoCosti.setWidth(100);
		tblclmnIncidenzaAPezzoCosti.setText("Incidenza a Pezzo");
		
		colonnaIncidenzaColloCosti = new TableViewerColumn(tableViewerCosti, SWT.NONE);
		colonnaIncidenzaColloCosti.setLabelProvider(new ColumnLabelProvider() {
			public String getText(Object element) {
				CorriereCalcolato c = (CorriereCalcolato) element;
				double incidenza = c.getTotale() / spedizione.getSpedizione().getColli();
				String totale = Decorator.getEuroValue(incidenza);
				return totale;
			}
		});
		
		tblclmnIncidenzaAColloCosti = colonnaIncidenzaColloCosti.getColumn();
		tblclmnIncidenzaAColloCosti.setWidth(100);
		tblclmnIncidenzaAColloCosti.setText("Incidenza a Collo");
		
		compositeCompara = new Composite(this, SWT.NONE);
		compositeCompara.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1));
		compositeCompara.setBounds(0, 0, 64, 64);
		compositeCompara.setLayout(new GridLayout(1, false));
		
		lblMargineDiGuadagno = new Label(compositeCompara, SWT.NONE);
		lblMargineDiGuadagno.setText(testoMargine);
		
		lblMargineDiGuadagnoPercentuale = new Label(compositeCompara, SWT.NONE);
		lblMargineDiGuadagnoPercentuale.setText(testoMarginePercentuale);
		
		//Aggiungo i risultati delle simulazioni
		tableViewerRicavi.setInput(spedizione.getPreventiviRicavo());
		tableViewerCosti.setInput(spedizione.getPreventiviCosti());
		
		for (TableColumn colonna : tableRicavi.getColumns()) {
			colonna.pack();
		}
		for (TableColumn colonna : tableCosti.getColumns()) {
			colonna.pack();
		}
	}
	
	private void comparaCostiRicavi() {
		Object itemRicavo = tableViewerRicavi.getStructuredSelection().getFirstElement();
		Object itemCosto = tableViewerCosti.getStructuredSelection().getFirstElement();
		if (itemRicavo != null && itemCosto != null) {
			CommessaCalcolata ricavo = (CommessaCalcolata) itemRicavo;
			CorriereCalcolato costo = (CorriereCalcolato) itemCosto;
			double margine = ricavo.getTotale() - costo.getTotale();
			double marginePercentuale = (margine / ricavo.getTotale()) * 100;
			lblMargineDiGuadagno.setText(testoMargine + Decorator.getEuroValue(margine));
			lblMargineDiGuadagnoPercentuale.setText(testoMarginePercentuale + Decorator.getMoneyValue(marginePercentuale, "%"));
			compositeCompara.layout();
		}
	}

	@Override
	protected void checkSubclass() {
		// Disable the check that prevents subclassing of SWT components
	}

}
