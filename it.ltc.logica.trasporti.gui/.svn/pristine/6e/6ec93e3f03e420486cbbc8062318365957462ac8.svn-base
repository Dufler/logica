package it.ltc.logica.trasporti.gui.elements.spedizione;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;

import it.ltc.logica.container.controller.ControllerUtente;
import it.ltc.logica.container.controller.Permessi;
import it.ltc.logica.database.model.Contrassegno;
import it.ltc.logica.database.model.Indirizzo;
import it.ltc.logica.database.model.Nazione;
import it.ltc.logica.database.model.Provincia;
import it.ltc.logica.database.model.Spedizione;
import it.ltc.logica.database.model.TipoContrassegno;
import it.ltc.logica.database.model.Valuta;
import it.ltc.logica.database.orm.ValidationResult;
import it.ltc.logica.gui.container.DialogModel;
import it.ltc.logica.trasporti.gui.composite.CompositeContrassegno;
import it.ltc.logica.trasporti.gui.composite.CompositeDatiSpedizione;
import it.ltc.logica.trasporti.gui.composite.CompositeIndirizzo;
import it.ltc.logica.trasporti.controller.SpedizioniController;

public class SpedizioneDialog extends DialogModel<Spedizione> {

	public static final String DEFAULT_TITLE = "Dettaglio Spedizione";

	private final SpedizioniController controller;
	
	private final boolean modifica;

	private final Spedizione spedizione;
	private final Contrassegno contrassegno;
	private final Indirizzo destinazione;
	private final Indirizzo mittente;

	private CTabFolder tabFolder;
	private CompositeDatiSpedizione compositeDatiSpedizione;
	private CompositeContrassegno compositeContrassegno;
	private CompositeIndirizzo compositeDestinatario;
	private CompositeIndirizzo compositeMittente;

	public SpedizioneDialog(Spedizione s) {
		super(DEFAULT_TITLE, s);
		controller = SpedizioniController.getInstance();
		spedizione = s;
		if (spedizione.getContrassegno())
			contrassegno = controller.getContrassegno(spedizione.getId());
		else
			contrassegno = null;
		destinazione = controller.getIndirizzo(spedizione.getIdIndirizzoDestinazione());
		mittente = controller.getIndirizzo(spedizione.getIdIndirizzoPartenza());
		modifica = ControllerUtente.getInstance().isAllowed(Permessi.SPEDIZIONI_MODIFICA);
	}

	@Override
	public void aggiungiElementiGrafici(Composite container) {
		container.setLayout(new GridLayout(1, false));

		tabFolder = new CTabFolder(container, SWT.BORDER);
		tabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		tabFolder.setSelectionBackground(Display.getCurrent().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT));

		CTabItem tbtmDatiSpedizione = new CTabItem(tabFolder, SWT.NONE);
		tbtmDatiSpedizione.setText("Dettagli Spedizione");

		Composite compositeDati = new Composite(tabFolder, SWT.NONE);
		tbtmDatiSpedizione.setControl(compositeDati);
		compositeDati.setLayout(new GridLayout(1, false));

		compositeDatiSpedizione = new CompositeDatiSpedizione(compositeDati, SWT.NONE);
		compositeDatiSpedizione.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		compositeDatiSpedizione.enableInputElements(modifica);
		
		if (contrassegno != null) {
			compositeContrassegno = new CompositeContrassegno(compositeDati, SWT.NONE);
			compositeContrassegno.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
			compositeContrassegno.enableInputElements(modifica);
		}

		CTabItem tbtmDestinatario = new CTabItem(tabFolder, SWT.NONE);
		tbtmDestinatario.setText("Destinatario");

		Composite compositeDatiDestinatario = new Composite(tabFolder, SWT.NONE);
		tbtmDestinatario.setControl(compositeDatiDestinatario);
		compositeDatiDestinatario.setLayout(new GridLayout(1, false));

		compositeDestinatario = new CompositeIndirizzo(compositeDatiDestinatario, SWT.NONE,	CompositeIndirizzo.TipoIndirizzo.DESTINATARIO);
		compositeDestinatario.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeDestinatario.enableInputElements(modifica);

		CTabItem tbtmMittente = new CTabItem(tabFolder, SWT.NONE);
		tbtmMittente.setText("Mittente");

		Composite compositeDatiMittente = new Composite(tabFolder, SWT.NONE);
		tbtmMittente.setControl(compositeDatiMittente);
		compositeDatiMittente.setLayout(new GridLayout(1, false));

		compositeMittente = new CompositeIndirizzo(compositeDatiMittente, SWT.NONE, CompositeIndirizzo.TipoIndirizzo.MITTENTE);
		compositeMittente.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false, 1, 1));
		compositeMittente.enableInputElements(modifica);

	}

	@Override
	public void loadModel() {
		// Dati spedizione
		compositeDatiSpedizione.setColli(spedizione.getColli());
		compositeDatiSpedizione.setPezzi(spedizione.getPezzi());
		compositeDatiSpedizione.setVolume(spedizione.getVolume());
		compositeDatiSpedizione.setPeso(spedizione.getPeso());
		compositeDatiSpedizione.setDataSpedizione(spedizione.getData());
		//Contrassegno
		if (contrassegno != null) {
			compositeContrassegno.setValore(contrassegno.getValore());
			compositeContrassegno.setValuta(Valuta.getValuta(contrassegno.getValuta()));
			compositeContrassegno.setTipoContrassegno(TipoContrassegno.getTipoContrassegno(contrassegno.getTipo()));
		}
		// Destinatario
		compositeDestinatario.setIndirizzo(destinazione.getIndirizzo());
		compositeDestinatario.setCap(destinazione.getCap());
		compositeDestinatario.setRagioneSociale(destinazione.getRagioneSociale());
		compositeDestinatario.setLocalita(destinazione.getLocalita());
		compositeDestinatario.setNazione(Nazione.getNazione(destinazione.getNazione()));
		compositeDestinatario.setProvincia(Provincia.getProvincia(destinazione.getProvincia()));
		compositeDestinatario.setPiano(destinazione.getConsegnaPiano());
		compositeDestinatario.setPrivato(destinazione.getConsegnaPrivato());
		compositeDestinatario.setGDO(destinazione.getConsegnaGDO());
		compositeDestinatario.setAppuntamento(destinazione.getConsegnaAppuntamento());
		// Mittente
		compositeMittente.setIndirizzo(mittente.getIndirizzo());
		compositeMittente.setCap(mittente.getCap());
		compositeMittente.setRagioneSociale(mittente.getRagioneSociale());
		compositeMittente.setLocalita(mittente.getLocalita());
		compositeMittente.setNazione(Nazione.getNazione(mittente.getNazione()));
		compositeMittente.setProvincia(Provincia.getProvincia(mittente.getProvincia()));
		compositeMittente.setPiano(mittente.getConsegnaPiano());
		compositeMittente.setPrivato(mittente.getConsegnaPrivato());
		compositeMittente.setGDO(mittente.getConsegnaGDO());
		compositeMittente.setAppuntamento(mittente.getConsegnaAppuntamento());
	}

	@Override
	public void copyDataToModel() {
		// Dati spedizione
		spedizione.setColli(compositeDatiSpedizione.getColli());
		spedizione.setPezzi(compositeDatiSpedizione.getPezzi());
		spedizione.setVolume(compositeDatiSpedizione.getVolume());
		spedizione.setPeso(compositeDatiSpedizione.getPeso());
		spedizione.setData(compositeDatiSpedizione.getDataSpedizione());
		//Contrassegno
		if (contrassegno != null) {
			contrassegno.setValore(compositeContrassegno.getValore());
			contrassegno.setValuta(compositeContrassegno.getValuta().getCodice());
			contrassegno.setTipo(compositeContrassegno.getTipoContrassegno().getCodice());
		}
		// Destinatario
		destinazione.setIndirizzo(compositeDestinatario.getIndirizzo());
		destinazione.setCap(compositeDestinatario.getCap());
		destinazione.setRagioneSociale(compositeDestinatario.getRagioneSociale());
		destinazione.setLocalita(compositeDestinatario.getLocalita());
		destinazione.setNazione(compositeDestinatario.getNazione().getCodiceISO3());
		destinazione.setProvincia(compositeDestinatario.getProvincia().getSigla());
		destinazione.setConsegnaPiano(compositeDestinatario.getPiano());
		destinazione.setConsegnaPrivato(compositeDestinatario.getPrivato());
		destinazione.setConsegnaGDO(compositeDestinatario.getGDO());
		destinazione.setConsegnaAppuntamento(compositeDestinatario.getAppuntamento());
		// Mittente
		mittente.setIndirizzo(compositeMittente.getIndirizzo());
		mittente.setCap(compositeMittente.getCap());
		mittente.setRagioneSociale(compositeMittente.getRagioneSociale());
		mittente.setLocalita(compositeMittente.getLocalita());
		mittente.setNazione(compositeMittente.getNazione().getCodiceISO3());
		mittente.setProvincia(compositeMittente.getProvincia().getSigla());
		mittente.setConsegnaPiano(compositeMittente.getPiano());
		mittente.setConsegnaPrivato(compositeMittente.getPrivato());
		mittente.setConsegnaGDO(compositeMittente.getGDO());
		mittente.setConsegnaAppuntamento(compositeMittente.getAppuntamento());
	}

	@Override
	public boolean updateModel() {
		boolean updateSpedizione = controller.aggiornaSpedizione(spedizione);
		boolean updateContrassegno = true;
		if (contrassegno != null)
			updateContrassegno = controller.aggiornaContrassegno(contrassegno);
		boolean updateDestinatario = controller.aggiornaIndirizzo(destinazione);
		boolean updateMittente = controller.aggiornaIndirizzo(mittente);
		boolean update = updateSpedizione && updateContrassegno && updateDestinatario && updateMittente;
		return update;
	}

	@Override
	public boolean isDirty() {
		boolean modificaSpedizione = compositeDatiSpedizione.isDirty();
		boolean modificaContrassegno = false;
		if (compositeContrassegno != null)
			compositeContrassegno.isDirty();
		boolean modificaDestinatario = compositeDestinatario.isDirty();
		boolean modificaMittente = compositeMittente.isDirty();
		return modificaSpedizione || modificaContrassegno || modificaDestinatario || modificaMittente;
	}

	@Override
	public Spedizione getValore() {
		return spedizione;
	}

	@Override
	public Spedizione createNewModel() {
		Spedizione spedizione = new Spedizione();
		return spedizione;
	}

	@Override
	public boolean insertModel() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<String> validateModel() {
		ArrayList<String> errors = new ArrayList<String>();
		ValidationResult esitoSpedizione = spedizione.validate();
		errors.addAll(esitoSpedizione.getMessages());
		ValidationResult esitoMittente = mittente.validate();
		errors.addAll(esitoMittente.getMessages());
		ValidationResult esitoDestinatario = destinazione.validate();
		errors.addAll(esitoDestinatario.getMessages());
		return errors;
	}

}
