package it.ltc.logica.database.model.centrale.utenti;

import java.util.LinkedList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import it.ltc.logica.database.configuration.ConfigurationManager;
import it.ltc.logica.database.orm.ColumnList;
import it.ltc.logica.database.orm.Entity;
import it.ltc.logica.database.orm.EntityManager;



public class Permesso extends Entity {
	
	@JsonIgnore
	public static final String NOME_TABELLA = "permesso";
	@JsonIgnore
	private static final ColumnList variabili = new ColumnList();
	
	@JsonIgnore
	private static final LinkedList<Permesso> permessi = new LinkedList<Permesso>();
	@JsonIgnore
	private static final LinkedList<Permesso> permessiAdAlbero = new LinkedList<Permesso>();
	@JsonIgnore
	private static final EntityManager<Permesso> manager = new EntityManager<Permesso>(Permesso.class, ConfigurationManager.getDefault());
	
	private Integer id;
	private String nome;
	private String categoria;
	private Integer idPadre;
	
	//Non-mapped element
	@JsonIgnore
	private final List<Permesso> figli = new LinkedList<Permesso>();
	
	@Override
	public String getNomeTabella() {
		return NOME_TABELLA;
	}

	@Override
	public ColumnList getVariabili() {
		if (variabili.isEmpty()) {
			variabili.addDefaultIDColumn();
			variabili.addString("nome", "nome");
			variabili.addString("categoria", "categoria");
			variabili.addInt("id_padre", "idPadre");
		}
		return variabili;
	}
	
	public static List<Permesso> getPermessi() {
		if (permessi.isEmpty()) {
			permessi.addAll(manager.getEntities());
		}
		return permessi;
	}
	
	public static List<Permesso> getPermessiAdAlbero() {
		if (permessiAdAlbero.isEmpty()) {
			for (Permesso permesso : getPermessi()) {
				if (permesso.getIdPadre() != null) {
					Permesso padre = getPermesso(permesso.getIdPadre());
					padre.aggiungiFiglio(permesso);
				} else {
					permessiAdAlbero.add(permesso);
				}
			}
		}
		return permessiAdAlbero;
	}
	
	private void aggiungiFiglio(Permesso permesso) {
		figli.add(permesso);		
	}

	public static Permesso getPermesso(int id) {
		Permesso permesso = null;
		for (Permesso p : getPermessi()) {
			if (p.getId() == id) {
				permesso = p;
				break;
			}
		}
		return permesso;
	}
	
	public String toString() {
		return (nome != null) ? nome : "";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Permesso other = (Permesso) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getCategoria() {
		return categoria;
	}

	public void setCategoria(String categoria) {
		this.categoria = categoria;
	}

	public Integer getIdPadre() {
		return idPadre;
	}

	public void setIdPadre(Integer idPadre) {
		this.idPadre = idPadre;
	}

	public List<Permesso> getFigli() {
		return figli;
	}

	public static boolean aggiungiPermesso(Permesso padre, String nomePermesso) {
		boolean inserimento = false;
		Permesso nuovoPermesso = new Permesso();
		nuovoPermesso.setNome(nomePermesso);
		nuovoPermesso.setCategoria(padre.getCategoria());
		nuovoPermesso.setIdPadre(padre.getId());
		int id = manager.insertAndReturnID(nuovoPermesso);
		if (id != -1) {
			nuovoPermesso.setId(id);
			padre.aggiungiFiglio(nuovoPermesso);
			inserimento = true;
		}
		return inserimento;
	}

	public static boolean update(Permesso permesso) {
		boolean update = manager.update(permesso);
		return update;
	}

}
