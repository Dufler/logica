package it.ltc.logica.database.model.centrale;

import java.util.LinkedList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import it.ltc.logica.database.configuration.ConfigurationManager;
import it.ltc.logica.database.orm.ColumnList;
import it.ltc.logica.database.orm.Entity;
import it.ltc.logica.database.orm.EntityManager;

public class TipoOrdine extends Entity {
	
	@JsonIgnore
	public static final String NOME_TABELLA = "ordine_tipo";
	@JsonIgnore
	private static final ColumnList variabili = new ColumnList();
	
	@JsonIgnore
	private static final LinkedList<TipoOrdine> listaTipiOrdine = new LinkedList<TipoOrdine>();
	@JsonIgnore
	private static final EntityManager<TipoOrdine> manager = new EntityManager<TipoOrdine>(TipoOrdine.class, ConfigurationManager.getDefault());
	
	private String codice;
	private String nome;
	private String descrizione;

	@Override
	public String getNomeTabella() {
		return NOME_TABELLA;
	}

	@Override
	public ColumnList getVariabili() {
		if (variabili.isEmpty()) {
			variabili.addString("codice", "codice", true, false);
			variabili.addString("nome", "nome");
			variabili.addString("descrizione", "descrizione");
		}
		return variabili;
	}
	
	public String toString() {
		return nome;
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((codice == null) ? 0 : codice.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TipoOrdine other = (TipoOrdine) obj;
		if (codice == null) {
			if (other.codice != null)
				return false;
		} else if (!codice.equals(other.codice))
			return false;
		return true;
	}

	public static List<TipoOrdine> getTipiOrdine() {
		if (listaTipiOrdine.isEmpty()) {
			listaTipiOrdine.addAll(manager.getEntities());
		}
		return listaTipiOrdine;
	}
	
	public static TipoOrdine getTipoOrdine(String codice) {
		TipoOrdine tipo = null;
		for (TipoOrdine t : getTipiOrdine()) {
			if (t.getCodice().equalsIgnoreCase(codice)) {
				tipo = t;
				break;
			}
		}
		return tipo;
	}

	public String getCodice() {
		return codice;
	}

	public void setCodice(String codice) {
		this.codice = codice;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getDescrizione() {
		return descrizione;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

}
