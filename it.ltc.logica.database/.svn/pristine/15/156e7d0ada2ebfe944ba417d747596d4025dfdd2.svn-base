package it.ltc.logica.database.configuration;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import com.jolbox.bonecp.BoneCP;
import com.jolbox.bonecp.BoneCPConfig;

public class MySQL extends DBMS {
	
	private BoneCP connectionPool = null;
	
	private final String dateFormat = "yyyy-MM-dd HH:mm:ss";
	private final String driverName = "com.mysql.jdbc.Driver";
	private final String dbms = "mysql";
	private final String defaultPortNumber = "3306";

	protected MySQL(Database db) {
		super(db);
		try {
			Class.forName(driverName);
			setup(db);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public String getConnectionURL(Database db) {
		String connectionURL = "jdbc:" + dbms + "://" + db.getIndirizzoDB() + ":" + defaultPortNumber + "/" + db.getNomeDB() + "?";
		connectionURL += "autoReconnect=true&useSSL=false";
		return connectionURL;
	}

	public void setup(Database db) throws Exception {
		BoneCPConfig config = new BoneCPConfig();
		config.setJdbcUrl(getConnectionURL(db));
		config.setUsername(db.getUsername()); 
		config.setPassword(db.getPassword());
		Properties configuration = new Properties();
		configuration.setProperty("db_username", db.getUsername());
		configuration.setProperty("db_password", db.getPassword());
		configuration.setProperty("db_dbms", dbms);
		configuration.setProperty("db_host", db.getIndirizzoDB());
		configuration.setProperty("db_port", defaultPortNumber);
		configuration.setProperty("db_name", db.getNomeDB());
		configuration.setProperty("useSSL", "false");
		configuration.setProperty("autoReconnect", "true");
		configuration.setProperty("validationQuery", "SELECT 1");
		configuration.setProperty("testOnBorrow", "true");
		config.setProperties(configuration);
		config.setMinConnectionsPerPartition(1);
		config.setMaxConnectionsPerPartition(3);
		config.setPartitionCount(1);
		connectionPool = new BoneCP(config);
	}

	@Override
	public String getDefaultDateFormat() {
		return dateFormat;
	}
	
	@Override
	public Connection getConnection() {
		Connection connection = null;
		try {
			connection = connectionPool.getConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return connection;
	}
	
	@Override
	public Connection getTransactionConnection() {
		Connection connection = getConnection();
		return connection;
	}
	
	public void finalize() {
		connectionPool.shutdown();
	}

	@Override
	public DBMSType getType() {
		return DBMSType.MYSQL;
	}

	@Override
	public boolean checkConnectionValidity(Connection connection) {
		boolean valid = true;
		 try {
			 if (connection == null || connection.isClosed() || !connection.isValid(1)) {
				 valid = false;
			 }
		}
		catch (SQLException e) {
			valid = false;
			e.printStackTrace();
		}
		return valid;
	}

}
