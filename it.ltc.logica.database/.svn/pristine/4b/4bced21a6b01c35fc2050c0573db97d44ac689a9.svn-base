package it.ltc.logica.database.model.centrale.trasporti;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import com.fasterxml.jackson.annotation.JsonIgnore;

import it.ltc.logica.database.orm.ColumnList;
import it.ltc.logica.database.orm.Entity;

public class Giacenza extends Entity {
	
	@JsonIgnore
	public static final int NON_FATTURABILE = 0;
	@JsonIgnore
	public static final int FATTURABILE = 1;
	@JsonIgnore
	public static final int FATTURATA = 2;
	
	@JsonIgnore
	public static final String NOME_TABELLA = "spedizione_giacenza";
	@JsonIgnore
	private static final ColumnList variabili = new ColumnList();
	
	private Integer id;
	private Integer idCommessa;
	private Integer idSpedizione;
	private Integer idDocumento;
	private Integer idMittente;
	private Integer idDestinatario;
	private Date apertura;
	private Date chiusura;
	private String letteraDiVettura;
	private String letteraDiVetturaOriginale;
	private String fatturazione;
	private Double costo;
	private Double ricavo;

	@Override
	public String getNomeTabella() {
		return NOME_TABELLA;
	}
	
	@Override
	public ColumnList getVariabili() {
		if (variabili.isEmpty()) {
			variabili.addDefaultIDColumn();
			variabili.addInt("id_commessa", "idCommessa");
			variabili.addInt("id_spedizione", "idSpedizione");
			variabili.addInt("id_documento", "idDocumento");
			variabili.addInt("id_mittente", "idMittente");
			variabili.addInt("id_destinatario", "idDestinatario");
			variabili.addDate("data_apertura", "apertura");
			variabili.addDate("data_chiusura", "chiusura");
			variabili.addString("lettera_di_vettura", "letteraDiVettura");
			variabili.addString("lettera_di_vettura_originale", "letteraDiVetturaOriginale");
			variabili.addString("fatturazione", "fatturazione", false, true);
			variabili.addDouble("costo", "costo");
			variabili.addDouble("ricavo", "ricavo");
		}
		return variabili;
	}
	
	public Integer calcolaDurata() {
		Integer durataInGiorni = null;
		if (chiusura != null) {
			GregorianCalendar inizio = new GregorianCalendar();
			inizio.setTime(apertura);
			GregorianCalendar fine = new GregorianCalendar();
			fine.setTime(chiusura);
			int inizioGiorno = inizio.get(Calendar.DAY_OF_YEAR);
			int fineGiorno = fine.get(Calendar.DAY_OF_YEAR);
			//Nel caso in cui la fine preceda l'inizio vuol dire che la giacenza Ã¨ a cavallo fra 2 anni.
			if (fineGiorno < inizioGiorno) {
				//Controllo se l'anno era bisestile.
				int offset = inizio.isLeapYear(inizio.get(Calendar.YEAR)) ? 366 : 365;
				fineGiorno += offset;
			}
			durataInGiorni = fineGiorno - inizioGiorno;
		}
		return durataInGiorni;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Giacenza other = (Giacenza) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Giacenza [id=" + id + ", apertura=" + apertura + ", chiusura=" + chiusura + ", letteraDiVettura="
				+ letteraDiVettura + "]";
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getIdCommessa() {
		return idCommessa;
	}

	public void setIdCommessa(Integer idCommessa) {
		this.idCommessa = idCommessa;
	}

	public Integer getIdSpedizione() {
		return idSpedizione;
	}

	public void setIdSpedizione(Integer idSpedizione) {
		this.idSpedizione = idSpedizione;
	}

	public Integer getIdDocumento() {
		return idDocumento;
	}

	public void setIdDocumento(Integer idOrdine) {
		this.idDocumento = idOrdine;
	}

	public Integer getIdMittente() {
		return idMittente;
	}

	public void setIdMittente(Integer idMittente) {
		this.idMittente = idMittente;
	}

	public Integer getIdDestinatario() {
		return idDestinatario;
	}

	public void setIdDestinatario(Integer idDestinatario) {
		this.idDestinatario = idDestinatario;
	}

	public Date getApertura() {
		return apertura;
	}

	public void setApertura(Date apertura) {
		this.apertura = apertura;
	}

	public Date getChiusura() {
		return chiusura;
	}

	public void setChiusura(Date chiusura) {
		this.chiusura = chiusura;
	}

	public String getLetteraDiVettura() {
		return letteraDiVettura;
	}

	public void setLetteraDiVettura(String letteraDiVettura) {
		this.letteraDiVettura = letteraDiVettura;
	}

	public String getLetteraDiVetturaOriginale() {
		return letteraDiVetturaOriginale;
	}

	public void setLetteraDiVetturaOriginale(String letteraDiVetturaOriginale) {
		this.letteraDiVetturaOriginale = letteraDiVetturaOriginale;
	}

	public String getFatturazione() {
		return fatturazione;
	}

	public void setFatturazione(String fatturazione) {
		this.fatturazione = fatturazione;
	}

	public Double getCosto() {
		return costo;
	}

	public void setCosto(Double costo) {
		this.costo = costo;
	}

	public Double getRicavo() {
		return ricavo;
	}

	public void setRicavo(Double ricavo) {
		this.ricavo = ricavo;
	}

}
