package it.ltc.logica.database.model.centrale.trasporti;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import it.ltc.logica.database.configuration.ConfigurationManager;
import it.ltc.logica.database.orm.ColumnList;
import it.ltc.logica.database.orm.Entity;
import it.ltc.logica.database.orm.EntityManager;

public class ServizioCorriere extends Entity {
	
	@JsonIgnore
	public static final String NOME_TABELLA = "corriere_servizio";
	@JsonIgnore
	private static final ColumnList variabili = new ColumnList();
	
	@JsonIgnore
	private static final EntityManager<ServizioCorriere> manager = new EntityManager<ServizioCorriere>(ServizioCorriere.class, ConfigurationManager.getDefault());
	@JsonIgnore
	private static final LinkedList<ServizioCorriere> listaServizi = new LinkedList<ServizioCorriere>();
	
	private String codice;
	private String nome;
	private Integer idCorriere;
	private String codificaCorriere;
	
	public String toString() {
		return nome;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((codice == null) ? 0 : codice.hashCode());
		result = prime * result + ((codificaCorriere == null) ? 0 : codificaCorriere.hashCode());
		result = prime * result + ((idCorriere == null) ? 0 : idCorriere.hashCode());
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ServizioCorriere other = (ServizioCorriere) obj;
		if (codice == null) {
			if (other.codice != null)
				return false;
		} else if (!codice.equals(other.codice))
			return false;
		if (codificaCorriere == null) {
			if (other.codificaCorriere != null)
				return false;
		} else if (!codificaCorriere.equals(other.codificaCorriere))
			return false;
		if (idCorriere == null) {
			if (other.idCorriere != null)
				return false;
		} else if (!idCorriere.equals(other.idCorriere))
			return false;
		return true;
	}


	@Override
	public String getNomeTabella() {	
		return NOME_TABELLA;
	}

	@Override
	public ColumnList getVariabili() {
		if (variabili.isEmpty()) {
			variabili.addString("codice", "codice", true, false);
			variabili.addInt("corriere", "idCorriere", true, false);
			variabili.addString("codifica_corriere", "codificaCorriere", true, false);
			variabili.addString("nome", "nome");
		}
		return variabili;
	}
	
	public static List<ServizioCorriere> getServizi() {
		if (listaServizi.isEmpty()) {
			listaServizi.addAll(manager.getEntities());
		}
		return listaServizi;
	}
	
	public static List<ServizioCorriere> getServiziPerCorriere(Integer idCorriere) {
		ArrayList<ServizioCorriere> lista = new ArrayList<ServizioCorriere>();
		for (ServizioCorriere servizio : getServizi()) {
			if (servizio.getIdCorriere().equals(idCorriere))
				lista.add(servizio);
		}
		return lista;
	}

	public String getCodice() {
		return codice;
	}

	public void setCodice(String codice) {
		this.codice = codice;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public Integer getIdCorriere() {
		return idCorriere;
	}

	public void setIdCorriere(Integer idCorriere) {
		this.idCorriere = idCorriere;
	}

	public String getCodificaCorriere() {
		return codificaCorriere;
	}

	public void setCodificaCorriere(String codificaCorriere) {
		this.codificaCorriere = codificaCorriere;
	}

}
