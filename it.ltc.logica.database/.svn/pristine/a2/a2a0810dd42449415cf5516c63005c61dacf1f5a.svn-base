package it.ltc.logica.database.model.centrale;

import com.fasterxml.jackson.annotation.JsonIgnore;

import it.ltc.logica.database.orm.ColumnList;
import it.ltc.logica.database.orm.Entity;

public class Commessa extends Entity {
	
	@JsonIgnore
	public static final String NOME_TABELLA = "commessa";
	@JsonIgnore
	private static final ColumnList variabili = new ColumnList();
	
//	@JsonIgnore
//	private static final LinkedList<Commessa> listaCommesse = new LinkedList<Commessa>();
//	@JsonIgnore
//	private static final EntityManager<Commessa> manager = new EntityManager<Commessa>(Commessa.class, ConfigurationManager.getDefault());

	private Integer id;
	private Integer idCliente;
	private int idSede;
	private String nome;
	private String descrizione;
	private String vecchioDbNome;
	private String vecchioDbIndirizzo;
	private String nomeRisorsa;
	private boolean legacy;
	
	@Override
	public String getNomeTabella() {
		return NOME_TABELLA;
	}

	@Override
	public ColumnList getVariabili() {
		if (variabili.isEmpty()) {
			variabili.addDefaultIDColumn();
			variabili.addInt("id_cliente", "idCliente");
			variabili.addString("nome", "nome");
			variabili.addString("descrizione", "descrizione");
			variabili.addString("vecchio_db_nome", "nomeVecchioDB");
			variabili.addString("vecchio_db_indirizzo", "indirizzoVecchioDB");
			variabili.addString("nome_risorsa", "nomeRisorsa");
		}
		return variabili;
	}
	
//	public static Commessa getCommessa(Integer idCommessa) {
//		Commessa commessa = null;
//		for (Commessa c : getCommesse()) {
//			if (c.getId().equals(idCommessa)) {
//				commessa = c;
//				break;
//			}
//		}
//		return commessa;
//	}
//	
//	public static List<Commessa> getCommesse() {
//		if (listaCommesse.isEmpty()) {
//			listaCommesse.addAll(manager.getEntities());
//		}
//		return listaCommesse;
//	}
	
	public String toString() {
		return (nome != null) ? nome : "";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Commessa other = (Commessa) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Integer getIdCliente() {
		return idCliente;
	}

	public void setIdCliente(Integer idCliente) {
		this.idCliente = idCliente;
	}

	public int getIdSede() {
		return idSede;
	}

	public void setIdSede(int idSede) {
		this.idSede = idSede;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public String getDescrizione() {
		return descrizione;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	public String getVecchioDbNome() {
		return vecchioDbNome;
	}

	public void setVecchioDbNome(String nomeVecchioDB) {
		this.vecchioDbNome = nomeVecchioDB;
	}

	public String getVecchioDbIndirizzo() {
		return vecchioDbIndirizzo;
	}

	public void setVecchioDbIndirizzo(String indirizzoVecchioDB) {
		this.vecchioDbIndirizzo = indirizzoVecchioDB;
	}

	public String getNomeRisorsa() {
		return nomeRisorsa;
	}

	public void setNomeRisorsa(String nomeRisorsa) {
		this.nomeRisorsa = nomeRisorsa;
	}

	public boolean isLegacy() {
		return legacy;
	}

	public void setLegacy(boolean legacy) {
		this.legacy = legacy;
	}

}
