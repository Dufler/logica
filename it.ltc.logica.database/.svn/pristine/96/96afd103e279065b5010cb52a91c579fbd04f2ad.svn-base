package it.ltc.logica.database.model;

import java.util.List;

import it.ltc.logica.database.orm.ColumnList;
import it.ltc.logica.database.orm.Entity;
import it.ltc.logica.database.orm.ValidEntity;
import it.ltc.logica.database.orm.ValidationResult;

public class VoceDiListinoCorriereScaglioni extends Entity implements ValidEntity, Comparable<VoceDiListinoCorriereScaglioni> {
	
	public static final String NOME_TABELLA = "listino_corriere_voce_scaglioni";
	private static final ColumnList variabili = new ColumnList();
	
	private Integer id;
	private Double inizio;
	private Double fine;
	private Double valore;
	private String tipo;

	@Override
	public String getNomeTabella() {
		return NOME_TABELLA;
	}

	@Override
	public ColumnList getVariabili() {
		if (variabili.isEmpty()) {
			variabili.addInt("id_voce", "id", true, false);
			variabili.addDouble("inizio", "inizio", true, false);
			variabili.addDouble("fine", "fine", true, false);
			variabili.addDouble("valore", "valore");
			variabili.addString("tipo", "tipo");
		}
		return variabili;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Double getInizio() {
		return inizio;
	}

	public void setInizio(Double inizio) {
		this.inizio = inizio;
	}

	public Double getFine() {
		return fine;
	}

	public void setFine(Double fine) {
		this.fine = fine;
	}

	public Double getValore() {
		return valore;
	}

	public void setValore(Double valore) {
		this.valore = valore;
	}

	public String getTipo() {
		return tipo;
	}

	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	public static ValidationResult validate(List<VoceDiListinoCorriereScaglioni> vociScaglioni) {
		ValidationResult esito = ValidationResult.getValidResult();
		vociScaglioni.sort(null);
		if (!vociScaglioni.isEmpty()) {
			VoceDiListinoCorriereScaglioni vocePrecedente = vociScaglioni.get(0);
			for (int index = 1; index < vociScaglioni.size(); index++) {
				VoceDiListinoCorriereScaglioni voce = vociScaglioni.get(index);
				if (voce.getInizio() < vocePrecedente.getFine()) {
					esito.setValid(false);
					esito.addMessage("Gli scaglioni non possono intersecarsi. " + voce.getInizio() + " - " + vocePrecedente.getFine());
				}
			}
		}
		
		return esito;
	}

	@Override
	public ValidationResult validate() {
		ValidationResult esito = ValidationResult.getValidResult();
		if (tipo == null || tipo.isEmpty()) {
			esito.setValid(false);
			esito.addMessage("Il tipo di scaglione deve essere valido.");
		}
		if (inizio == null || fine == null || inizio > fine) {
			esito.setValid(false);
			esito.addMessage("I limiti inseriti per lo scaglione non sono validi.");
		}
		if (valore == null || valore < 0) {
			esito.setValid(false);
			esito.addMessage("Il valore per lo scaglione deve essere maggiore di 0.");
		}
		return esito;
	}

	@Override
	public int compareTo(VoceDiListinoCorriereScaglioni o) {
		int order;
		if (inizio == null && o.getInizio() == null)
			order = 0;
		else if (inizio == null && o.getInizio() != null)
			order = -1;
		else if (inizio != null && o.getInizio() == null)
			order = 1;
		else if (inizio < o.getInizio())
			order = -1;
		else if (inizio > o.getInizio())
			order = 1;
		else
			order = 0;
		return order;
	}

}
