package it.ltc.logica.ufficio.gui.ingressi.elements;

import java.util.Date;

import it.ltc.logica.database.model.centrale.ingressi.Ingresso;
import it.ltc.logica.gui.elements.Ordinatore;

public class OrdinatoreIngressi extends Ordinatore<Ingresso> {
	
	private final Date now;
	
	public OrdinatoreIngressi() {
		now = new Date();
	}

	@Override
	protected int compare(Ingresso t1, Ingresso t2, int property) {
		int compare;
		switch (property) {
			case 0 : compare = ordinaPerData(t1, t2); break;
			case 1 : compare = ordinaPerRiferimentoCliente(t1, t2); break;
			case 2 : compare = ordinaPerRiferimentoInterno(t1, t2); break;
			case 3 : compare = ordinaPerPezzi(t1, t2); break;
			case 4 : compare = ordinaPerColli(t1, t2); break;
			case 5 : compare = ordinePerStato(t1, t2); break;
			case 6 : compare = ordinaPerTipo(t1, t2); break;
			default : compare = 0;
		}
		return compare;
	}

	private int ordinaPerTipo(Ingresso t1, Ingresso t2) {
		String p1 = t1.getTipo() != null ? t1.getTipo() : "";
		String p2 = t2.getTipo() != null ? t2.getTipo() : "";
		int compare = p1.compareTo(p2);
		return compare;
	}

	private int ordinePerStato(Ingresso t1, Ingresso t2) {
		String r1 = t1.getStato() != null ? t1.getStato() : "";
		String r2 = t2.getStato() != null ? t2.getStato() : "";
		int compare = r1.compareTo(r2);
		return compare;
	}

	private int ordinaPerColli(Ingresso t1, Ingresso t2) {
		Integer p1 = t1.getColli() != null ? t1.getColli() : 0;
		Integer p2 = t2.getColli() != null ? t2.getColli() : 0;
		int compare = p1.compareTo(p2);
		return compare;
	}

	private int ordinaPerPezzi(Ingresso t1, Ingresso t2) {
		Integer p1 = t1.getPezziStimati() != null ? t1.getPezziStimati() : 0;
		Integer p2 = t2.getPezziStimati() != null ? t2.getPezziStimati() : 0;
		int compare = p1.compareTo(p2);
		return compare;
	}

	private int ordinaPerRiferimentoInterno(Ingresso t1, Ingresso t2) {
		String r1 = t1.getRiferimentoInterno() != null ? t1.getRiferimentoInterno() : "";
		String r2 = t2.getRiferimentoInterno() != null ? t2.getRiferimentoInterno() : "";
		int compare = r1.compareTo(r2);
		return compare;
	}

	private int ordinaPerRiferimentoCliente(Ingresso t1, Ingresso t2) {
		String r1 = t1.getRiferimentoCliente() != null ? t1.getRiferimentoCliente() : "";
		String r2 = t2.getRiferimentoCliente() != null ? t2.getRiferimentoCliente() : "";
		int compare = r1.compareTo(r2);
		return compare;
	}

	private int ordinaPerData(Ingresso t1, Ingresso t2) {
		Date d1 = t1.getDataArrivo() != null ? t1.getDataArrivo() : now;
		Date d2 = t2.getDataArrivo() != null ? t2.getDataArrivo() : now;
		int compare = d1.compareTo(d2);
		return compare;
	}

}
