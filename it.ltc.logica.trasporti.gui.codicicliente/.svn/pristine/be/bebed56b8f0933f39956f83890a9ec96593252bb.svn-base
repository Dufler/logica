 
package it.ltc.logica.trasporti.gui.codicicliente.parts;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;

import it.ltc.logica.common.controller.trasporti.ControllerCodiciClienteCorriere;
import it.ltc.logica.container.controller.ControllerUtente;
import it.ltc.logica.container.controller.Permessi;
import it.ltc.logica.database.model.centrale.trasporti.CodiceClienteCorriere;
import it.ltc.logica.gui.wizard.DialogWizard;
import it.ltc.logica.trasporti.gui.codicicliente.elements.TabellaCodiciCliente;
import it.ltc.logica.trasporti.gui.codicicliente.wizard.NuovoCodiceClienteWizard;

public class CodiciClientePart {
	
	public static final String partID = "it.ltc.logica.trasporti.gui.codicicliente.part.codicicliente";
	
	private ControllerCodiciClienteCorriere controller;
	
	private TabellaCodiciCliente tableViewer;
	private Table table;
	private Button btnEliminaCodiceCliente;
	
	private final boolean permessoGestione;
	
	@Inject
	public CodiciClientePart() {
		controller = ControllerCodiciClienteCorriere.getInstance();
		permessoGestione = ControllerUtente.getInstance().isAllowed(Permessi.CODICI_CLIENTE_GESTIONE.getID());
	}
	
	@PostConstruct
	public void postConstruct(Composite parent) {
		parent.setLayout(new GridLayout(1, false));
		
		Composite composite = new Composite(parent, SWT.NONE);
		composite.setLayout(new GridLayout(2, false));
		
		Button btnNuovoCodiceCliente = new Button(composite, SWT.NONE);
		btnNuovoCodiceCliente.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				aggiungiCodiceCliente();
			}
		});
		btnNuovoCodiceCliente.setText("Nuovo Codice Cliente");
		btnNuovoCodiceCliente.setEnabled(permessoGestione);
		
		btnEliminaCodiceCliente = new Button(composite, SWT.NONE);
		btnEliminaCodiceCliente.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				boolean conferma = mostraMessaggioConferma("Conferma eliminazione", "Sei sicuro di voler eliminare il codice cliente selezionato?");
				if (conferma) {
					eliminaCodiceCliente();
				}
			}
		});
		btnEliminaCodiceCliente.setText("Elimina Codice Cliente");
		btnEliminaCodiceCliente.setEnabled(false);
		
		tableViewer = new TabellaCodiciCliente(parent);
		
		table = tableViewer.getTable();
		
		if (permessoGestione) {
			table.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					int selectedIndex = table.getSelectionIndex();
					boolean selection = selectedIndex != -1;
					btnEliminaCodiceCliente.setEnabled(selection);
				}
			});
		}
		table.setLinesVisible(true);
		table.setHeaderVisible(true);
		table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 1, 1));
		
		aggiornaCodici();
	}
	
	private void aggiornaCodici() {
		tableViewer.setInput(controller.getCodiciCliente());
		for (TableColumn column : table.getColumns()) {
			column.pack();
		}
	}
	
	private void aggiungiCodiceCliente() {
		DialogWizard wizard = new DialogWizard(new NuovoCodiceClienteWizard(), DialogWizard.WIZARD_LISTINO);
		int esito = wizard.open();
		if (esito == WizardDialog.OK) {
			aggiornaCodici();
		}
	}
	
	private void eliminaCodiceCliente() {
		int selectedIndex = table.getSelectionIndex();
		if (selectedIndex != -1) {
			TableItem selectedItem = table.getItem(selectedIndex);
			CodiceClienteCorriere codiceSelezionato = (CodiceClienteCorriere) selectedItem.getData();
			boolean eliminazione = controller.elimina(codiceSelezionato);
			if (eliminazione) {
				btnEliminaCodiceCliente.setEnabled(false);
				aggiornaCodici();
			} else {
				mostraMessaggioErrore("Eliminazione fallita", "Impossibile eliminare il codice cliente selezionato.");
			}
		}
	}
	
	private void mostraMessaggioErrore(String titolo, String messaggio) {
		Display display = Display.getCurrent();
		Shell messageShell = display.getActiveShell();
		MessageDialog.openError(messageShell, titolo, messaggio);
	}
	
	private boolean mostraMessaggioConferma(String titolo, String messaggio) {
		Display display = Display.getCurrent();
		Shell messageShell = display.getActiveShell();
		boolean scelta = MessageDialog.openConfirm(messageShell, titolo, messaggio);
		return scelta;
	}
	
}